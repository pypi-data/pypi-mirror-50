#!/usr/bin/python
# ################################################################## 
# 
# Copyright 2018 Teradata. All rights reserved.
# TERADATA CONFIDENTIAL AND TRADE SECRET
# 
# Primary Owner: Pankaj Purandare (pankajvinod.purandare@teradata.com)
# Secondary Owner: Secondary Owner: Kotha Mounika (mounika.kotha@teradata.com)
# 
# Version: 1.2
# Function Version: 1.7
# 
# ################################################################## 

from teradataml.common.wrapper_utils import AnalyticsWrapperUtils
from teradataml.common.utils import UtilFuncs
from teradataml.context.context import *
from teradataml.dataframe.dataframe import DataFrame
from teradataml.common.aed_utils import AedUtils
from teradataml.analytics.analytic_query_generator import AnalyticQueryGenerator
from teradataml.common.exceptions import TeradataMlException
from teradataml.common.messages import Messages
from teradataml.common.messagecodes import MessageCodes
from teradataml.common.constants import TeradataConstants
from teradataml.dataframe.dataframe_utils import DataFrameUtils as df_utils
from teradataml.options.display import display
from teradataml.analytics.mle.NaiveBayesTextClassifier import NaiveBayesTextClassifier

from teradataml.common.utils import package_deprecation

@package_deprecation('16.20.00.02', 'teradataml.analytics.sqle')
class NaiveBayesTextClassifierPredict:
    
    def __init__(self,
        object = None,
        newdata = None,
        input_token_column = None,
        doc_id_columns = None,
        model_type = "MULTINOMIAL",
        top_k = None,
        model_token_column = None,
        model_category_column = None,
        model_prob_column = None,
        newdata_partition_column = None) :
        """
        DESCRIPTION:
            The NaiveBayesTextClassifierPredict function uses the model table
            generated by the NaiveBayesTextClassifierTrainer function to 
            predict outcomes for test data.
        
        PARAMETERS:
            object:
                Required Argument.
                Specifies the teradataml DataFrame containing the model data
                or instance of NaiveBayesTextClassifier, which contains the 
                model.
            
            newdata:
                Required Argument.
                Specifies the teradataml DataFrame containing the input test 
                data.
            
            newdata_partition_column:
                Required Argument.
                Specifies Partition By columns for newdata.
                Values to this argument can be provided as list, if multiple 
                columns are used for partitioning.
                Types: str OR list of Strings (str)
            
            input_token_column:
                Required Argument.
                Specifies the name of the column in the input argument "newdata"
                that contains the tokens.
                Types: str
            
            doc_id_columns:
                Required Argument.
                Specifies the names of the columns in the input argument 
                "newdata" that contain the document identifier.
                Types: str OR list of Strings (str)
            
            model_type:
                Optional Argument.
                Specifies the model type of the text classifier. 
                Default Value: "MULTINOMIAL"
                Permitted Values: MULTINOMIAL, BERNOULLI
                Types: str
            
            top_k:
                Optional Argument.
                Specifies the number of most likely prediction categories to output 
                with their log-likelihood values (for example, the top 10 most 
                likely prediction categories). The default is all prediction 
                categories.
                Types: int
            
            model_token_column:
                Optional Argument.
                Specifies the name of the column in the argument "model" (A 
                teradataml DataFrame or NaivaBayesTextClassifier object) that 
                contains the tokens. The default value is the first column of 
                the model.
                Types: str
            
            model_category_column:
                Optional Argument.
                Specifies the name of the column in the argument "model"
                (A teradataml DataFrame or NaivaBayesTextClassifier object) 
                that contains the prediction categories. The default value is 
                the second column of the model.
                Types: str
            
            model_prob_column:
                Optional Argument.
                Specifies the name of the column in the argument "model" (A 
                teradataml DataFrame or NaivaBayesTextClassifier object) that 
                contains the token counts. The default value is the third 
                column of the model.
                Types: str
                    
        RETURNS:
            Instance of NaiveBayesTextClassifierPredict.
            Output teradataml DataFrames can be accessed using attribute
            references, such as NaiveBayesTextClassifierPredictObj.<attribute_name>.
            Output teradataml DataFrame attribute name is:
                result
        
        
        RAISES:
            TeradataMlException
        
        
        EXAMPLES:
            # Load the data to run the example
            load_example_data("NaiveBayesTextClassifierPredict",["complaints_tokens_test","token_table"])
            
            # Create teradataml DataFrame.
            token_table = DataFrame("token_table")
            complaints_tokens_test = DataFrame("complaints_tokens_test")
            
            # Create a model which is output of  NaiveBayesTextClassifier
            nbt_out = NaiveBayesTextClassifier(data = token_table,
                                               token_column = 'token',
                                               doc_id_columns = 'doc_id',
                                               doc_category_column = 'category',
                                               model_type = "Bernoulli",
                                               data_partition_column = 'category')
            
            # Example 1 -
            nbt_predict_out = NaiveBayesTextClassifierPredict(object = nbt_out,
                                                              newdata = complaints_tokens_test,
                                                              input_token_column = 'token',
                                                              doc_id_columns = 'doc_id',
                                                              model_type = "Bernoulli",
                                                              model_token_column = 'token',
                                                              model_category_column = 'category',
                                                              model_prob_column = 'prob',
                                                              newdata_partition_column = 'doc_id')
                                               
            # Print the result DataFrame
            nbt_predict_out.result
           
        
        """
        self.object  = object 
        self.newdata  = newdata 
        self.input_token_column  = input_token_column 
        self.doc_id_columns  = doc_id_columns 
        self.model_type  = model_type 
        self.top_k  = top_k 
        self.model_token_column  = model_token_column 
        self.model_category_column  = model_category_column 
        self.model_prob_column  = model_prob_column 
        self.newdata_partition_column  = newdata_partition_column 
        
        # Create TeradataPyWrapperUtils instance which contains validation functions.
        self.__awu = AnalyticsWrapperUtils()
        self.__aed_utils = AedUtils()
        
        # Create argument information matrix to do parameter checking
        self.__arg_info_matrix = []
        self.__arg_info_matrix.append(["object", self.object, False, "DataFrame"])
        self.__arg_info_matrix.append(["newdata", self.newdata, False, "DataFrame"])
        self.__arg_info_matrix.append(["newdata_partition_column", self.newdata_partition_column, False, "str"])
        self.__arg_info_matrix.append(["input_token_column", self.input_token_column, False, "str"])
        self.__arg_info_matrix.append(["doc_id_columns", self.doc_id_columns, False, "str"])
        self.__arg_info_matrix.append(["model_type", self.model_type, True, "str"])
        self.__arg_info_matrix.append(["top_k", self.top_k, True, "int"])
        self.__arg_info_matrix.append(["model_token_column", self.model_token_column, True, "str"])
        self.__arg_info_matrix.append(["model_category_column", self.model_category_column, True, "str"])
        self.__arg_info_matrix.append(["model_prob_column", self.model_prob_column, True, "str"])
        
        # Perform the function validations
        self.__validate()
        # Generate the ML query
        self.__form_tdml_query()
        # Execute ML query
        self.__execute()
        
    def __validate(self) :
        """
        Function to validate sqlmr function arguments to verify missing 
        arguments, input argument and table types. Also processes the 
        argument values.
        """
        if isinstance(self.object, NaiveBayesTextClassifier):
            self.object = self.object._mlresults[0]
            
        # Make sure that a non-NULL value has been supplied for all mandatory arguments
        self.__awu._validate_missing_required_arguments(self.__arg_info_matrix)
        
        # Make sure that a non-NULL value has been supplied correct type of argument
        self.__awu._validate_argument_types(self.__arg_info_matrix)
        
        # Check to make sure input table types are strings or data frame objects or of valid type.
        self.__awu._validate_input_table_datatype(self.newdata, "newdata", None)
        self.__awu._validate_input_table_datatype(self.object, "object", NaiveBayesTextClassifier)
        
        # Check for permitted values
        model_type_permitted_values = ["MULTINOMIAL", "BERNOULLI"]
        self.__awu._validate_permitted_values(self.model_type, model_type_permitted_values, "model_type")
        
        
        
        # Check whether the input columns passed to the argument are not empty.
        # Also check whether the input columns passed to the argument valid or not.
        self.__awu._validate_input_columns_not_empty(self.input_token_column, "input_token_column")
        self.__awu._validate_dataframe_has_argument_columns(self.input_token_column, "input_token_column", self.newdata, "newdata")
        
        self.__awu._validate_input_columns_not_empty(self.doc_id_columns, "doc_id_columns")
        self.__awu._validate_dataframe_has_argument_columns(self.doc_id_columns, "doc_id_columns", self.newdata, "newdata")
        
        self.__awu._validate_input_columns_not_empty(self.model_token_column, "model_token_column")
        self.__awu._validate_dataframe_has_argument_columns(self.model_token_column, "model_token_column", self.object, "object")
        
        self.__awu._validate_input_columns_not_empty(self.model_category_column, "model_category_column")
        self.__awu._validate_dataframe_has_argument_columns(self.model_category_column, "model_category_column", self.object, "object")
        
        self.__awu._validate_input_columns_not_empty(self.model_prob_column, "model_prob_column")
        self.__awu._validate_dataframe_has_argument_columns(self.model_prob_column, "model_prob_column", self.object, "object")
        
        self.__awu._validate_input_columns_not_empty(self.newdata_partition_column, "newdata_partition_column")
        self.__awu._validate_dataframe_has_argument_columns(self.newdata_partition_column, "newdata_partition_column", self.newdata, "newdata")
        
        
    def __form_tdml_query(self) :
        """
        Function to generate the analytical function queries. The function defines variables and list of arguments required to form the query.
        """
        # Output table arguments list
        self.__func_output_args_sql_names = []
        self.__func_output_args = []
        
        # Generate lists for rest of the function arguments
        self.__func_other_arg_sql_names = []
        self.__func_other_args = []
        self.__func_other_arg_json_datatypes = []
        
        self.__func_other_arg_sql_names.append("InputTokenColumn")
        self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.input_token_column,"'"))
        self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        self.__func_other_arg_sql_names.append("DocIdColumns")
        self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.doc_id_columns,"'"))
        self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.model_token_column is not None:
            self.__func_other_arg_sql_names.append("ModelTokenColumn")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.model_token_column,"'"))
            self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.model_category_column is not None:
            self.__func_other_arg_sql_names.append("ModelCategoryColumn")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.model_category_column,"'"))
            self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.model_prob_column is not None:
            self.__func_other_arg_sql_names.append("ModelProbColumn")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.model_prob_column,"'"))
            self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.model_type is not None and self.model_type != "MULTINOMIAL":
            self.__func_other_arg_sql_names.append("ModelType")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.model_type,"'"))
            self.__func_other_arg_json_datatypes.append("STRING")
        
        if self.top_k is not None:
            self.__func_other_arg_sql_names.append("TopK")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.top_k,"'"))
            self.__func_other_arg_json_datatypes.append("INTEGER")
        
        
        # Declare empty lists to hold input table information.
        self.__func_input_arg_sql_names = []
        self.__func_input_table_view_query = []
        self.__func_input_dataframe_type = []
        self.__func_input_distribution = []
        self.__func_input_partition_by_cols = []
        self.__func_input_order_by_cols = []
        
        # Process newdata
        newdata_partition_column = UtilFuncs._teradata_collapse_arglist(self.newdata_partition_column,"\"")
        self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.newdata, False)
        self.__func_input_distribution.append("FACT")
        self.__func_input_arg_sql_names.append("predicts")
        self.__func_input_table_view_query.append(self.__table_ref["ref"])
        self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
        self.__func_input_partition_by_cols.append(newdata_partition_column)
        self.__func_input_order_by_cols.append("NA_character_")
        
        # Process object
        self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.object, False)
        self.__func_input_distribution.append("DIMENSION")
        self.__func_input_arg_sql_names.append("model")
        self.__func_input_table_view_query.append(self.__table_ref["ref"])
        self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
        self.__func_input_partition_by_cols.append("NA_character_")
        self.__func_input_order_by_cols.append("NA_character_")
        
        function_name = "NaiveBayesTextClassifierPredict"
        # Create instance to generate SQLMR.
        aqg_obj = AnalyticQueryGenerator(function_name 
                ,self.__func_input_arg_sql_names 
                ,self.__func_input_table_view_query 
                ,self.__func_input_dataframe_type 
                ,self.__func_input_distribution 
                ,self.__func_input_partition_by_cols 
                ,self.__func_input_order_by_cols 
                ,self.__func_other_arg_sql_names 
                ,self.__func_other_args 
                ,self.__func_other_arg_json_datatypes 
                ,self.__func_output_args_sql_names 
                ,self.__func_output_args)
        # Invoke call to SQL-MR generation.
        self.sqlmr_query = aqg_obj._gen_sqlmr_select_stmt_sql()
        
        # Print SQL-MR query if requested to do so.
        if display.print_sqlmr_query:
            print(self.sqlmr_query)
        
    def __execute(self) :
        """
        Function to execute SQL-MR queries. 
        And creates dataframes for the required SQL-MR outputs.
        """
        # Generate STDOUT table name and add it to the output table list.
        sqlmr_stdout_temp_tablename = UtilFuncs._generate_temp_table_name(prefix = "td_sqlmr_out_", use_default_database = True, gc_on_quit = True, quote=False)
        try:
            UtilFuncs._create_view(sqlmr_stdout_temp_tablename, self.sqlmr_query)
        except Exception as emsg:
            raise TeradataMlException(Messages.get_message(MessageCodes.TDMLDF_EXEC_SQL_FAILED, str(emsg)), MessageCodes.TDMLDF_EXEC_SQL_FAILED)
        
        # Update output table data frames.
        self._mlresults = []
        self.result = self.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(sqlmr_stdout_temp_tablename), source_type="table", database_name=UtilFuncs._extract_db_name(sqlmr_stdout_temp_tablename))
        self._mlresults.append(self.result)
        
    def __repr__(self) :
        """
        Returns the string representation for a NaiveBayesTextClassifierPredict class instance.
        """
        repr_string="############ STDOUT Output ############"
        repr_string = "{}\n\n{}".format(repr_string,self.result)
        return repr_string
        
