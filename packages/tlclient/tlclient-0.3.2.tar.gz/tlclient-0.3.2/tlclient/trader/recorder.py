# auto generated by update_py.py

import json

import tlclient.trader.message_common as message_common
import tlclient.trader.message_market as message_market
import tlclient.trader.message_trade as message_trade
from tlclient.trader.constant import ExchangeID, OffsetFlag, OrderType, MsgType
from tlclient.linker.constant import FistType
from tlclient.linker.fist import Fist
from tlclient.linker.frame import Frame
from tlclient.linker.utility import bytify
from tlclient.linker.timer import Timer

class Recorder(Fist):

    def __init__(self, name, env_name, addr):
        Fist.__init__(self, name, FistType.RECORDER, env_name)
        self.set_master_addr(addr)
        self.create_fist()

    def sub_router(self, router_name):
        self.reg_sub(router_name)
    
    ######################
    # internal functions #
    ######################

    def dump_frame_info_to_flux(self, flux_info, f):
        if isinstance(flux_info, list):
            return [self.dump_frame_info_to_flux(flux_item, f) for flux_item in flux_info]
        else:
            flux_info['tags'].update({
                'frame_source': f.get_source(), 
                'frame_req_id': f.get_req_id(),
                'frame_err_id': f.get_err_id(),
                'frame_msg_type': f.get_msg_type()
            })
            flux_info['fields'].update({
                'frame_dt': f.get_nano()
            })
            return flux_info

    def on_pub_frame(self, f):
        msg_type = f.get_msg_type()

        if MsgType.is_market_data_type(msg_type):
            if msg_type == MsgType.MKT_SNAP:
                snap_obj = f.get_obj(message_market.MktSnap)
                self.write_points(self.dump_frame_info_to_flux(snap_obj.to_influx(), f))

            elif msg_type == MsgType.MKT_SNAP_PLUS:
                snap_obj = f.get_obj(message_market.MktSnapPlus)
                self.write_points(self.dump_frame_info_to_flux(snap_obj.to_influx(), f))

            elif msg_type == MsgType.MKT_SNAP_FUT:
                snap_obj = f.get_obj(message_market.MktSnapFut)
                self.write_points(self.dump_frame_info_to_flux(snap_obj.to_influx(), f))

            elif msg_type == MsgType.MKT_SNAP_OPT:
                snap_obj = f.get_obj(message_market.MktSnapOpt)
                self.write_points(self.dump_frame_info_to_flux(snap_obj.to_influx(), f))

            elif msg_type == MsgType.MKT_INDEX:
                idx_obj = f.get_obj(message_market.MktIndex)
                self.write_points(self.dump_frame_info_to_flux(idx_obj.to_influx(), f))

            elif msg_type == MsgType.MKT_ORDER:
                order_obj = f.get_obj(message_market.MktOrder)
                self.write_points(self.dump_frame_info_to_flux(order_obj.to_influx(), f))

            elif msg_type == MsgType.MKT_TRADE:
                trade_obj = f.get_obj(message_market.MktTrade)
                self.write_points(self.dump_frame_info_to_flux(trade_obj.to_influx(), f))

            elif msg_type == MsgType.MKT_BAR:
                bar_obj = f.get_obj(message_market.MktBar)
                self.write_points(self.dump_frame_info_to_flux(bar_obj.to_influx(), f))

            elif msg_type == MsgType.MKT_BAR_GEN:
                bar_obj = f.get_obj(message_market.MktBarGen)
                self.write_points(self.dump_frame_info_to_flux(bar_obj.to_influx(), f))

            elif msg_type == MsgType.MKT_VOL:
                vol_obj = f.get_obj(message_market.MktVol)
                self.write_points(self.dump_frame_info_to_flux(vol_obj.to_influx(), f))

        elif MsgType.is_trading_data_type(msg_type):
            if msg_type == MsgType.RSP_ORDER_INSERT:
                rsp_ord_obj = f.get_obj(message_trade.RspOrderInsert)
                self.write_points(self.dump_frame_info_to_flux(rsp_ord_obj.to_influx(), f))

            elif msg_type == MsgType.RSP_ORDER_CANCEL:
                rsp_cancel_obj = f.get_obj(message_trade.RspOrderCancel)
                self.write_points(self.dump_frame_info_to_flux(rsp_cancel_obj.to_influx(), f))

            elif msg_type == MsgType.RTN_ORDER:
                ord_object = f.get_obj(message_trade.RtnOrder)
                self.write_points(self.dump_frame_info_to_flux(ord_object.to_influx(), f))

            elif msg_type == MsgType.RTN_TRADE:
                trd_obj = f.get_obj(message_trade.RtnTrade)
                self.write_points(self.dump_frame_info_to_flux(trd_obj.to_influx(), f))

            elif msg_type == MsgType.RSP_POSITION:
                pos_d = json.loads(f.get_string())
                pos_obj = message_trade.RspPosition(pos_d)
                self.write_points(self.dump_frame_info_to_flux(pos_obj.to_influx(), f))
            
            elif msg_type == MsgType.RSP_ACCOUNT:
                acc_obj = f.get_obj(message_trade.RspAccount)
                self.write_points(self.dump_frame_info_to_flux(acc_obj.to_influx(), f))

            elif msg_type == MsgType.RSP_ACTIVE_ORDERS:
                ods_d = json.loads(f.get_string())
                ods_obj = message_trade.RspActiveOrders(ods_d)
                self.write_points(self.dump_frame_info_to_flux(ods_obj.to_influx(), f))

            elif msg_type == MsgType.RSP_CANCEL_ACTIVE_ORDERS:
                rsp_obj = f.get_obj(message_trade.RspCancelActiveOrders)
                self.write_points(self.dump_frame_info_to_flux(rsp_obj.to_influx(), f))

        elif MsgType.is_system_status_data_type(msg_type):
            if msg_type == MsgType.GTW_CONNECTION:
                gtw_con_obj = f.get_obj(message_common.GatewayConnectionStatus)
                self.write_points(self.dump_frame_info_to_flux(gtw_con_obj.to_influx(), f))

            elif msg_type == MsgType.GTW_HEART_BEAT:
                gtw_hb = f.get_obj(message_common.GatewayHeartBeat)
                self.write_points(self.dump_frame_info_to_flux(gtw_hb.to_influx(), f))

