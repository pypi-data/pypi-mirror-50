# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from pprint import pformat
from six import iteritems


class Product(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Product - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'description': 'str',
            'abbreviation': 'str',
            'product_code': 'str',
            'pgm_system_name': 'str',
            'product_versions': 'list[ProductVersion]',
            'field_handler': 'FieldHandler'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'abbreviation': 'abbreviation',
            'product_code': 'productCode',
            'pgm_system_name': 'pgmSystemName',
            'product_versions': 'productVersions',
            'field_handler': 'fieldHandler'
        }

        self._id = None
        self._name = None
        self._description = None
        self._abbreviation = None
        self._product_code = None
        self._pgm_system_name = None
        self._product_versions = None
        self._field_handler = None

    @property
    def id(self):
        """
        Gets the id of this Product.


        :return: The id of this Product.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Product.


        :param id: The id of this Product.
        :type: int
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Product.


        :return: The name of this Product.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Product.


        :param name: The name of this Product.
        :type: str
        """
        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Product.


        :return: The description of this Product.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Product.


        :param description: The description of this Product.
        :type: str
        """
        self._description = description

    @property
    def abbreviation(self):
        """
        Gets the abbreviation of this Product.


        :return: The abbreviation of this Product.
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """
        Sets the abbreviation of this Product.


        :param abbreviation: The abbreviation of this Product.
        :type: str
        """
        self._abbreviation = abbreviation

    @property
    def product_code(self):
        """
        Gets the product_code of this Product.


        :return: The product_code of this Product.
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """
        Sets the product_code of this Product.


        :param product_code: The product_code of this Product.
        :type: str
        """
        self._product_code = product_code

    @property
    def pgm_system_name(self):
        """
        Gets the pgm_system_name of this Product.


        :return: The pgm_system_name of this Product.
        :rtype: str
        """
        return self._pgm_system_name

    @pgm_system_name.setter
    def pgm_system_name(self, pgm_system_name):
        """
        Sets the pgm_system_name of this Product.


        :param pgm_system_name: The pgm_system_name of this Product.
        :type: str
        """
        self._pgm_system_name = pgm_system_name

    @property
    def product_versions(self):
        """
        Gets the product_versions of this Product.


        :return: The product_versions of this Product.
        :rtype: list[ProductVersion]
        """
        return self._product_versions

    @product_versions.setter
    def product_versions(self, product_versions):
        """
        Sets the product_versions of this Product.


        :param product_versions: The product_versions of this Product.
        :type: list[ProductVersion]
        """
        self._product_versions = product_versions

    @property
    def field_handler(self):
        """
        Gets the field_handler of this Product.


        :return: The field_handler of this Product.
        :rtype: FieldHandler
        """
        return self._field_handler

    @field_handler.setter
    def field_handler(self, field_handler):
        """
        Sets the field_handler of this Product.


        :param field_handler: The field_handler of this Product.
        :type: FieldHandler
        """
        self._field_handler = field_handler

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
	    elif isinstance(value, datetime):
		result[attr] = str(value.date())
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
