# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from pprint import pformat
from six import iteritems


class ProductVersion(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ProductVersion - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'version': 'str',
            'product': 'Product',
            'build_configuration_sets': 'list[BuildConfigurationSet]',
            'product_milestones': 'list[ProductMilestone]',
            'current_product_milestone': 'ProductMilestone',
            'build_configurations': 'list[BuildConfiguration]',
            'attributes': 'dict(str, str)',
            'product_releases': 'list[ProductRelease]',
            'field_handler': 'FieldHandler'
        }

        self.attribute_map = {
            'id': 'id',
            'version': 'version',
            'product': 'product',
            'build_configuration_sets': 'buildConfigurationSets',
            'product_milestones': 'productMilestones',
            'current_product_milestone': 'currentProductMilestone',
            'build_configurations': 'buildConfigurations',
            'attributes': 'attributes',
            'product_releases': 'productReleases',
            'field_handler': 'fieldHandler'
        }

        self._id = None
        self._version = None
        self._product = None
        self._build_configuration_sets = None
        self._product_milestones = None
        self._current_product_milestone = None
        self._build_configurations = None
        self._attributes = None
        self._product_releases = None
        self._field_handler = None

    @property
    def id(self):
        """
        Gets the id of this ProductVersion.


        :return: The id of this ProductVersion.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ProductVersion.


        :param id: The id of this ProductVersion.
        :type: int
        """
        self._id = id

    @property
    def version(self):
        """
        Gets the version of this ProductVersion.


        :return: The version of this ProductVersion.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this ProductVersion.


        :param version: The version of this ProductVersion.
        :type: str
        """
        self._version = version

    @property
    def product(self):
        """
        Gets the product of this ProductVersion.


        :return: The product of this ProductVersion.
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """
        Sets the product of this ProductVersion.


        :param product: The product of this ProductVersion.
        :type: Product
        """
        self._product = product

    @property
    def build_configuration_sets(self):
        """
        Gets the build_configuration_sets of this ProductVersion.


        :return: The build_configuration_sets of this ProductVersion.
        :rtype: list[BuildConfigurationSet]
        """
        return self._build_configuration_sets

    @build_configuration_sets.setter
    def build_configuration_sets(self, build_configuration_sets):
        """
        Sets the build_configuration_sets of this ProductVersion.


        :param build_configuration_sets: The build_configuration_sets of this ProductVersion.
        :type: list[BuildConfigurationSet]
        """
        self._build_configuration_sets = build_configuration_sets

    @property
    def product_milestones(self):
        """
        Gets the product_milestones of this ProductVersion.


        :return: The product_milestones of this ProductVersion.
        :rtype: list[ProductMilestone]
        """
        return self._product_milestones

    @product_milestones.setter
    def product_milestones(self, product_milestones):
        """
        Sets the product_milestones of this ProductVersion.


        :param product_milestones: The product_milestones of this ProductVersion.
        :type: list[ProductMilestone]
        """
        self._product_milestones = product_milestones

    @property
    def current_product_milestone(self):
        """
        Gets the current_product_milestone of this ProductVersion.


        :return: The current_product_milestone of this ProductVersion.
        :rtype: ProductMilestone
        """
        return self._current_product_milestone

    @current_product_milestone.setter
    def current_product_milestone(self, current_product_milestone):
        """
        Sets the current_product_milestone of this ProductVersion.


        :param current_product_milestone: The current_product_milestone of this ProductVersion.
        :type: ProductMilestone
        """
        self._current_product_milestone = current_product_milestone

    @property
    def build_configurations(self):
        """
        Gets the build_configurations of this ProductVersion.


        :return: The build_configurations of this ProductVersion.
        :rtype: list[BuildConfiguration]
        """
        return self._build_configurations

    @build_configurations.setter
    def build_configurations(self, build_configurations):
        """
        Sets the build_configurations of this ProductVersion.


        :param build_configurations: The build_configurations of this ProductVersion.
        :type: list[BuildConfiguration]
        """
        self._build_configurations = build_configurations

    @property
    def attributes(self):
        """
        Gets the attributes of this ProductVersion.


        :return: The attributes of this ProductVersion.
        :rtype: dict(str, str)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """
        Sets the attributes of this ProductVersion.


        :param attributes: The attributes of this ProductVersion.
        :type: dict(str, str)
        """
        self._attributes = attributes

    @property
    def product_releases(self):
        """
        Gets the product_releases of this ProductVersion.


        :return: The product_releases of this ProductVersion.
        :rtype: list[ProductRelease]
        """
        return self._product_releases

    @product_releases.setter
    def product_releases(self, product_releases):
        """
        Sets the product_releases of this ProductVersion.


        :param product_releases: The product_releases of this ProductVersion.
        :type: list[ProductRelease]
        """
        self._product_releases = product_releases

    @property
    def field_handler(self):
        """
        Gets the field_handler of this ProductVersion.


        :return: The field_handler of this ProductVersion.
        :rtype: FieldHandler
        """
        return self._field_handler

    @field_handler.setter
    def field_handler(self, field_handler):
        """
        Sets the field_handler of this ProductVersion.


        :param field_handler: The field_handler of this ProductVersion.
        :type: FieldHandler
        """
        self._field_handler = field_handler

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
	    elif isinstance(value, datetime):
		result[attr] = str(value.date())
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
