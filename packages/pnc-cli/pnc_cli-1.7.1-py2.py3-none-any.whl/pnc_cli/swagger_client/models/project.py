# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from datetime import datetime
from pprint import pformat
from six import iteritems


class Project(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Project - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'description': 'str',
            'issue_tracker_url': 'str',
            'project_url': 'str',
            'license': 'License',
            'build_configurations': 'list[BuildConfiguration]',
            'field_handler': 'FieldHandler'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'issue_tracker_url': 'issueTrackerUrl',
            'project_url': 'projectUrl',
            'license': 'license',
            'build_configurations': 'buildConfigurations',
            'field_handler': 'fieldHandler'
        }

        self._id = None
        self._name = None
        self._description = None
        self._issue_tracker_url = None
        self._project_url = None
        self._license = None
        self._build_configurations = None
        self._field_handler = None

    @property
    def id(self):
        """
        Gets the id of this Project.


        :return: The id of this Project.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Project.


        :param id: The id of this Project.
        :type: int
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Project.


        :return: The name of this Project.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Project.


        :param name: The name of this Project.
        :type: str
        """
        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Project.


        :return: The description of this Project.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Project.


        :param description: The description of this Project.
        :type: str
        """
        self._description = description

    @property
    def issue_tracker_url(self):
        """
        Gets the issue_tracker_url of this Project.


        :return: The issue_tracker_url of this Project.
        :rtype: str
        """
        return self._issue_tracker_url

    @issue_tracker_url.setter
    def issue_tracker_url(self, issue_tracker_url):
        """
        Sets the issue_tracker_url of this Project.


        :param issue_tracker_url: The issue_tracker_url of this Project.
        :type: str
        """
        self._issue_tracker_url = issue_tracker_url

    @property
    def project_url(self):
        """
        Gets the project_url of this Project.


        :return: The project_url of this Project.
        :rtype: str
        """
        return self._project_url

    @project_url.setter
    def project_url(self, project_url):
        """
        Sets the project_url of this Project.


        :param project_url: The project_url of this Project.
        :type: str
        """
        self._project_url = project_url

    @property
    def license(self):
        """
        Gets the license of this Project.


        :return: The license of this Project.
        :rtype: License
        """
        return self._license

    @license.setter
    def license(self, license):
        """
        Sets the license of this Project.


        :param license: The license of this Project.
        :type: License
        """
        self._license = license

    @property
    def build_configurations(self):
        """
        Gets the build_configurations of this Project.


        :return: The build_configurations of this Project.
        :rtype: list[BuildConfiguration]
        """
        return self._build_configurations

    @build_configurations.setter
    def build_configurations(self, build_configurations):
        """
        Sets the build_configurations of this Project.


        :param build_configurations: The build_configurations of this Project.
        :type: list[BuildConfiguration]
        """
        self._build_configurations = build_configurations

    @property
    def field_handler(self):
        """
        Gets the field_handler of this Project.


        :return: The field_handler of this Project.
        :rtype: FieldHandler
        """
        return self._field_handler

    @field_handler.setter
    def field_handler(self, field_handler):
        """
        Sets the field_handler of this Project.


        :param field_handler: The field_handler of this Project.
        :type: FieldHandler
        """
        self._field_handler = field_handler

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
	    elif isinstance(value, datetime):
		result[attr] = str(value.date())
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
