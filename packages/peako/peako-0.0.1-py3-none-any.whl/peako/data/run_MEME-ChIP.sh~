#!/usr/bin/env bash
set -o nounset -o pipefail -o errexit
function finish {
    for bname in ${TFKO%.*} ${TF_file%.*} ${KOIN_file%.*}; do
	rm "$TF_DIR/$bname-expanded-edited.bed" "$TF_DIR/$bname-expanded-sequencesRemoved.bed" "$TF_DIR/$bname-expandedTo500bpRegions-slop.bed" "$TF_DIR/$bname-pre.bed" "$TF_DIR/fastaFromBed-$bname.err" || true
    done
} 
trap finish EXIT

ERR_EXIT=109

#########################################################
##  MEME-ChIP pipeline for WT, KO, and KOIN data sets  ##
#########################################################

# Note: files should end in .narrowPeak or .narrowPeak.gz

#module load bedtools/2.23.0

##### PARAMETERS

WT_FILE=''
KO_FILE=''
KOIN_FILE=''

usage() {
   echo -e "Usage: $0 \n -i <narrowPeak directory full path (input)> \n" \
       "-o <output directory> \n" \
       "-M <meme-chip command path (run_meme-chip-neg)> \n" \
       "-s <chromosome sizes file (mm9, mm10, or hg38)> \n" \
       "-g <TRF-masked genome FASTA file (mm9, mm10, or hg38)> \n" \
       "-t <wt narrowPeak filename (contained in input directory)> \n" \
       "-c <ko narrowPeak filename (contained in input directory)> \n" \
       "-k <KOIN narrowPeak filename (contained in input directory)> \n" \
       "-p <number of processors per run> \n" \
       "[-h for help]" \
       1>&2
    exit 1
}

#while getopts ":i:o:M:f:g:t:c:k:h" opt; do
while getopts ":i:o:M:s:g:t:c:k:h" opt; do
    case $opt in
        i)
            INPUT_DIR="${OPTARG:-.}/"
            if [[ ! -d "$INPUT_DIR" ]]; then
                >&2 echo "-i requires a directory."
                exit $ERR_EXIT
            fi
            ;;
        o)
            OUTPUT_DIR="${OPTARG:-.}/"
            ;;
        M)
            MEMECHIP_PATH="${OPTARG:-}"  # run_meme-chip-neg
            ;;
#        g)
#            GENOME="${OPTARG:-}"  # mm9, mm10, or hg38
#            ;;
        s)
            CHR_SIZES="${OPTARG:-}"  # mm9, mm10, or hg38
            ;;
	g)
	    TRF_MASKED_GENOME="${OPTARG:-}"  # mm9, mm10, or hg38
	    ;;
        t)
            WT_FILE="${OPTARG:-}"
            ;;
        c)
            KO_FILE="${OPTARG:-}"
            ;;
        k)
            KOIN_FILE="${OPTARG:-}"
            ;;
        h)
            usage
            ;;
        \?)
            >&2 echo "Invalid option: -${OPTARG:-}"
            exit $ERR_EXIT
            ;;
        :)
            >&2 echo "Option -${OPTARG:-} requires an argument."
            exit $ERR_EXIT
            ;;
    esac
done

INPUT_DIR=$(realpath $INPUT_DIR)
mkdir $OUTPUT_DIR || true
OUTPUT_DIR=$(realpath $OUTPUT_DIR)
WT_FILE="$(basename -- $WT_FILE)"
KO_FILE="$(basename -- $KO_FILE)"
KOIN_FILE="$(basename -- $KOIN_FILE)"

# basic configuation
#DEFAULT_NUM_PROCS_PER_RUN=16
MPI_ENV_ARG='-pe ompi'
par_env_arg=""
par_MEME_arg=""
#if [ "$num_procs_per_run" -gt 1 ]; then # if user gives 1 then empty arguments
#    par_env_arg="$MPI_ENV_ARG $num_procs_per_run"
#    par_MEME_arg="-meme-p $num_procs_per_run"
#fi

MODULE_LOAD_CMD='module load perl meme/4.12.0'  # change to meme/4.12.0?
EDIT_CENTRIMO_SCRIPT="$HOME/KO-ChIP-seq_project/experiments/2016-05-20-CentriMo/editCentriMoHTML.sh"
PATH_BASE_TO_CENTRIMO_HTML='centrimo_out/centrimo.html'

# custom parameters
MIN_MEME_MOTIF_WIDTH=7
MAX_MEME_MOTIF_WIDTH=12
#MM9="/mnt/work1/data/genomes/mouse/mm9/iGenomes/Annotation/Archives/archive-2013-03-06-15-01-24/Genes/ChromInfo.txt" # chromosome sizes; does NOT contain 'random' chr
#MM10="$HOME/workDir/2016-05-24-TRF_data/TRF_mm10_masked/mm10.genome"
#HG38="$HOME/KO-ChIP-seq_project/experiments/2017-05-23-ChromSizes/hg38.chrom.sizes"
#TRF_MASKED_MM9="$HOME/workDir/2016-05-24-TRF_data/TRF_masked/genome-TRFmasked.fa"
#TRF_MASKED_MM10="$HOME/workDir/2016-05-24-TRF_data/TRF_mm10_masked/genome-mm10-TRFmasked.fa"
#TRF_MASKED_HG38="/mnt/work1/users/home2/cviner/genomes/TRF-masked_FrithParams_unmod/hg38/TRF_masked_hg38_noHaploAlt_noUnplaced_noChrM.fa"
#if [[ "$GENOME" == 'mm9' ]]; then
#    CHR_SIZES="$MM9"
#    TRF_MASKED_GENOME="$TRF_MASKED_MM9"
#elif [[ "$GENOME" == 'mm10' ]]; then
#    CHR_SIZES="$MM10"
#    TRF_MASKED_GENOME="$TRF_MASKED_MM10"
#elif [[ "$GENOME" == 'hg38' ]]; then
#    CHR_SIZES="$HG38"
#    TRF_MASKED_GENOME="$TRF_MASKED_HG38"
#fi

# provide chrom size and trf masked files directly on command line

##### FUNCTIONS

# Edit the CentriMo HTML file, using an existing script, after the job computing has completed.
# edit_CentriMo_HTML (<job ID to wait for> <full path to CentriMo HTML file>)
function edit_CentriMo_HTML {
	qsub -hold_jid "$1" -cwd -q hoffmangroup -o /dev/null -j y $EDIT_CENTRIMO_SCRIPT "$2"
}

# $f == $1 (*.narrowPeak)
function make_masked_fasta {
    cp "$1" "$TF_DIR"  # remove this copy at the end
    if [[ "${1##*.}" = "gz" ]]; then
	gzip -d "$TF_DIR/$1"
	bname=$(echo "$1" | sed -r 's/\.narrowPeak.gz//')
    else
	bname=$(echo "$1" | sed -r 's/\.narrowPeak//')	
    fi
    cd "$TF_DIR"
    echo $bname
    bed_pre="$bname-pre.bed"; awk 'BEGIN{FS=OFS="\t"} {midPos=($2+$10); print $1,midPos,midPos+1}' "$bname.narrowPeak" > "$TF_DIR/$bed_pre"
    bed_exp="$bname-expandedTo500bpRegions-slop.bed"; bedtools slop -i "$TF_DIR/$bed_pre" -g <(sort -V "$CWD_DIR/$CHR_SIZES" | sed "1ichrom\tsize") -l 250 -r 249 > "$TF_DIR/$bed_exp"
    awk '(($3-$2) == 500)' "$TF_DIR/$bed_exp" | awk '($1 != "chrM")' > "$TF_DIR/$bname-expanded-edited.bed" 
    awk '(($3-$2) != 500); ($1 == "chrM")' "$TF_DIR/$bed_exp" | awk '!x[$0]++' > "$TF_DIR/$bname-expanded-sequencesRemoved.bed"
    fastaFromBed -fi "$CWD_DIR/$TRF_MASKED_GENOME" -bed "$TF_DIR/$bname-expanded-edited.bed" -fo "$TF_DIR/$bname.fa" 2> "$TF_DIR/fastaFromBed-$bname.err"
}

function name_fasta {
    if [[ "${1##*.}" = "gz" ]]; then
        echo "${1%.narrowPeak.gz}.fa"
    else
        echo "${1%.*}.fa"
    fi
}

##### RUN

echo $(pwd)
CWD_DIR=$(pwd)
# create output subdirectory for TF
cd $OUTPUT_DIR  # condense into one line?
#mkdir "$TF" || echo "Directory $TF already exists. Continuing on."
#TF_DIR="$OUTPUT_DIR/$TF"  # added /
TF_DIR="$OUTPUT_DIR"

# extract genomic sequences from centered and extended peaks
for file in $WT_FILE $KO_FILE $KOIN_FILE; do  # allows for some to be unset
    cd $INPUT_DIR
    make_masked_fasta $file
done

# pull out .fa names
TFKO=$(if [[ -n "$KO_FILE" ]]; then name_fasta $KO_FILE; fi)
TF_file=$(if [[ -n "$WT_FILE" ]]; then name_fasta $WT_FILE; fi)
KOIN_file=$(if [[ -n "$KOIN_FILE" ]]; then name_fasta $KOIN_FILE; fi)


#STAT6_DBS="-db $HOME/workDir/2017-05-10-FLAG_data/STAT6-human-hocomoco-forward.meme -db $HOME/workDir/2017-05-10-FLAG_data/STAT6-human-transfac-forward.meme"

# MEME-ChIP
#if [[ -n $TFKO && -n $TF_file ]]; then 
# MEME-ChIP: WT positive set and KO negative set (differential) 
#    jID=$(echo "$MODULE_LOAD_CMD; $MEMECHIP_PATH -centrimo-local -dna $neg_arg -meme-minw $MIN_MEME_MOTIF_WIDTH -meme-maxw $MAX_MEME_MOTIF_WIDTH $par_MEME_arg -o WTvsKO-$(basename $TF_file .fa) -db $HOME/motif_databases/JASPAR/individual_jaspar_motifs/JASPAR-2018-MA1115.1-POU5F1.meme -db $HOME/motif_databases/JASPAR/JASPAR_CORE_2016_vertebrates.meme $TF_DIR/$TF_file" | qsub -terse -cwd -N "WTvsKO-$(basename $TF_file .fa)" -q hoffmangroup -o "WTvsKO-$(basename $TF_file .fa).log" -j y $par_env_arg)
#    edit_CentriMo_HTML "$jID" "WTvsKO-$(basename $TF_file .fa)/$PATH_BASE_TO_CENTRIMO_HTML"
#fi

#if [[ -n $TF_file ]]; then
# MEME-ChIP: WT positive set (non-differential) 
#    jID=$(echo "$MODULE_LOAD_CMD; $MEMECHIP_PATH -centrimo-local -dna -meme-minw $MIN_MEME_MOTIF_WIDTH -meme-maxw $MAX_MEME_MOTIF_WIDTH $par_MEME_arg -o WTonly-$(basename $TF_file .fa) -db $HOME/motif_databases/JASPAR/individual_jaspar_motifs/JASPAR-2018-MA1115.1-POU5F1.meme -db $HOME/motif_databases/JASPAR/JASPAR_CORE_2016_vertebrates.meme $TF_DIR/$TF_file" | qsub -terse -cwd -N "WTonly-$(basename $TF_file .fa)" -q hoffmangroup -o "WTonly-$(basename $TF_file .fa).log" -j y $par_env_arg)
#    edit_CentriMo_HTML "$jID" "WTonly-$(basename $TF_file .fa)/$PATH_BASE_TO_CENTRIMO_HTML"
#fi

#if [[ -n $TFKO ]]; then
# MEME-ChIP: KO positive set (non-differential)
#    jID=$(echo "$MODULE_LOAD_CMD; $MEMECHIP_PATH -centrimo-local -dna -meme-minw $MIN_MEME_MOTIF_WIDTH -meme-maxw $MAX_MEME_MOTIF_WIDTH $par_MEME_arg -centrimo-local -o KOonly-$(basename $TFKO .fa) -db $HOME/motif_databases/JASPAR/individual_jaspar_motifs/JASPAR-2018-MA1115.1-POU5F1.meme -db $HOME/motif_databases/JASPAR/JASPAR_CORE_2016_vertebrates.meme $TF_DIR/$TFKO" | qsub -terse -cwd -N "KOonly-$(basename $TFKO .fa)" -q hoffmangroup -o "KOonly-$(basename $TFKO .fa).log" -j y $par_env_arg)
#    edit_CentriMo_HTML "$jID" "KOonly-$(basename $TFKO .fa)/$PATH_BASE_TO_CENTRIMO_HTML"
#fi

#if [[ -n $KOIN_file ]]; then
# MEME-ChIP: KOIN file (non-differential) 
#    jID=$(echo "$MODULE_LOAD_CMD; $MEMECHIP_PATH -centrimo-local -dna -meme-minw $MIN_MEME_MOTIF_WIDTH -meme-maxw $MAX_MEME_MOTIF_WIDTH $par_MEME_arg -o KOIN-$(basename $KOIN_file .fa) -db $HOME/motif_databases/JASPAR/individual_jaspar_motifs/JASPAR-2018-MA1115.1-POU5F1.meme -db $HOME/motif_databases/JASPAR/JASPAR_CORE_2016_vertebrates.meme $TF_DIR/$KOIN_file" | qsub -terse -cwd -N "KOIN-$(basename $KOIN_file .fa)" -q hoffmangroup -o "KOIN-$(basename $KOIN_file .fa).log" -j y $par_env_arg)
#    edit_CentriMo_HTML "$jID" "KOIN-$(basename $KOIN_file .fa)/$PATH_BASE_TO_CENTRIMO_HTML"
#fi 


### Notes: ###
# add -centrimo-local for local mode
# (for CHOP only) -db /mnt/work1/users/home2/ddenisko/workDir/2016-09-07-MotifComparisons/test.meme
# $MEMECHIP_PATH replaces meme-chip and allows the user to choose to run run_meme-chip-neg instead
# example: add motif databases if the motif is not already present in JASPAR 
# when calling meme-chip, you would place $STAT6_DBS right before the FASTA file
#STAT6_DBS="-db $HOME/workDir/2017-05-10-FLAG_data/STAT6-human-hocomoco-forward.meme -db $HOME/workDir/2017-05-10-FLAG_data/STAT6-human-transfac-forward.meme"
# changed .fa.masked to .fa in each case

# To do:
### add usage to be executed when ran with -h (see master-script.sh) for a template