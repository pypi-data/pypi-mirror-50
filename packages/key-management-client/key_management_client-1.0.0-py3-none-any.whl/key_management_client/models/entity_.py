# coding: utf-8

"""
    Key Manager API

    API Responsible for management the tools' keys   # noqa: E501

    OpenAPI spec version: v1
    Contact: paulossjunior@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Entity_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'ontology': 'str',
        'type': 'str',
        'ontology_id': 'str',
        'tool_name': 'str',
        'tool_id': 'str'
    }

    attribute_map = {
        'url': 'url',
        'ontology': 'ontology',
        'type': 'type',
        'ontology_id': 'ontology_id',
        'tool_name': 'tool_name',
        'tool_id': 'tool_id'
    }

    def __init__(self, url=None, ontology=None, type=None, ontology_id=None, tool_name=None, tool_id=None):  # noqa: E501
        """Entity_ - a model defined in Swagger"""  # noqa: E501

        self._url = None
        self._ontology = None
        self._type = None
        self._ontology_id = None
        self._tool_name = None
        self._tool_id = None
        self.discriminator = None

        if url is not None:
            self.url = url
        self.ontology = ontology
        self.type = type
        self.ontology_id = ontology_id
        self.tool_name = tool_name
        self.tool_id = tool_id

    @property
    def url(self):
        """Gets the url of this Entity_.  # noqa: E501


        :return: The url of this Entity_.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Entity_.


        :param url: The url of this Entity_.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def ontology(self):
        """Gets the ontology of this Entity_.  # noqa: E501


        :return: The ontology of this Entity_.  # noqa: E501
        :rtype: str
        """
        return self._ontology

    @ontology.setter
    def ontology(self, ontology):
        """Sets the ontology of this Entity_.


        :param ontology: The ontology of this Entity_.  # noqa: E501
        :type: str
        """
        if ontology is None:
            raise ValueError("Invalid value for `ontology`, must not be `None`")  # noqa: E501
        if ontology is not None and len(ontology) > 50:
            raise ValueError("Invalid value for `ontology`, length must be less than or equal to `50`")  # noqa: E501
        if ontology is not None and len(ontology) < 1:
            raise ValueError("Invalid value for `ontology`, length must be greater than or equal to `1`")  # noqa: E501

        self._ontology = ontology

    @property
    def type(self):
        """Gets the type of this Entity_.  # noqa: E501


        :return: The type of this Entity_.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Entity_.


        :param type: The type of this Entity_.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        if type is not None and len(type) > 50:
            raise ValueError("Invalid value for `type`, length must be less than or equal to `50`")  # noqa: E501
        if type is not None and len(type) < 1:
            raise ValueError("Invalid value for `type`, length must be greater than or equal to `1`")  # noqa: E501

        self._type = type

    @property
    def ontology_id(self):
        """Gets the ontology_id of this Entity_.  # noqa: E501


        :return: The ontology_id of this Entity_.  # noqa: E501
        :rtype: str
        """
        return self._ontology_id

    @ontology_id.setter
    def ontology_id(self, ontology_id):
        """Sets the ontology_id of this Entity_.


        :param ontology_id: The ontology_id of this Entity_.  # noqa: E501
        :type: str
        """
        if ontology_id is None:
            raise ValueError("Invalid value for `ontology_id`, must not be `None`")  # noqa: E501
        if ontology_id is not None and len(ontology_id) > 200:
            raise ValueError("Invalid value for `ontology_id`, length must be less than or equal to `200`")  # noqa: E501
        if ontology_id is not None and len(ontology_id) < 1:
            raise ValueError("Invalid value for `ontology_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._ontology_id = ontology_id

    @property
    def tool_name(self):
        """Gets the tool_name of this Entity_.  # noqa: E501


        :return: The tool_name of this Entity_.  # noqa: E501
        :rtype: str
        """
        return self._tool_name

    @tool_name.setter
    def tool_name(self, tool_name):
        """Sets the tool_name of this Entity_.


        :param tool_name: The tool_name of this Entity_.  # noqa: E501
        :type: str
        """
        if tool_name is None:
            raise ValueError("Invalid value for `tool_name`, must not be `None`")  # noqa: E501
        if tool_name is not None and len(tool_name) > 10:
            raise ValueError("Invalid value for `tool_name`, length must be less than or equal to `10`")  # noqa: E501
        if tool_name is not None and len(tool_name) < 1:
            raise ValueError("Invalid value for `tool_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._tool_name = tool_name

    @property
    def tool_id(self):
        """Gets the tool_id of this Entity_.  # noqa: E501


        :return: The tool_id of this Entity_.  # noqa: E501
        :rtype: str
        """
        return self._tool_id

    @tool_id.setter
    def tool_id(self, tool_id):
        """Sets the tool_id of this Entity_.


        :param tool_id: The tool_id of this Entity_.  # noqa: E501
        :type: str
        """
        if tool_id is None:
            raise ValueError("Invalid value for `tool_id`, must not be `None`")  # noqa: E501
        if tool_id is not None and len(tool_id) > 10:
            raise ValueError("Invalid value for `tool_id`, length must be less than or equal to `10`")  # noqa: E501
        if tool_id is not None and len(tool_id) < 1:
            raise ValueError("Invalid value for `tool_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._tool_id = tool_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Entity_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Entity_):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
