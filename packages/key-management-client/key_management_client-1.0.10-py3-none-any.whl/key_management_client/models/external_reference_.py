# coding: utf-8

"""
    Key Manager API

    API Responsible for management the tools' keys   # noqa: E501

    OpenAPI spec version: v1
    Contact: paulossjunior@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExternalReference_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'id': 'str',
        'external_id': 'str',
        'external_url': 'str',
        'entity': 'str',
        'tool': 'str'
    }

    attribute_map = {
        'url': 'url',
        'id': 'id',
        'external_id': 'external_id',
        'external_url': 'external_url',
        'entity': 'entity',
        'tool': 'tool'
    }

    def __init__(self, url=None, id=None, external_id=None, external_url=None, entity=None, tool=None):  # noqa: E501
        """ExternalReference_ - a model defined in Swagger"""  # noqa: E501

        self._url = None
        self._id = None
        self._external_id = None
        self._external_url = None
        self._entity = None
        self._tool = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if id is not None:
            self.id = id
        self.external_id = external_id
        self.external_url = external_url
        self.entity = entity
        self.tool = tool

    @property
    def url(self):
        """Gets the url of this ExternalReference_.  # noqa: E501


        :return: The url of this ExternalReference_.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ExternalReference_.


        :param url: The url of this ExternalReference_.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def id(self):
        """Gets the id of this ExternalReference_.  # noqa: E501


        :return: The id of this ExternalReference_.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExternalReference_.


        :param id: The id of this ExternalReference_.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def external_id(self):
        """Gets the external_id of this ExternalReference_.  # noqa: E501


        :return: The external_id of this ExternalReference_.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this ExternalReference_.


        :param external_id: The external_id of this ExternalReference_.  # noqa: E501
        :type: str
        """
        if external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")  # noqa: E501

        self._external_id = external_id

    @property
    def external_url(self):
        """Gets the external_url of this ExternalReference_.  # noqa: E501


        :return: The external_url of this ExternalReference_.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this ExternalReference_.


        :param external_url: The external_url of this ExternalReference_.  # noqa: E501
        :type: str
        """
        if external_url is None:
            raise ValueError("Invalid value for `external_url`, must not be `None`")  # noqa: E501
        if external_url is not None and len(external_url) > 200:
            raise ValueError("Invalid value for `external_url`, length must be less than or equal to `200`")  # noqa: E501
        if external_url is not None and len(external_url) < 1:
            raise ValueError("Invalid value for `external_url`, length must be greater than or equal to `1`")  # noqa: E501

        self._external_url = external_url

    @property
    def entity(self):
        """Gets the entity of this ExternalReference_.  # noqa: E501


        :return: The entity of this ExternalReference_.  # noqa: E501
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this ExternalReference_.


        :param entity: The entity of this ExternalReference_.  # noqa: E501
        :type: str
        """
        if entity is None:
            raise ValueError("Invalid value for `entity`, must not be `None`")  # noqa: E501

        self._entity = entity

    @property
    def tool(self):
        """Gets the tool of this ExternalReference_.  # noqa: E501


        :return: The tool of this ExternalReference_.  # noqa: E501
        :rtype: str
        """
        return self._tool

    @tool.setter
    def tool(self, tool):
        """Sets the tool of this ExternalReference_.


        :param tool: The tool of this ExternalReference_.  # noqa: E501
        :type: str
        """
        if tool is None:
            raise ValueError("Invalid value for `tool`, must not be `None`")  # noqa: E501

        self._tool = tool

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalReference_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalReference_):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
