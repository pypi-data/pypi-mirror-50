# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _toolkit
else:
    import _toolkit

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


EN_MAXID = _toolkit.EN_MAXID
EN_MAXMSG = _toolkit.EN_MAXMSG
EN_ELEVATION = _toolkit.EN_ELEVATION
EN_BASEDEMAND = _toolkit.EN_BASEDEMAND
EN_PATTERN = _toolkit.EN_PATTERN
EN_EMITTER = _toolkit.EN_EMITTER
EN_INITQUAL = _toolkit.EN_INITQUAL
EN_SOURCEQUAL = _toolkit.EN_SOURCEQUAL
EN_SOURCEPAT = _toolkit.EN_SOURCEPAT
EN_SOURCETYPE = _toolkit.EN_SOURCETYPE
EN_TANKLEVEL = _toolkit.EN_TANKLEVEL
EN_DEMAND = _toolkit.EN_DEMAND
EN_HEAD = _toolkit.EN_HEAD
EN_PRESSURE = _toolkit.EN_PRESSURE
EN_QUALITY = _toolkit.EN_QUALITY
EN_SOURCEMASS = _toolkit.EN_SOURCEMASS
EN_INITVOLUME = _toolkit.EN_INITVOLUME
EN_MIXMODEL = _toolkit.EN_MIXMODEL
EN_MIXZONEVOL = _toolkit.EN_MIXZONEVOL
EN_TANKDIAM = _toolkit.EN_TANKDIAM
EN_MINVOLUME = _toolkit.EN_MINVOLUME
EN_VOLCURVE = _toolkit.EN_VOLCURVE
EN_MINLEVEL = _toolkit.EN_MINLEVEL
EN_MAXLEVEL = _toolkit.EN_MAXLEVEL
EN_MIXFRACTION = _toolkit.EN_MIXFRACTION
EN_TANK_KBULK = _toolkit.EN_TANK_KBULK
EN_TANKVOLUME = _toolkit.EN_TANKVOLUME
EN_MAXVOLUME = _toolkit.EN_MAXVOLUME
EN_CANOVERFLOW = _toolkit.EN_CANOVERFLOW
EN_DIAMETER = _toolkit.EN_DIAMETER
EN_LENGTH = _toolkit.EN_LENGTH
EN_ROUGHNESS = _toolkit.EN_ROUGHNESS
EN_MINORLOSS = _toolkit.EN_MINORLOSS
EN_INITSTATUS = _toolkit.EN_INITSTATUS
EN_INITSETTING = _toolkit.EN_INITSETTING
EN_KBULK = _toolkit.EN_KBULK
EN_KWALL = _toolkit.EN_KWALL
EN_FLOW = _toolkit.EN_FLOW
EN_VELOCITY = _toolkit.EN_VELOCITY
EN_HEADLOSS = _toolkit.EN_HEADLOSS
EN_STATUS = _toolkit.EN_STATUS
EN_SETTING = _toolkit.EN_SETTING
EN_ENERGY = _toolkit.EN_ENERGY
EN_LINKQUAL = _toolkit.EN_LINKQUAL
EN_LINKPATTERN = _toolkit.EN_LINKPATTERN
EN_PUMP_STATE = _toolkit.EN_PUMP_STATE
EN_PUMP_EFFIC = _toolkit.EN_PUMP_EFFIC
EN_PUMP_POWER = _toolkit.EN_PUMP_POWER
EN_PUMP_HCURVE = _toolkit.EN_PUMP_HCURVE
EN_PUMP_ECURVE = _toolkit.EN_PUMP_ECURVE
EN_PUMP_ECOST = _toolkit.EN_PUMP_ECOST
EN_PUMP_EPAT = _toolkit.EN_PUMP_EPAT
EN_DURATION = _toolkit.EN_DURATION
EN_HYDSTEP = _toolkit.EN_HYDSTEP
EN_QUALSTEP = _toolkit.EN_QUALSTEP
EN_PATTERNSTEP = _toolkit.EN_PATTERNSTEP
EN_PATTERNSTART = _toolkit.EN_PATTERNSTART
EN_REPORTSTEP = _toolkit.EN_REPORTSTEP
EN_REPORTSTART = _toolkit.EN_REPORTSTART
EN_RULESTEP = _toolkit.EN_RULESTEP
EN_STATISTIC = _toolkit.EN_STATISTIC
EN_PERIODS = _toolkit.EN_PERIODS
EN_STARTTIME = _toolkit.EN_STARTTIME
EN_HTIME = _toolkit.EN_HTIME
EN_QTIME = _toolkit.EN_QTIME
EN_HALTFLAG = _toolkit.EN_HALTFLAG
EN_NEXTEVENT = _toolkit.EN_NEXTEVENT
EN_NEXTEVENTTANK = _toolkit.EN_NEXTEVENTTANK
EN_ITERATIONS = _toolkit.EN_ITERATIONS
EN_RELATIVEERROR = _toolkit.EN_RELATIVEERROR
EN_MAXHEADERROR = _toolkit.EN_MAXHEADERROR
EN_MAXFLOWCHANGE = _toolkit.EN_MAXFLOWCHANGE
EN_MASSBALANCE = _toolkit.EN_MASSBALANCE
EN_NODE = _toolkit.EN_NODE
EN_LINK = _toolkit.EN_LINK
EN_TIMEPAT = _toolkit.EN_TIMEPAT
EN_CURVE = _toolkit.EN_CURVE
EN_CONTROL = _toolkit.EN_CONTROL
EN_RULE = _toolkit.EN_RULE
EN_NODECOUNT = _toolkit.EN_NODECOUNT
EN_TANKCOUNT = _toolkit.EN_TANKCOUNT
EN_LINKCOUNT = _toolkit.EN_LINKCOUNT
EN_PATCOUNT = _toolkit.EN_PATCOUNT
EN_CURVECOUNT = _toolkit.EN_CURVECOUNT
EN_CONTROLCOUNT = _toolkit.EN_CONTROLCOUNT
EN_RULECOUNT = _toolkit.EN_RULECOUNT
EN_JUNCTION = _toolkit.EN_JUNCTION
EN_RESERVOIR = _toolkit.EN_RESERVOIR
EN_TANK = _toolkit.EN_TANK
EN_CVPIPE = _toolkit.EN_CVPIPE
EN_PIPE = _toolkit.EN_PIPE
EN_PUMP = _toolkit.EN_PUMP
EN_PRV = _toolkit.EN_PRV
EN_PSV = _toolkit.EN_PSV
EN_PBV = _toolkit.EN_PBV
EN_FCV = _toolkit.EN_FCV
EN_TCV = _toolkit.EN_TCV
EN_GPV = _toolkit.EN_GPV
EN_CLOSED = _toolkit.EN_CLOSED
EN_OPEN = _toolkit.EN_OPEN
EN_PUMP_XHEAD = _toolkit.EN_PUMP_XHEAD
EN_PUMP_CLOSED = _toolkit.EN_PUMP_CLOSED
EN_PUMP_OPEN = _toolkit.EN_PUMP_OPEN
EN_PUMP_XFLOW = _toolkit.EN_PUMP_XFLOW
EN_NONE = _toolkit.EN_NONE
EN_CHEM = _toolkit.EN_CHEM
EN_AGE = _toolkit.EN_AGE
EN_TRACE = _toolkit.EN_TRACE
EN_CONCEN = _toolkit.EN_CONCEN
EN_MASS = _toolkit.EN_MASS
EN_SETPOINT = _toolkit.EN_SETPOINT
EN_FLOWPACED = _toolkit.EN_FLOWPACED
EN_HW = _toolkit.EN_HW
EN_DW = _toolkit.EN_DW
EN_CM = _toolkit.EN_CM
EN_CFS = _toolkit.EN_CFS
EN_GPM = _toolkit.EN_GPM
EN_MGD = _toolkit.EN_MGD
EN_IMGD = _toolkit.EN_IMGD
EN_AFD = _toolkit.EN_AFD
EN_LPS = _toolkit.EN_LPS
EN_LPM = _toolkit.EN_LPM
EN_MLD = _toolkit.EN_MLD
EN_CMH = _toolkit.EN_CMH
EN_CMD = _toolkit.EN_CMD
EN_DDA = _toolkit.EN_DDA
EN_PDA = _toolkit.EN_PDA
EN_TRIALS = _toolkit.EN_TRIALS
EN_ACCURACY = _toolkit.EN_ACCURACY
EN_TOLERANCE = _toolkit.EN_TOLERANCE
EN_EMITEXPON = _toolkit.EN_EMITEXPON
EN_DEMANDMULT = _toolkit.EN_DEMANDMULT
EN_HEADERROR = _toolkit.EN_HEADERROR
EN_FLOWCHANGE = _toolkit.EN_FLOWCHANGE
EN_HEADLOSSFORM = _toolkit.EN_HEADLOSSFORM
EN_GLOBALEFFIC = _toolkit.EN_GLOBALEFFIC
EN_GLOBALPRICE = _toolkit.EN_GLOBALPRICE
EN_GLOBALPATTERN = _toolkit.EN_GLOBALPATTERN
EN_DEMANDCHARGE = _toolkit.EN_DEMANDCHARGE
EN_SP_GRAVITY = _toolkit.EN_SP_GRAVITY
EN_SP_VISCOS = _toolkit.EN_SP_VISCOS
EN_UNBALANCED = _toolkit.EN_UNBALANCED
EN_CHECKFREQ = _toolkit.EN_CHECKFREQ
EN_MAXCHECK = _toolkit.EN_MAXCHECK
EN_DAMPLIMIT = _toolkit.EN_DAMPLIMIT
EN_SP_DIFFUS = _toolkit.EN_SP_DIFFUS
EN_BULKORDER = _toolkit.EN_BULKORDER
EN_WALLORDER = _toolkit.EN_WALLORDER
EN_TANKORDER = _toolkit.EN_TANKORDER
EN_CONCENLIMIT = _toolkit.EN_CONCENLIMIT
EN_LOWLEVEL = _toolkit.EN_LOWLEVEL
EN_HILEVEL = _toolkit.EN_HILEVEL
EN_TIMER = _toolkit.EN_TIMER
EN_TIMEOFDAY = _toolkit.EN_TIMEOFDAY
EN_SERIES = _toolkit.EN_SERIES
EN_AVERAGE = _toolkit.EN_AVERAGE
EN_MINIMUM = _toolkit.EN_MINIMUM
EN_MAXIMUM = _toolkit.EN_MAXIMUM
EN_RANGE = _toolkit.EN_RANGE
EN_MIX1 = _toolkit.EN_MIX1
EN_MIX2 = _toolkit.EN_MIX2
EN_FIFO = _toolkit.EN_FIFO
EN_LIFO = _toolkit.EN_LIFO
EN_NOSAVE = _toolkit.EN_NOSAVE
EN_SAVE = _toolkit.EN_SAVE
EN_INITFLOW = _toolkit.EN_INITFLOW
EN_SAVE_AND_INIT = _toolkit.EN_SAVE_AND_INIT
EN_CONST_HP = _toolkit.EN_CONST_HP
EN_POWER_FUNC = _toolkit.EN_POWER_FUNC
EN_CUSTOM = _toolkit.EN_CUSTOM
EN_NOCURVE = _toolkit.EN_NOCURVE
EN_VOLUME_CURVE = _toolkit.EN_VOLUME_CURVE
EN_PUMP_CURVE = _toolkit.EN_PUMP_CURVE
EN_EFFIC_CURVE = _toolkit.EN_EFFIC_CURVE
EN_HLOSS_CURVE = _toolkit.EN_HLOSS_CURVE
EN_GENERIC_CURVE = _toolkit.EN_GENERIC_CURVE
EN_UNCONDITIONAL = _toolkit.EN_UNCONDITIONAL
EN_CONDITIONAL = _toolkit.EN_CONDITIONAL
EN_NO_REPORT = _toolkit.EN_NO_REPORT
EN_NORMAL_REPORT = _toolkit.EN_NORMAL_REPORT
EN_FULL_REPORT = _toolkit.EN_FULL_REPORT
EN_R_NODE = _toolkit.EN_R_NODE
EN_R_LINK = _toolkit.EN_R_LINK
EN_R_SYSTEM = _toolkit.EN_R_SYSTEM
EN_R_DEMAND = _toolkit.EN_R_DEMAND
EN_R_HEAD = _toolkit.EN_R_HEAD
EN_R_GRADE = _toolkit.EN_R_GRADE
EN_R_LEVEL = _toolkit.EN_R_LEVEL
EN_R_PRESSURE = _toolkit.EN_R_PRESSURE
EN_R_FLOW = _toolkit.EN_R_FLOW
EN_R_STATUS = _toolkit.EN_R_STATUS
EN_R_SETTING = _toolkit.EN_R_SETTING
EN_R_POWER = _toolkit.EN_R_POWER
EN_R_TIME = _toolkit.EN_R_TIME
EN_R_CLOCKTIME = _toolkit.EN_R_CLOCKTIME
EN_R_FILLTIME = _toolkit.EN_R_FILLTIME
EN_R_DRAINTIME = _toolkit.EN_R_DRAINTIME
EN_R_EQ = _toolkit.EN_R_EQ
EN_R_NE = _toolkit.EN_R_NE
EN_R_LE = _toolkit.EN_R_LE
EN_R_GE = _toolkit.EN_R_GE
EN_R_LT = _toolkit.EN_R_LT
EN_R_GT = _toolkit.EN_R_GT
EN_R_IS = _toolkit.EN_R_IS
EN_R_NOT = _toolkit.EN_R_NOT
EN_R_BELOW = _toolkit.EN_R_BELOW
EN_R_ABOVE = _toolkit.EN_R_ABOVE
EN_R_IS_OPEN = _toolkit.EN_R_IS_OPEN
EN_R_IS_CLOSED = _toolkit.EN_R_IS_CLOSED
EN_R_IS_ACTIVE = _toolkit.EN_R_IS_ACTIVE
class Project(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _toolkit.delete_Project

# Register Project in _toolkit:
_toolkit.Project_swigregister(Project)


def createproject():
    r"""createproject() -> int"""
    return _toolkit.createproject()

def deleteproject(ph):
    r"""
    deleteproject(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.deleteproject(ph)

def runproject(ph, inpFile, rptFile, outputFile, pviewprog):
    r"""
    runproject(ph, inpFile, rptFile, outputFile, pviewprog) -> int

    Parameters
    ----------
    ph: EN_Project
    inpFile: char const *
    rptFile: char const *
    outputFile: char const *
    pviewprog: void (*)(char *)

    """
    return _toolkit.runproject(ph, inpFile, rptFile, outputFile, pviewprog)

def init(ph, rptFile, outFile, unitsType, headLossType):
    r"""
    init(ph, rptFile, outFile, unitsType, headLossType) -> int

    Parameters
    ----------
    ph: EN_Project
    rptFile: char const *
    outFile: char const *
    unitsType: int
    headLossType: int

    """
    return _toolkit.init(ph, rptFile, outFile, unitsType, headLossType)

def open(ph, inpFile, rptFile, outFile):
    r"""
    open(ph, inpFile, rptFile, outFile) -> int

    Parameters
    ----------
    ph: EN_Project
    inpFile: char const *
    rptFile: char const *
    outFile: char const *

    """
    return _toolkit.open(ph, inpFile, rptFile, outFile)

def gettitle(ph):
    r"""
    gettitle(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.gettitle(ph)

def settitle(ph, line1, line2, line3):
    r"""
    settitle(ph, line1, line2, line3) -> int

    Parameters
    ----------
    ph: EN_Project
    line1: char *
    line2: char *
    line3: char *

    """
    return _toolkit.settitle(ph, line1, line2, line3)

def getcomment(ph, object, index):
    r"""
    getcomment(ph, object, index) -> int

    Parameters
    ----------
    ph: EN_Project
    object: int
    index: int

    """
    return _toolkit.getcomment(ph, object, index)

def setcomment(ph, object, index, comment):
    r"""
    setcomment(ph, object, index, comment) -> int

    Parameters
    ----------
    ph: EN_Project
    object: int
    index: int
    comment: char *

    """
    return _toolkit.setcomment(ph, object, index, comment)

def getcount(ph, object):
    r"""
    getcount(ph, object) -> int

    Parameters
    ----------
    ph: EN_Project
    object: int

    """
    return _toolkit.getcount(ph, object)

def saveinpfile(ph, filename):
    r"""
    saveinpfile(ph, filename) -> int

    Parameters
    ----------
    ph: EN_Project
    filename: char const *

    """
    return _toolkit.saveinpfile(ph, filename)

def close(ph):
    r"""
    close(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.close(ph)

def solveH(ph):
    r"""
    solveH(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.solveH(ph)

def usehydfile(ph, filename):
    r"""
    usehydfile(ph, filename) -> int

    Parameters
    ----------
    ph: EN_Project
    filename: char const *

    """
    return _toolkit.usehydfile(ph, filename)

def openH(ph):
    r"""
    openH(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.openH(ph)

def initH(ph, initFlag):
    r"""
    initH(ph, initFlag) -> int

    Parameters
    ----------
    ph: EN_Project
    initFlag: int

    """
    return _toolkit.initH(ph, initFlag)

def runH(ph):
    r"""
    runH(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.runH(ph)

def nextH(ph):
    r"""
    nextH(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.nextH(ph)

def saveH(ph):
    r"""
    saveH(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.saveH(ph)

def savehydfile(ph, filename):
    r"""
    savehydfile(ph, filename) -> int

    Parameters
    ----------
    ph: EN_Project
    filename: char const *

    """
    return _toolkit.savehydfile(ph, filename)

def closeH(ph):
    r"""
    closeH(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.closeH(ph)

def solveQ(ph):
    r"""
    solveQ(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.solveQ(ph)

def openQ(ph):
    r"""
    openQ(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.openQ(ph)

def initQ(ph, saveFlag):
    r"""
    initQ(ph, saveFlag) -> int

    Parameters
    ----------
    ph: EN_Project
    saveFlag: int

    """
    return _toolkit.initQ(ph, saveFlag)

def runQ(ph):
    r"""
    runQ(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.runQ(ph)

def nextQ(ph):
    r"""
    nextQ(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.nextQ(ph)

def stepQ(ph):
    r"""
    stepQ(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.stepQ(ph)

def closeQ(ph):
    r"""
    closeQ(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.closeQ(ph)

def writeline(ph, line):
    r"""
    writeline(ph, line) -> int

    Parameters
    ----------
    ph: EN_Project
    line: char *

    """
    return _toolkit.writeline(ph, line)

def report(ph):
    r"""
    report(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.report(ph)

def copyreport(ph, filename):
    r"""
    copyreport(ph, filename) -> int

    Parameters
    ----------
    ph: EN_Project
    filename: char *

    """
    return _toolkit.copyreport(ph, filename)

def clearreport(ph):
    r"""
    clearreport(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.clearreport(ph)

def resetreport(ph):
    r"""
    resetreport(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.resetreport(ph)

def setreport(ph, format):
    r"""
    setreport(ph, format) -> int

    Parameters
    ----------
    ph: EN_Project
    format: char *

    """
    return _toolkit.setreport(ph, format)

def setstatusreport(ph, level):
    r"""
    setstatusreport(ph, level) -> int

    Parameters
    ----------
    ph: EN_Project
    level: int

    """
    return _toolkit.setstatusreport(ph, level)

def getversion():
    r"""getversion() -> int"""
    return _toolkit.getversion()

def geterror(errcode, maxLen):
    r"""
    geterror(errcode, maxLen) -> int

    Parameters
    ----------
    errcode: int
    maxLen: int

    """
    return _toolkit.geterror(errcode, maxLen)

def getstatistic(ph, type):
    r"""
    getstatistic(ph, type) -> int

    Parameters
    ----------
    ph: EN_Project
    type: int

    """
    return _toolkit.getstatistic(ph, type)

def getoption(ph, option):
    r"""
    getoption(ph, option) -> int

    Parameters
    ----------
    ph: EN_Project
    option: int

    """
    return _toolkit.getoption(ph, option)

def setoption(ph, option, value):
    r"""
    setoption(ph, option, value) -> int

    Parameters
    ----------
    ph: EN_Project
    option: int
    value: double

    """
    return _toolkit.setoption(ph, option, value)

def getflowunits(ph):
    r"""
    getflowunits(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.getflowunits(ph)

def setflowunits(ph, units):
    r"""
    setflowunits(ph, units) -> int

    Parameters
    ----------
    ph: EN_Project
    units: int

    """
    return _toolkit.setflowunits(ph, units)

def gettimeparam(ph, param):
    r"""
    gettimeparam(ph, param) -> int

    Parameters
    ----------
    ph: EN_Project
    param: int

    """
    return _toolkit.gettimeparam(ph, param)

def settimeparam(ph, param, value):
    r"""
    settimeparam(ph, param, value) -> int

    Parameters
    ----------
    ph: EN_Project
    param: int
    value: long

    """
    return _toolkit.settimeparam(ph, param, value)

def getqualinfo(ph):
    r"""
    getqualinfo(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.getqualinfo(ph)

def getqualtype(ph):
    r"""
    getqualtype(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.getqualtype(ph)

def setqualtype(ph, qualType, chemName, chemUnits, traceNode):
    r"""
    setqualtype(ph, qualType, chemName, chemUnits, traceNode) -> int

    Parameters
    ----------
    ph: EN_Project
    qualType: int
    chemName: char *
    chemUnits: char *
    traceNode: char *

    """
    return _toolkit.setqualtype(ph, qualType, chemName, chemUnits, traceNode)

def addnode(ph, id, nodeType):
    r"""
    addnode(ph, id, nodeType) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *
    nodeType: int

    """
    return _toolkit.addnode(ph, id, nodeType)

def deletenode(ph, index, actionCode):
    r"""
    deletenode(ph, index, actionCode) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    actionCode: int

    """
    return _toolkit.deletenode(ph, index, actionCode)

def getnodeindex(ph, id):
    r"""
    getnodeindex(ph, id) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *

    """
    return _toolkit.getnodeindex(ph, id)

def getnodeid(ph, index):
    r"""
    getnodeid(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getnodeid(ph, index)

def setnodeid(ph, index, newid):
    r"""
    setnodeid(ph, index, newid) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    newid: char *

    """
    return _toolkit.setnodeid(ph, index, newid)

def getnodetype(ph, index):
    r"""
    getnodetype(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getnodetype(ph, index)

def getnodevalue(ph, index, property):
    r"""
    getnodevalue(ph, index, property) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    property: int

    """
    return _toolkit.getnodevalue(ph, index, property)

def setnodevalue(ph, index, property, value):
    r"""
    setnodevalue(ph, index, property, value) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    property: int
    value: double

    """
    return _toolkit.setnodevalue(ph, index, property, value)

def setjuncdata(ph, index, elev, dmnd, dmndpat):
    r"""
    setjuncdata(ph, index, elev, dmnd, dmndpat) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    elev: double
    dmnd: double
    dmndpat: char *

    """
    return _toolkit.setjuncdata(ph, index, elev, dmnd, dmndpat)

def settankdata(ph, index, elev, initlvl, minlvl, maxlvl, diam, minvol, volcurve):
    r"""
    settankdata(ph, index, elev, initlvl, minlvl, maxlvl, diam, minvol, volcurve) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    elev: double
    initlvl: double
    minlvl: double
    maxlvl: double
    diam: double
    minvol: double
    volcurve: char *

    """
    return _toolkit.settankdata(ph, index, elev, initlvl, minlvl, maxlvl, diam, minvol, volcurve)

def getcoord(ph, index):
    r"""
    getcoord(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getcoord(ph, index)

def setcoord(ph, index, x, y):
    r"""
    setcoord(ph, index, x, y) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    x: double
    y: double

    """
    return _toolkit.setcoord(ph, index, x, y)

def getdemandmodel(ph):
    r"""
    getdemandmodel(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.getdemandmodel(ph)

def setdemandmodel(ph, type, pmin, preq, pexp):
    r"""
    setdemandmodel(ph, type, pmin, preq, pexp) -> int

    Parameters
    ----------
    ph: EN_Project
    type: int
    pmin: double
    preq: double
    pexp: double

    """
    return _toolkit.setdemandmodel(ph, type, pmin, preq, pexp)

def adddemand(ph, nodeIndex, baseDemand, demandPattern, demandName):
    r"""
    adddemand(ph, nodeIndex, baseDemand, demandPattern, demandName) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    baseDemand: double
    demandPattern: char *
    demandName: char *

    """
    return _toolkit.adddemand(ph, nodeIndex, baseDemand, demandPattern, demandName)

def deletedemand(ph, nodeIndex, demandIndex):
    r"""
    deletedemand(ph, nodeIndex, demandIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandIndex: int

    """
    return _toolkit.deletedemand(ph, nodeIndex, demandIndex)

def getdemandindex(ph, nodeIndex, demandName):
    r"""
    getdemandindex(ph, nodeIndex, demandName) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandName: char *

    """
    return _toolkit.getdemandindex(ph, nodeIndex, demandName)

def getnumdemands(ph, nodeIndex):
    r"""
    getnumdemands(ph, nodeIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int

    """
    return _toolkit.getnumdemands(ph, nodeIndex)

def getbasedemand(ph, nodeIndex, demandIndex):
    r"""
    getbasedemand(ph, nodeIndex, demandIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandIndex: int

    """
    return _toolkit.getbasedemand(ph, nodeIndex, demandIndex)

def setbasedemand(ph, nodeIndex, demandIndex, baseDemand):
    r"""
    setbasedemand(ph, nodeIndex, demandIndex, baseDemand) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandIndex: int
    baseDemand: double

    """
    return _toolkit.setbasedemand(ph, nodeIndex, demandIndex, baseDemand)

def getdemandpattern(ph, nodeIndex, demandIndex):
    r"""
    getdemandpattern(ph, nodeIndex, demandIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandIndex: int

    """
    return _toolkit.getdemandpattern(ph, nodeIndex, demandIndex)

def setdemandpattern(ph, nodeIndex, demandIndex, patIndex):
    r"""
    setdemandpattern(ph, nodeIndex, demandIndex, patIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandIndex: int
    patIndex: int

    """
    return _toolkit.setdemandpattern(ph, nodeIndex, demandIndex, patIndex)

def getdemandname(ph, nodeIndex, demandIndex):
    r"""
    getdemandname(ph, nodeIndex, demandIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandIndex: int

    """
    return _toolkit.getdemandname(ph, nodeIndex, demandIndex)

def setdemandname(ph, nodeIndex, demandIdx, demandName):
    r"""
    setdemandname(ph, nodeIndex, demandIdx, demandName) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandIdx: int
    demandName: char *

    """
    return _toolkit.setdemandname(ph, nodeIndex, demandIdx, demandName)

def addlink(ph, id, linkType, fromNode, toNode):
    r"""
    addlink(ph, id, linkType, fromNode, toNode) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *
    linkType: int
    fromNode: char *
    toNode: char *

    """
    return _toolkit.addlink(ph, id, linkType, fromNode, toNode)

def deletelink(ph, index, actionCode):
    r"""
    deletelink(ph, index, actionCode) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    actionCode: int

    """
    return _toolkit.deletelink(ph, index, actionCode)

def getlinkindex(ph, id):
    r"""
    getlinkindex(ph, id) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *

    """
    return _toolkit.getlinkindex(ph, id)

def getlinkid(ph, index):
    r"""
    getlinkid(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getlinkid(ph, index)

def setlinkid(ph, index, newid):
    r"""
    setlinkid(ph, index, newid) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    newid: char *

    """
    return _toolkit.setlinkid(ph, index, newid)

def getlinktype(ph, index):
    r"""
    getlinktype(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getlinktype(ph, index)

def setlinktype(ph, inout_index, linkType, actionCode):
    r"""
    setlinktype(ph, inout_index, linkType, actionCode) -> int

    Parameters
    ----------
    ph: EN_Project
    inout_index: int *
    linkType: int
    actionCode: int

    """
    return _toolkit.setlinktype(ph, inout_index, linkType, actionCode)

def getlinknodes(ph, index):
    r"""
    getlinknodes(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getlinknodes(ph, index)

def setlinknodes(ph, index, node1, node2):
    r"""
    setlinknodes(ph, index, node1, node2) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    node1: int
    node2: int

    """
    return _toolkit.setlinknodes(ph, index, node1, node2)

def getlinkvalue(ph, index, property):
    r"""
    getlinkvalue(ph, index, property) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    property: int

    """
    return _toolkit.getlinkvalue(ph, index, property)

def setlinkvalue(ph, index, property, value):
    r"""
    setlinkvalue(ph, index, property, value) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    property: int
    value: double

    """
    return _toolkit.setlinkvalue(ph, index, property, value)

def setpipedata(ph, index, length, diam, rough, mloss):
    r"""
    setpipedata(ph, index, length, diam, rough, mloss) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    length: double
    diam: double
    rough: double
    mloss: double

    """
    return _toolkit.setpipedata(ph, index, length, diam, rough, mloss)

def getpumptype(ph, linkIndex):
    r"""
    getpumptype(ph, linkIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    linkIndex: int

    """
    return _toolkit.getpumptype(ph, linkIndex)

def getheadcurveindex(ph, linkIndex):
    r"""
    getheadcurveindex(ph, linkIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    linkIndex: int

    """
    return _toolkit.getheadcurveindex(ph, linkIndex)

def setheadcurveindex(ph, linkIndex, curveIndex):
    r"""
    setheadcurveindex(ph, linkIndex, curveIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    linkIndex: int
    curveIndex: int

    """
    return _toolkit.setheadcurveindex(ph, linkIndex, curveIndex)

def addpattern(ph, id):
    r"""
    addpattern(ph, id) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *

    """
    return _toolkit.addpattern(ph, id)

def deletepattern(ph, index):
    r"""
    deletepattern(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.deletepattern(ph, index)

def getpatternindex(ph, id):
    r"""
    getpatternindex(ph, id) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *

    """
    return _toolkit.getpatternindex(ph, id)

def getpatternid(ph, index):
    r"""
    getpatternid(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getpatternid(ph, index)

def setpatternid(ph, index, id):
    r"""
    setpatternid(ph, index, id) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    id: char *

    """
    return _toolkit.setpatternid(ph, index, id)

def getpatternlen(ph, index):
    r"""
    getpatternlen(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getpatternlen(ph, index)

def getpatternvalue(ph, index, period):
    r"""
    getpatternvalue(ph, index, period) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    period: int

    """
    return _toolkit.getpatternvalue(ph, index, period)

def setpatternvalue(ph, index, period, value):
    r"""
    setpatternvalue(ph, index, period, value) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    period: int
    value: double

    """
    return _toolkit.setpatternvalue(ph, index, period, value)

def getaveragepatternvalue(ph, index):
    r"""
    getaveragepatternvalue(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getaveragepatternvalue(ph, index)

def setpattern(ph, index, values, len):
    r"""
    setpattern(ph, index, values, len) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    values: double *
    len: int

    """
    return _toolkit.setpattern(ph, index, values, len)

def addcurve(ph, id):
    r"""
    addcurve(ph, id) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *

    """
    return _toolkit.addcurve(ph, id)

def deletecurve(ph, index):
    r"""
    deletecurve(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.deletecurve(ph, index)

def getcurveindex(ph, id):
    r"""
    getcurveindex(ph, id) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *

    """
    return _toolkit.getcurveindex(ph, id)

def getcurveid(ph, index):
    r"""
    getcurveid(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getcurveid(ph, index)

def setcurveid(ph, index, id):
    r"""
    setcurveid(ph, index, id) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    id: char *

    """
    return _toolkit.setcurveid(ph, index, id)

def getcurvelen(ph, index):
    r"""
    getcurvelen(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getcurvelen(ph, index)

def getcurvetype(ph, index):
    r"""
    getcurvetype(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getcurvetype(ph, index)

def getcurvevalue(ph, curveIndex, pointIndex):
    r"""
    getcurvevalue(ph, curveIndex, pointIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    curveIndex: int
    pointIndex: int

    """
    return _toolkit.getcurvevalue(ph, curveIndex, pointIndex)

def setcurvevalue(ph, curveIndex, pointIndex, x, y):
    r"""
    setcurvevalue(ph, curveIndex, pointIndex, x, y) -> int

    Parameters
    ----------
    ph: EN_Project
    curveIndex: int
    pointIndex: int
    x: double
    y: double

    """
    return _toolkit.setcurvevalue(ph, curveIndex, pointIndex, x, y)

def getcurve(ph, index, xValues, yValues):
    r"""
    getcurve(ph, index, xValues, yValues) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    xValues: double *
    yValues: double *

    """
    return _toolkit.getcurve(ph, index, xValues, yValues)

def setcurve(ph, index, xValues, yValues, nPoints):
    r"""
    setcurve(ph, index, xValues, yValues, nPoints) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    xValues: double *
    yValues: double *
    nPoints: int

    """
    return _toolkit.setcurve(ph, index, xValues, yValues, nPoints)

def addcontrol(ph, type, linkIndex, setting, nodeIndex, level):
    r"""
    addcontrol(ph, type, linkIndex, setting, nodeIndex, level) -> int

    Parameters
    ----------
    ph: EN_Project
    type: int
    linkIndex: int
    setting: double
    nodeIndex: int
    level: double

    """
    return _toolkit.addcontrol(ph, type, linkIndex, setting, nodeIndex, level)

def deletecontrol(ph, index):
    r"""
    deletecontrol(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.deletecontrol(ph, index)

def getcontrol(ph, index):
    r"""
    getcontrol(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getcontrol(ph, index)

def setcontrol(ph, index, type, linkIndex, setting, nodeIndex, level):
    r"""
    setcontrol(ph, index, type, linkIndex, setting, nodeIndex, level) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    type: int
    linkIndex: int
    setting: double
    nodeIndex: int
    level: double

    """
    return _toolkit.setcontrol(ph, index, type, linkIndex, setting, nodeIndex, level)

def addrule(ph, rule):
    r"""
    addrule(ph, rule) -> int

    Parameters
    ----------
    ph: EN_Project
    rule: char *

    """
    return _toolkit.addrule(ph, rule)

def deleterule(ph, index):
    r"""
    deleterule(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.deleterule(ph, index)

def getrule(ph, index):
    r"""
    getrule(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getrule(ph, index)

def getruleID(ph, index):
    r"""
    getruleID(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getruleID(ph, index)

def getpremise(ph, ruleIndex, premiseIndex):
    r"""
    getpremise(ph, ruleIndex, premiseIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    premiseIndex: int

    """
    return _toolkit.getpremise(ph, ruleIndex, premiseIndex)

def setpremise(ph, ruleIndex, premiseIndex, logop, object, objIndex, variable, relop, status, value):
    r"""
    setpremise(ph, ruleIndex, premiseIndex, logop, object, objIndex, variable, relop, status, value) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    premiseIndex: int
    logop: int
    object: int
    objIndex: int
    variable: int
    relop: int
    status: int
    value: double

    """
    return _toolkit.setpremise(ph, ruleIndex, premiseIndex, logop, object, objIndex, variable, relop, status, value)

def setpremiseindex(ph, ruleIndex, premiseIndex, objIndex):
    r"""
    setpremiseindex(ph, ruleIndex, premiseIndex, objIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    premiseIndex: int
    objIndex: int

    """
    return _toolkit.setpremiseindex(ph, ruleIndex, premiseIndex, objIndex)

def setpremisestatus(ph, ruleIndex, premiseIndex, status):
    r"""
    setpremisestatus(ph, ruleIndex, premiseIndex, status) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    premiseIndex: int
    status: int

    """
    return _toolkit.setpremisestatus(ph, ruleIndex, premiseIndex, status)

def setpremisevalue(ph, ruleIndex, premiseIndex, value):
    r"""
    setpremisevalue(ph, ruleIndex, premiseIndex, value) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    premiseIndex: int
    value: double

    """
    return _toolkit.setpremisevalue(ph, ruleIndex, premiseIndex, value)

def getthenaction(ph, ruleIndex, actionIndex):
    r"""
    getthenaction(ph, ruleIndex, actionIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    actionIndex: int

    """
    return _toolkit.getthenaction(ph, ruleIndex, actionIndex)

def setthenaction(ph, ruleIndex, actionIndex, linkIndex, status, setting):
    r"""
    setthenaction(ph, ruleIndex, actionIndex, linkIndex, status, setting) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    actionIndex: int
    linkIndex: int
    status: int
    setting: double

    """
    return _toolkit.setthenaction(ph, ruleIndex, actionIndex, linkIndex, status, setting)

def getelseaction(ph, ruleIndex, actionIndex):
    r"""
    getelseaction(ph, ruleIndex, actionIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    actionIndex: int

    """
    return _toolkit.getelseaction(ph, ruleIndex, actionIndex)

def setelseaction(ph, ruleIndex, actionIndex, linkIndex, status, setting):
    r"""
    setelseaction(ph, ruleIndex, actionIndex, linkIndex, status, setting) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    actionIndex: int
    linkIndex: int
    status: int
    setting: double

    """
    return _toolkit.setelseaction(ph, ruleIndex, actionIndex, linkIndex, status, setting)

def setrulepriority(ph, index, priority):
    r"""
    setrulepriority(ph, index, priority) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    priority: double

    """
    return _toolkit.setrulepriority(ph, index, priority)


