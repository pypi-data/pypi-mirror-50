### 
# **Description**: Vendor name.
#
# **Examples**:
#
# .. code-block:: none
#
#   Vendor: Shakti
#   Vendor: Incoresemi
#
# **Constraints**:
#   - None
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
Vendor: 
    type: string

### 
# **Description**: Device Name.
#
# **Examples**:
#
# .. code-block:: none
#
#   Device: E-Class
#   Device: C-Class
#
# **Constraints**:
#   - None
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
Device:
    type: string

###
# **Description**: Takes input a string representing the ISA supported by the implementation. All extension names
# (other than Zext) should be mentioned in upper-case. Z extensions should begin with an upper-case
# 'Z' followed by lower-case extension name (without Camel casing)
#
# **Examples**: 
#
# .. code-block:: none
#
#   ISA: RV32IMA 
#   ISA: RV64IMAFDCZifencei
#
# **Constraints**: 
#   - Certain extensions are only valid in certain user-spec version. For, eg. Zifencei is available only in user-spec 2.3 and above.
#   - The ISA string must be specified in the manner as specified in the specifications(like subsequent Z extensions must be separated with an '_')
# 
# `------------------------------------------------------------------------------------------------------------------------------`
#
ISA: 
    type: string
    regex: '^RV(32|64|128)[IE]+[ACDEFGIJLMNPQSTUVX]*(Zicsr|Zifencei|Zam|Ztso|){,1}(_Zifencei){,1}(_Zam){,1}(_Ztso){,1}$'
    required: True
    check_with: capture_isa_specifics

### 
# **Description**: Version number of User/Non-priveleged ISA specification as string. Please enclose the version in "" to avoid type mismatches.
#
# **Examples**:
#
# .. code-block:: none
#
#   User_Spec_Version: "2.2"
#   User_Spec_Version: "2.3"
#
# **Constraints**:
#   - should be a valid version later than 2.2
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
User_Spec_Version:
    type: string
    default: "2.2"
    required: True
    check_with: user_version_check

### 
# **Description**: Version number of Priveleged ISA specification as string. Please enclose the version in "" to avoid type mismatches.
#
# **Examples**:
#
# .. code-block:: none
#
#   Privilege_Spec_Version: "1.10"
#   Privilege_Spec_Version: "1.11"
#
# **Constraints**:
#   - should be a valid version later than 1.10 
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
Privilege_Spec_Version:
    type: string
    default: "1.10"
    required: True
    check_with: priv_version_check

###
# **Description**: A boolean value indicating whether hardware support for misaligned load/store requests exists.
# 
# **Examples**:
# 
# .. code-block:: none
# 
#    hw_data_misaligned_support: True
#    hw_data_misaligned_support: False
# 
# **Constraints**:
# - None
# 
# `------------------------------------------------------------------------------------------------------------------------------`
# 
hw_data_misaligned_support:
    type: boolean
    default: False

xlen:
    type: integer
    allowed: [32,64,128]
    readonly: True

### 
# **Description**: Describes the fields of the *misa* CSR. A user needs to provide the following
# fields:
#
#   - implemented: A boolean value indicating if the *misa* has been implemented or not.
#   - MXL: needs to be described as *range-warl-func*
#       - range:
#           - rangelist: a list of 2 or 1 element lists which specify the lower and upper bounds of the range of values MXL field can take.(Allowed [1,2,3])
#           - mode : a string describing one of the *range-update-warl-func*.
# 
#   - Extensions: is described as a *bitmask-warl-func* indicating the valid extensions.
#       - bitmask:
#           - mask  : a 26 bit wide value providing the *mask* field of the *bitmask-warl-func*.
#           - default : a 26 bit wide value providing the *default* field of the *bitmask-warl-func*.
# 
# **Examples**:
#
# .. code-block:: none
#
#     misa:
#      implemented: True
#      MXL:
#          range:
#              rangelist : [[1, 2]]
#              mode  : 'Unchanged'
#      Extensions:
#          bitmask:
#              mask:   0x12D
#              default:  0x000
# 
# **Constraints**: 
#   - The maximum value specified in MXL should not be greater than the XLEN/32 specified in the ISA field.
#   - All extensions defined in the ISA field, cannot be inferred as read-only-0 values. 
#   - All extensions not defined in the ISA field should be inferred as read-only-0 values.
#   - The default and mask fields of Extensions should be only 26-bits wide.
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
# 
#
misa:
    type: dict
    schema: 
        implemented:
            type: boolean
            default: False
        MXL:
            type: dict
            schema:
                range:
                    type: dict
                    schema:
                        rangelist:
                            type: list
                            schema:
                                type: list
                                schema:
                                    type: integer
                                    allowed: [1,2,3]
                            check_with: len_check
                        mode:
                            type: string
                            allowed: ["Unchanged","Nextup","Nextdown","Nearup","Neardown","Largest","Smallest"]
                            default: "Unchanged"
        Extensions:
            type: dict
            schema:
                bitmask:
                    type: dict
                    schema:
                        mask:
                            type: integer
                            min: 0x00
                            max: 0x3FFFFFF
                            default: 0x00
                        default:
                            type: integer
                            min: 0x00
                            max: 0x3FFFFFF
                            default: 0x100
                    check_with: ext_check
            allowed: ['bitmask']
    default:
        implemented: False
### 
# **Description**: Stores the VendorId.
#       - implemented: A boolean field indicating that the register has been implemented.
#       - id: A XLEN bit wide value equal to the VendorId
# 
# **Examples**: 
# 
# .. code-block:: none
#
#   mvendorid:
#      implemented: True
#      id: 0x458
#
# **Constraints**: 
#       - This field should be only XLEN bits wide 
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
mvendorid:
    type: dict
    schema: 
        implemented: 
            type: boolean
            default: False
        id:
            type: integer
            default: 0
            check_with: max_length
    default:
        implemented: False
### 
# **Description**: Stores the ArchitectureId.
#       - implemented: A boolean field indicating that the register has been implemented.
#       - id: A XLEN bit wide value equal to the ArchitectureId
# 
# **Examples**:
#
# .. code-block:: python
#
#   marchid:
#      implemented: True
#      id: 0x458
#
# **Constraints**: 
#       - This field should be only XLEN bits wide 
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
marchid:
    type: dict
    schema: 
        implemented: 
            type: boolean
            default: False
        id:
            type: integer
            default: 0x00
            check_with: max_length
    default:
        implemented: False

### 
# **Description**: Stores the ImplementationId.
#       - implemented: A boolean field indicating that the register has been implemented.
#       - id: A XLEN bit wide value equal to the ImplementationId
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mimpid:
#      implemented: True
#      id: 0x458
#
# **Constraints**:
#   - This field should be only XLEN bits wide 
#
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
mimpid:
    type: dict
    schema: 
        implemented: 
            type: boolean
            default: False
        id:
            type: integer
            default: 0x00
            check_with: max_length
    default:
        implemented: False

### 
# **Description**: Specifies the Hart Id of the current specs.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mhartid: 0
#
# **Constraints**: 
#       - The value should be less than the maximum value supported by XLEN bits.
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
mhartid:
    required: True
    type: integer
    check_with: max_length

### 
# **Description**: Specifies the fields of the *mstatus* register.
#       - SD: 
#           - is_hardwired:  A boolean value indicating if platform has hardwired this field to 0.
#       - XS:
#           - is_hardwired:  A boolean value indicating if platform has hardwired this field to 0.
#       - FS: 
#           - range: (range-warl-func)
#               - rangelist: a list of 2 or 1 element lists which specify the lower and upper bounds of the disjoint set of values FS field can take.(Allowed [0,1,2,3])
#               - mode : A string describing one of the *range-update-warl-func*.
#       - MPP: 
#           - range: (range-warl-func)
#               - rangelist: a list of 2 or 1 element lists which specify the lower and upper bounds of the disjoint set of values MPP field can take.(Allowed [0,1,3])
#               - mode : A string describing one of the *range-update-warl-func*.
#       - SXL: This field doesnt exist in systems where XLEN = 32
#           - is_hardwired : A boolean value indicating if platform has hardwired this field to some other field.
#           - hardwired_field: A string field indicating to which field SXL is hardwired. (Allowed MXL)
#           - range: (range-warl-func) when not hardwired to MXL
#               - rangelist: a list of 2 or 1 element lists which specify the lower and upper bounds of the disjoint set of values SXL field can take.(Allowed [0,1,2,3])
#               - mode : A string describing one of the *range-update-warl-func*.
#       - UXL: This field doesnt exist in systems where XLEN = 32
#           - is_hardwired : A boolean value indicating if platform has hardwired this field to some other field.
#           - hardwired_field: A string field indicating to which field UXL is hardwired. (Allowed [MXL,SXL])
#           - range: (range-warl-func)
#               - rangelist: a list of 2 or 1 element lists which specify the lower and upper bounds of the disjoint set of values UXL field can take.(Allowed [0,1,2,3])
#               - mode : A string describing one of the *range-update-warl-func*.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mstatus:
#      SD:
#          is_hardwired: False
#      XS:
#          is_hardwired: False
#      FS:
#          range:
#              rangelist: [[0,3]]
#              mode: "Unchanged"
#      MPP:
#           range:
#              rangelist: [[0],[3]]
#              mode: "Unchanged"
#      SXL:
#           is_hardwired: False
#           hardwired_field: "MXL"
#      UXL:
#           is_hardwired: False
#           hardwired_field: "MXL"
#
# **Constraints**:
#       - if XS is hardwired to 0 and FS is hardwired to 0, then SD should also be hardwired to 0
#       - if FS field is_hardwired is True, then the range field is ignored by the tests.
#       - No mode corresponding to a value in MPP must be unsupported (i.e. 1 cannot be present without the 'S' extension and '0' without the 'U' extension)
#       - No value in SXL or UXL must exceed XLEN/32.
#       - In 32 bit systems the SXL and UXL fields have no meaning and are ignored while testing.
#       - In systems other than RV32 for SXL and UXL 0 is allowed to be present only if the corresponding modes are not supported.
#       - In systems other than RV32 for SXL and UXL if 0 is present in the range list then no other entries are allowed.
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
mstatus:
    type: dict
    required: True
    schema:
        XS:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                    default: 0
                    dependencies: ['is_hardwired']
                    readonly: True
                is_hardwired:
                    type: boolean
                    default: False
            default:
                is_hardwired: False
        FS:
            type: dict
            schema:
                range:
                    type: dict
                    schema:
                        rangelist:
                            type: list
                            schema:
                                type: list
                                schema:
                                    type: integer
                                    max: 3
                        mode:
                            type: string
                            allowed: ["Unchanged","Nextup","Nextdown","Nearup","Neardown","Largest","Smallest","Addr"]
                            default: "Unchanged"
        MPP:
            type: dict
            schema:
                range:
                    type: dict
                    schema:
                        rangelist:
                            type: list
                            schema:
                                type: list
                                schema:
                                    type: integer
                                    allowed: [0,1,3]
                            check_with: mpp_check
                        mode:
                            type: string
                            allowed: ["Unchanged","Nextup","Nextdown","Nearup","Neardown","Largest","Smallest","Addr"]
                            default: "Unchanged"
        SXL:
            type: dict
            schema:
                is_hardwired: 
                    type: boolean
                    default: False
                hardwired_field:
                    type: string
                    dependencies: ['is_hardwired']
                    allowed: ["MXL"]
                    default: "MXL"
                range:
                    type: dict
                    schema:
                        rangelist:
                            type: list
                            schema:
                                type: list
                                schema:
                                    type: integer
                                    max: 3
                            check_with: sxl_check
                        mode:
                            type: string
                            allowed: ["Unchanged","Nextup","Nextdown","Nearup","Neardown","Largest","Smallest","Addr"]
                            default: "Unchanged"
                implemented:
                    type: boolean
                    readonly: True
            default:
                is_hardwired: True
                hardwired_field: "MXL"
        UXL:
            type: dict
            schema:
                is_hardwired: 
                    type: boolean
                    default: False
                hardwired_field:
                    type: string
                    dependencies: ['is_hardwired']
                    default: "MXL"
                    allowed: ["MXL","SXL"]
                range:
                    type: dict
                    schema:
                        rangelist:
                            type: list
                            schema:
                                type: list
                                schema:
                                    type: integer
                                    max: 3
                            check_with: uxl_check
                        mode:
                            type: string
                            allowed: ["Unchanged","Nextup","Nextdown","Nearup","Neardown","Largest","Smallest","Addr"]
                            default: "Unchanged"
                implemented:
                    type: boolean
                    readonly: True
                    # default_setter: lamda doc: sset()
            default:
                is_hardwired: True
                hardwired_field: "MXL"
        SD:
            type: dict
            schema:
                is_hardwired:
                    type: boolean
                    default: True
                hardwired_val:
                    readonly: True
                    default: 0
                    type: integer
            default:
                is_hardwired: False
        TSR:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                is_hardwired:
                    type: boolean
            readonly: True
        TW:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                is_hardwired:
                    type: boolean
            readonly: True
        TVM:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                is_hardwired:
                    type: boolean
            readonly: True
        MXR:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                is_hardwired:
                    type: boolean
            readonly: True
        SUM:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                is_hardwired:
                    type: boolean
            readonly: True
        SPP:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                is_hardwired:
                    type: boolean
            readonly: True
        MPRV:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                is_hardwired:
                    type: boolean
            readonly: True
        SPIE:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                is_hardwired:
                    type: boolean
            readonly: True
        UPIE:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                is_hardwired:
                    type: boolean
            readonly: True
        SIE:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                is_hardwired:
                    type: boolean
            readonly: True
        UIE:
            type: dict
            schema:
                hardwired_val:
                    type: integer
                is_hardwired:
                    type: boolean
            readonly: True

### 
# **Description**: Specifies the fields of the *mtvec* register.
#       - BASE: needs to be described as *range-warl-func* providing two integers specifying the range of legal values.       
#           - range: (range-warl-func)
#               - rangelist: a list of 2 or 1 element lists which specify the lower and upper bounds of the disjoint set of values BASE field can take.
#               - mode : A string describing one of the *range-update-warl-func*.
#       - MODE: needs to be described as *range-warl-func*
#           - range: (range-warl-func)
#               - rangelist: a list of 2 or 1 element lists which specify the lower and upper bounds of the disjoint set of values MODE field can take.(Allowed [0,1])
#               - mode : A string describing one of the *range-update-warl-func*.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mtvec:
#      BASE:
#          range:
#              rangelist: [[1000]]
#              mode: 'Unchanged'
#      MODE:
#           range:
#              rangelist: [[0,1]]
#              mode: "Unchanged"
#
# **Constraints**: 
#       - The maximum in the list of values specified for MODE cannot exceed 1.
#       - No value in the list of legal values can exceed 2^(XLEN-2)-1 for BASE.
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
mtvec:
    type: dict
    schema:
        BASE:
            type: dict
            schema:
                range:
                    type: dict
                    schema: 
                        rangelist:
                            type: list
                            schema:
                                type: list
                                schema:
                                    type: integer
                            check_with: xtveccheck
                        mode:
                            type: string
                            allowed: ["Unchanged","Nextup","Nextdown","Nearup","Neardown","Largest","Smallest","Addr"]
                            default: "Unchanged"
        MODE:
            type: dict
            schema:
                range:
                    type: dict
                    schema:
                        rangelist:
                            type: list
                            schema:
                                type: list
                                schema:
                                    type: integer
                                    max: 1
                        mode:
                            type: string
                            allowed: ["Unchanged","Nextup","Nextdown","Nearup","Neardown","Largest","Smallest","Addr"]
                            default: "Unchanged"

### 
# **Description**: needs to be described as *bitmask-warl-func* indicating delegatable interrupts
#       - bitmask:
#           - mask  : a XLEN bit wide value providing the *mask* field of the *bitmask-warl-func*.
#           - default : a XLEN bit wide value providing the *default* field of the *bitmask-warl-func*.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mideleg:
#      bitmask:
#          mask: 0xFFFFFFFF
#          default: 0x00
#
# **Constraints**: 
#       - No bit can be hardwired to 1 i.e the any bit which is 0 in the mask cannot be 1 in the default.
#       - The mask and default cannot exceed the maximum value which can be represented by XLEN bits(2^XLEN-1).
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
mideleg:
    type: dict
    schema:
        bitmask:
            type: dict
            schema:
                mask:
                    type: integer
                    default: 0x00
                    check_with: max_length
                default:
                    type: integer
                    default: 0x000
                    check_with: max_length
        implemented:
            type: boolean
            readonly: True    
    check_with: hardwirecheck
    default:
        bitmask:
            mask: 0xFFFFFFFF
            default: 0x00
### 
# **Description**: needs to be described as *bitmask-warl-func* indicating delegatable exceptions
#       - bitmask:
#           - mask  : a XLEN bit wide value providing the *mask* field of the *bitmask-warl-func*.
#           - default : a XLEN bit wide value providing the *default* field of the *bitmask-warl-func*.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   medeleg:
#      bitmask:
#          mask: 0xFFFFF7FF
#          default: 0x00
#
# **Constraints**: 
#       - No bit can be hardwired to 1 i.e the any bit which is 0 in the mask cannot be 1 in the default.
#       - The mask and default cannot exceed the maximum value which can be represented by XLEN bits(2^XLEN-1).
#       - The 11th bit needs to be hardwired to 0 ie. 0 in position 11 in both mask and default.
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
medeleg:
    type: dict
    schema:
        bitmask:
            type: dict
            schema:
                mask:
                    type: integer
                    default: 0x00
                    check_with: max_length
                default:
                    type: integer
                    default: 0x000
                    check_with: max_length
        implemented:
            type: boolean 
            readonly: True  
    check_with: medelegcheck
    default:
        bitmask:
            mask: 0xFFFFF7FF
            default: 0x00                    

### 
# **Description**: needs to be described as *bitmask-warl-func* indicating allowed interrupts.
#       - bitmask:
#           - mask  : a XLEN bit wide value providing the *mask* field of the *bitmask-warl-func*.
#           - default : a XLEN bit wide value providing the *default* field of the *bitmask-warl-func*.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mip:
#      bitmask:
#          mask: 0xFFFFFFFF
#          default: 0x00
#
# **Constraints**: 
#       - No bit can be hardwired to 1 i.e the any bit which is 0 in the mask cannot be 1 in the default.
#       - The mask and default cannot exceed the maximum default which can be represented by XLEN bits(2^XLEN-1).
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
mip:
    type: dict
    schema:
        bitmask:
            type: dict
            schema:
                mask:
                    type: integer
                    default: 0xFFFFFFFF
                    check_with: max_length
                default:
                    type: integer
                    default: 0x000
                    check_with: max_length
        implemented:
            type: boolean
            default: True
            readonly: True
    check_with: hardwirecheck
    default:
        bitmask:
            mask: 0xFFFFFFFF

### 
# **Description**: needs to be described as *bitmask-warl-func* indicating allowed interrupts.
#       - bitmask:
#           - mask  : a XLEN bit wide value providing the *mask* field of the *bitmask-warl-func*.
#           - default : a XLEN bit wide value providing the *default* field of the *bitmask-warl-func*.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mie:
#      bitmask:
#          mask: 0xFFFFFFFF
#          default: 0x00
#
# **Constraints**: 
#       - No bit can be hardwired to 1 i.e the any bit which is 0 in the mask cannot be 1 in the default.
#       - The mask and default cannot exceed the maximum value which can be represented by XLEN bits(2^XLEN-1).
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
mie:
    type: dict
    schema:
        bitmask:
            type: dict
            schema:
                mask:
                    type: integer
                    default: 0xFFFFFFFF
                    check_with: max_length
                default:
                    type: integer
                    default: 0x000
                    check_with: max_length
        implemented:
            type: boolean
            default: True
            readonly: True
    check_with: hardwirecheck
    default:
        bitmask:
            mask: 0xFFFFFFFF

### 
# **Description**: needs to be described as *bitmask-warl-func* or a *range-warl-func* indicating the range of 
#                  legal values allowed
#
#       - bitmask:
#           - mask  : a XLEN bit wide value in hexa-decimal providing the *mask* field of the *bitmask-warl-func*.
#           - default : a XLEN bit wide value in hexa-decimal providing the *default* field of the *bitmask-warl-func*.
#       - range: (range-warl-func)
#           - rangelist: a list of 2 or 1 element lists which specify the lower and upper bounds of the disjoint set of values mepc can take.
#           - mode : A string describing one of the *range-update-warl-func*.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mepc:
#      range:
#          rangelist: [[0xFFFFFFFF,0x80000]]
#          mode: "Unchanged"
#
# **Constraints**: 
#       - The mask and default cannot exceed the maximum value which can be represented by XLEN bits(2^XLEN-1) (in case of *bitmask-warl-func*).
#       - No legal value can exceed the maximum value which can be represented by XLEN bits(2^XLEN-1) (in case of *range-warl-func*).
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
mepc:
    type: dict
    schema:
        implemented:
            type: boolean
            allowed: [True]
            default: True
        bitmask:
            type: dict
            excludes: ['range']
            schema:
                mask:
                    type: integer
                    default: 0x00
                    check_with: max_length
                default:
                    type: integer
                    default: 0x000
                    check_with: max_length
        range:
            type: dict
            excludes: ['bitmask']
            schema: 
                rangelist:
                    type: list
                    schema:
                        type: list
                        schema:
                            type: integer
                    check_with: rangecheck 
                mode:
                    type: string
                    allowed: ["Unchanged","Nextup","Nextdown","Nearup","Neardown","Largest","Smallest","Addr"]
                    default: "Unchanged"


### 
# **Description**: needs to be described as *bitmask-warl-func* indicating supported counters.
#       - bitmask:
#           - mask  : a 32 bit wide value providing the *mask* field of the *bitmask-warl-func*.
#           - default : a 32 bit wide value providing the *default* field of the *bitmask-warl-func*.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mcountinhibit:
#      bitmask:
#          mask: 0xFFFFFFFF
#          default: 0x00
#
# **Constraints**: 
#       - The mask and default cannot exceed the maximum value which can be represented by XLEN bits(2^XLEN-1).
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
mcountinhibit:
    type: dict
    schema:
        bitmask:
            type: dict
            schema:
                mask:
                    type: integer
                    max: 0xFFFFFFFF
                    default: 0x00
                default:
                    type: integer
                    max: 0xFFFFFFFF
                    default: 0x00
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        bitmask:
            mask: 0x00
            default: 0x00

### 
# **Description**: needs to be described as *bitmask-warl-func* indicating supported counters.
#       - bitmask:
#           - mask  : a 32 bit wide value providing the *mask* field of the *bitmask-warl-func*.
#           - default : a 32 bit wide value providing the *default* field of the *bitmask-warl-func*.
#       - is_hardwired: a boolean value indicating whether the register is hardwired or not.
#       - hardwired_val: an integer indicating to what value the register is hardwired to.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mcounteren:
#      bitmask:
#          mask: 0xFFFFFFFF
#          default: 0x00
#
# **Constraints**: 
#       - The mask and default cannot exceed the maximum value which can be represented by XLEN bits(2^XLEN-1).
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
mcounteren:
    type: dict
    schema:
        bitmask:
            type: dict
            schema:
                mask:
                    type: integer
                    default: 0x00
                default:
                    type: integer
                    default: 0x00
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: True
        hardwired_val: 0

### 
# **Description**:
#       - is_hardwired: a string indicating whether the register is hardwired or not.
#
# Other counters (minstret,mhpmcounter3 - mhpmcounter31) are analogously defined.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mcycle:
#       is_hardwired: True
#       hardwired_val: 0
# 
# **Constraints**: 
#       - None
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
mcycle: &id001
    type: dict
    schema:
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            default: True
            readonly: True
    default:
        is_hardwired: True
        hardwired_val: 0
minstret: *id001
mhpmcounter3: *id001
mhpmcounter4: *id001
mhpmcounter5: *id001
mhpmcounter6: *id001
mhpmcounter7: *id001
mhpmcounter8: *id001
mhpmcounter9: *id001
mhpmcounter10: *id001
mhpmcounter11: *id001
mhpmcounter12: *id001
mhpmcounter13: *id001
mhpmcounter14: *id001
mhpmcounter15: *id001
mhpmcounter16: *id001
mhpmcounter17: *id001
mhpmcounter18: *id001
mhpmcounter19: *id001
mhpmcounter20: *id001
mhpmcounter21: *id001
mhpmcounter22: *id001
mhpmcounter23: *id001
mhpmcounter24: *id001
mhpmcounter25: *id001
mhpmcounter26: *id001
mhpmcounter27: *id001
mhpmcounter28: *id001
mhpmcounter29: *id001
mhpmcounter30: *id001
mhpmcounter31: *id001

### 
# **Description**: Specifies the fields of the *stvec* register.
#       - BASE: needs to be described as *range-warl-func* providing two integers specifying the range of legal values.       
#           - range: (range-warl-func)
#               - rangelist: a list of 2 or 1 element lists which specify the lower and upper bounds of the disjoint set of values BASE field can take.
#               - mode : A string describing one of the *range-update-warl-func*.
#       - MODE: needs to be described as *range-warl-func*
#           - range: (range-warl-func)
#               - rangelist: a list of 2 or 1 element lists which specify the lower and upper bounds of the disjoint set of values MODE field can take.(Allowed [0,1])
#               - mode : A string describing one of the *range-update-warl-func*.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   stvec:
#      BASE:
#          range:
#              rangelist: [[1000]]
#              mode: 'Unchanged'
#      MODE:
#           range:
#              rangelist: [[0,1]]
#              mode: "Unchanged"
#
# **Constraints**: 
#       - The maximum in the list of values specified for MODE cannot exceed 1.
#       - No value in the list of legal values can exceed 2^(XLEN-2) for BASE.
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
stvec:
    type: dict
    schema:
        BASE:
            type: dict
            schema:
                range:
                    type: dict
                    schema: 
                        rangelist:
                            type: list
                            schema:
                                type: list
                                schema:
                                    type: integer
                            check_with: xtveccheck
                        mode:
                            type: string
                            allowed: ["Unchanged","Nextup","Nextdown","Nearup","Neardown","Largest","Smallest","Addr"]
                            default: "Unchanged"
        MODE:
            type: dict
            schema:
                range:
                    type: dict
                    schema:
                        rangelist:
                            type: list
                            schema:
                                type: list
                                schema:
                                    type: integer
                                    max: 2
                        mode:
                            type: string
                            allowed: ["Unchanged","Nextup","Nextdown","Nearup","Neardown","Largest","Smallest","Addr"]
                            default: "Unchanged"
        implemented:
            type: boolean
            readonly: True

### 
# **Description**: needs to be described as *bitmask-warl-func* indicating allowed interrupts in 'S' mode.
#       - bitmask:
#           - mask  : a XLEN bit wide value providing the *mask* field of the *bitmask-warl-func*.
#           - default : a XLEN bit wide value providing the *default* field of the *bitmask-warl-func*.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   sip:
#      bitmask:
#          mask: 0xFFFFFFFF
#          default: 0x00
#
# **Constraints**: 
#       - No bit can be hardwired to 1 i.e the any bit which is 0 in the mask cannot be 1 in the default.
#       - The mask and default cannot exceed the maximum default which can be represented by XLEN bits(2^XLEN-1).
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
sip:
    type: dict
    schema:
        bitmask:
            type: dict
            schema:
                mask:
                    type: integer
                    default: 0xFFFFFFFF
                    check_with: max_length
                default:
                    type: integer
                    default: 0x000
                    check_with: max_length
        implemented:
            type: boolean
            readonly: True
    check_with: hardwirecheck
    default:
        bitmask:
            mask: 0xFFFFFFFF

### 
# **Description**: needs to be described as *bitmask-warl-func* indicating allowed interrupts in 'S' mode.
#       - bitmask:
#           - mask  : a XLEN bit wide value providing the *mask* field of the *bitmask-warl-func*.
#           - default : a XLEN bit wide value providing the *default* field of the *bitmask-warl-func*.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   sie:
#      bitmask:
#          mask: 0xFFFFFFFF
#          default: 0x00
#
# **Constraints**: 
#       - No bit can be hardwired to 1 i.e the any bit which is 0 in the mask cannot be 1 in the default.
#       - The mask and default cannot exceed the maximum value which can be represented by XLEN bits(2^XLEN-1).
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
sie:
    type: dict
    schema:
        bitmask:
            type: dict
            schema:
                mask:
                    type: integer
                    default: 0xFFFFFFFF
                    check_with: max_length
                default:
                    type: integer
                    default: 0x000
                    check_with: max_length
        implemented:
            type: boolean
            readonly: True
    check_with: hardwirecheck
    default:
        bitmask:
            mask: 0xFFFFFFFF

### 
# **Description**: needs to be described as *bitmask-warl-func* indicating supported counters in 'S' mode.
#       - bitmask:
#           - mask  : a 32 bit wide value providing the *mask* field of the *bitmask-warl-func*.
#           - default : a 32 bit wide value providing the *default* field of the *bitmask-warl-func*.
#       - is_hardwired: a boolean value indicating whether the register is hardwired or not.
#       - hardwired_val: an integer indicating to what value the register is hardwired to.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   scounteren:
#      bitmask:
#          mask: 0xFFFFFFFF
#          default: 0x00
#
# **Constraints**: 
#       - The mask and default cannot exceed the maximum value which can be represented by XLEN bits(2^XLEN-1).
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
scounteren:
    type: dict
    schema:
        bitmask:
            type: dict
            schema:
                mask:
                    type: integer
                    default: 0x00
                default:
                    type: integer
                    default: 0x00
        is_hardwired:
            type: boolean
            default: False
        hardwired_val:
            type: integer
            default: 0
        implemented:
            type: boolean
            readonly: True
    default:
        is_hardwired: True
        hardwired_val: 0

### 
# **Description**: needs to be described as *bitmask-warl-func* or a *range-warl-func* indicating the range of 
#                  legal values allowed
#
#       - bitmask:
#           - mask  : a XLEN bit wide value in hexa-decimal providing the *mask* field of the *bitmask-warl-func*.
#           - default : a XLEN bit wide value in hexa-decimal providing the *default* field of the *bitmask-warl-func*.
#       - range: (range-warl-func)
#           - rangelist: a list of 2 or 1 element lists which specify the lower and upper bounds of the disjoint set of values sepc can take.
#           - mode : A string describing one of the *range-update-warl-func*.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   sepc:
#      range:
#          rangelist: [[0xFFFFFFFF,0x80000]]
#          mode: "Unchanged"
#
# **Constraints**: 
#       - The mask and default cannot exceed the maximum value which can be represented by XLEN bits(2^XLEN-1) (in case of *bitmask-warl-func*).
#       - No legal value can exceed the maximum value which can be represented by XLEN bits(2^XLEN-1) (in case of *range-warl-func*).
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
sepc:
    type: dict
    schema:
        bitmask:
            type: dict
            excludes: ['range']
            schema:
                mask:
                    type: integer
                    default: 0x00
                    check_with: max_length
                default:
                    type: integer
                    default: 0x000
                    check_with: max_length
        range:
            type: dict
            excludes: ['bitmask']
            schema: 
                rangelist:
                    type: list
                    schema:
                        type: list
                        schema:
                            type: integer
                    check_with: rangecheck 
                mode:
                    type: string
                    allowed: ["Unchanged","Nextup","Nextdown","Nearup","Neardown","Largest","Smallest","Addr"]
                    default: "Unchanged"
        implemented: 
            type: boolean
            readonly: True
    default:
        bitmask:
            mask: 0x00
            default: 0x00

### 
# **Description**: This field describes the *satp* register
#       - MODE:
#           - range: (range-warl-func)
#               - rangelist: a list of 2 or 1 element lists which specify the lower and upper bounds of the disjoint set of values MODE can take.
#               - mode : A string describing one of the *range-update-warl-func*.
#       - ASID: 
#           - bitmask:
#               - mask  : a ASIDLEN bit wide value in hexa-decimal providing the *mask* field of the *bitmask-warl-func*.
#               - default : a ASIDLEN bit wide value in hexa-decimal providing the *default* field of the *bitmask-warl-func*.
#           - range: (range-warl-func)
#               - rangelist: a list of 2 or 1 element lists which specify the lower and upper bounds of the disjoint set of values ASID can take.
#               - mode : A string describing one of the *range-update-warl-func*.
#       - PPN: 
#           - bitmask:
#               - mask  : a value in hexa-decimal providing the *mask* field of the *bitmask-warl-func*.
#               - default : a value in hexa-decimal providing the *default* field of the *bitmask-warl-func*.
#           - range: (range-warl-func)
#               - rangelist: a list of 2 or 1 element lists which specify the lower and upper bounds of the disjoint set of values PPN can take.
#               - mode : A string describing one of the *range-update-warl-func*.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   satp:
#     MODE:
#       range:
#         rangelist: [[0],[8]]
#         mode: "Unchanged"
#     ASID:
#       bitmask:
#         mask: 0x1FF
#         default: 0x00
#     PPN:
#       bitmask:
#         mask: 0xFFFFFFFFFFF
#         default: 0x00
#
# **Constraints**: 
#   - On 32 bit systems ASIDMAX is 9 and on 64 bit systems ASIDMAX is 16.
#   - On 32 bit systems MODE can take any value in [0,1] and on 64 bit systems MODE can take any value in [0,8,9].
#   - Rangelist of MODE cannot have the entry 9 without 8 being present.
#   - PPN is 22 bits wide in 32 bit systems and 44 bits wide in 64 bit systems.
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
satp:
    type: dict
    schema:
        implemented: 
            type: boolean
            readonly: True
        MODE:
            type: dict
            schema:
                range:
                    type: dict
                    schema: 
                        rangelist:
                            type: list
                            schema:
                                type: list
                                schema:
                                    type: integer
                        mode:
                            type: string
                            allowed: ["Unchanged","Nextup","Nextdown","Nearup","Neardown","Largest","Smallest","Addr"]
                            default: "Unchanged"
        ASID:
            type: dict
            schema:
                bitmask:
                    type: dict
                    excludes: ['range']
                    schema:
                        mask:
                            type: integer
                            default: 0x00
                        default:
                            type: integer
                            default: 0x00
                range:
                    type: dict
                    excludes: ['bitmask']
                    schema: 
                        rangelist:
                            type: list
                            schema:
                                type: list
                                schema:
                                    type: integer 
                        mode:
                            type: string
                            allowed: ["Unchanged","Nextup","Nextdown","Nearup","Neardown","Largest","Smallest","Addr"]
                            default: "Unchanged"
            default:
                bitmask:
                    mask: 0x00
                    default: 0x00
        PPN:
            type: dict
            schema:
                bitmask:
                    type: dict
                    excludes: ['range']
                    schema:
                        mask:
                            type: integer
                            default: 0x00
                        default:
                            type: integer
                            default: 0x00
                range:
                    type: dict
                    excludes: ['bitmask']
                    schema: 
                        rangelist:
                            type: list
                            schema:
                                type: list
                                schema:
                                    type: integer 
                        mode:
                            type: string
                            allowed: ["Unchanged","Nextup","Nextdown","Nearup","Neardown","Largest","Smallest","Addr"]
                            default: "Unchanged"
            default:
                bitmask:
                    mask: 0x00
                    default: 0x00
    check_with: satp_check
                        