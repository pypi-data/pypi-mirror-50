### 
# **Description**: Stores the value for the reset vector. It can either be a label or an address.
#       - label: A string field equal to the label in the assembly code.
#       - address: A value equal to the absolute address where the vector is present.
# 
# **Examples**: 
# 
# .. code-block:: none
#
#   reset:
#      label: reset_vector
# 
#   reset:
#      address: 0x8000000
#
# **Constraints**: 
#       - None
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
reset:
  type: dict
  schema:
    label:
      type: string
      excludes: ['address']
    address:
      type: integer
      excludes: ['label']
  required: True
### 
# **Description**: Stores the value for the nmi vector. It can either be a label or an address.
#       - label: A string field equal to the label in the assembly code.
#       - address: A value equal to the absolute address where the vector is present.
# 
# **Examples**: 
# 
# .. code-block:: none
#
#   nmi:
#      label: nmi_vector
# 
#   nmi:
#      address: 0x8000000
#
# **Constraints**: 
#       - None
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
nmi:
  type: dict
  schema:
    label:
      type: string
      excludes: ['address']
    address:
      type: integer
      excludes: ['label']
  required: True
### 
# **Description**: Stores the fields for memory mapped *mtime* register.
#       - implemented: A boolean field indicating that the register has been implemented.
#       - address: A value equal to the physical address at which the register is present.
# 
# **Examples**: 
# 
# .. code-block:: none
#
#   mtime:
#      implemented: True
#      address: 0x458
#
# **Constraints**: 
#       - None
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
mtime:
  type: dict
  schema:
    address:
      type: integer
    implemented:
      type: boolean
      default: False
  default:
    implemented: False

### 
# **Description**: Stores the fields for memory mapped *mtimecmp* register.
#       - implemented: A boolean field indicating that the register has been implemented.
#       - address: A value equal to the physical address at which the register is present.
# 
# **Examples**: 
# 
# .. code-block:: none
#
#   mtimecmp:
#      implemented: True
#      address: 0x458
#
# **Constraints**: 
#       - None
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
mtimecmp:
  type: dict
  schema:
    address:
      type: integer
    implemented:
      type: boolean
      default: False
  default:
    implemented: False

### 
# **Description**: Stores the fields for the *mcause* register.
#       - implemented: A boolean field indicating that the register has been implemented.
#       - values: The list of exception values greater than 16 as assumed by the platform as integers.
# 
# **Examples**: 
# 
# .. code-block:: none
#
#   mcause:
#      implemented: True
#      value: [16,17,20]
#
# **Constraints**: 
#       - None
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
mcause:
  type: dict
  schema:
    implemented:
      type: boolean
    values:
      type: list
      check_with: xcause_check
  default:
    implemented: True

### 
# **Description**: Stores the fields for *mtval* register.
#.       - implemented: A Boolean value indicating whether the register is implemented.      
#        - behaviour: A dictionary type to specify which of the exceptions modify the mtval reg
#           - e0: A string type describing the behaviour of exception 0.
#           - e1: A string type describing the behaviour of exception 1.
#           - e2: A string type describing the behaviour of exception 2.
#           - e3: A string type describing the behaviour of exception 3.
#           - e4: A string type describing the behaviour of exception 4.
#           - e5: A string type describing the behaviour of exception 5.
#           - e6: A string type describing the behaviour of exception 6.
#           - e7: A string type describing the behaviour of exception 7.
#           - e8: A string type describing the behaviour of exception 8.
#           - e9: A string type describing the behaviour of exception 9.
#           - e10: A string type describing the behaviour of exception 10.
#           - e11: A string type describing the behaviour of exception 11.
#           - e12: A string type describing the behaviour of exception 12.
#           - e13: A string type describing the behaviour of exception 13.
#           - e15: A string type describing the behaviour of exception 15.
#
# **Examples**: 
# 
# .. code-block:: none
#
#    TBD: Provide a concrete use-case for the above.
#
# **Constraints**: 
#       - None
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
mtval:
  type: dict
  schema:
    implemented:
      type: boolean
      default: False
    behaviour:
      type: dict
      schema:
        e00:
          type: string
        e01:
          type: string
        e02:
          type: string
        e03:
          type: string  
        e04:
          type: string
        e05:
          type: string
        e06:
          type: string
        e07:
          type: string
        e08:
          type: string
        e09:
          type: string
        e10:
          type: string
        e11:
          type: string
        e12:
          type: string
        e13:
          type: string
        e15:
          type: string
  default:
    implemented: False
    

### 
# **Description**: is a *warl-func* and can be specified as a range WARL functions.
#       - bitmask:
#           - mask  : a XLEN bit wide value providing the *mask* field of the *bitmask-warl-func*.
#           - default : a XLEN bit wide value providing the *default* field of the *bitmask-warl-func*.
#       - range: (range-warl-func)
#           - rangelist: a list of 2 or 1 element lists which specify the lower and upper bounds of the disjoint set of values mphmevent3 can take.(Allowed [0,1,3])
#           - mode : A string describing one of the *range-update-warl-func*.
#       - is_hardwired: A boolean field indicating whether the register is hardwired or not.
#
#  Other event registers (mhpmevent4 - mhpmevent31) are analogously defined.
# 
# **Examples**:
#
# .. code-block:: none
# 
#   mhpmevent3:
#      is_hardwired: True
# 
#   mhpmevent3:
#      range:
#         rangelist: [[0],[5,6],[8,9]]
#         mode: "Unchanged"
#
# **Constraints**: 
#       - The mask and default (incase of bitmask func) cannot exceed the maximum value which can be represented by XLEN bits.
#       - No legal value can exceed the maximum value which can be represented by XLEN bits.   
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
mhpmevent3: &id001
  type: dict
  schema:
    bitmask:
      type: dict
      excludes: ['range']
      schema:
        mask:
          type: integer
          default: 0x00
          check_with: max_length
        default:
          type: integer
          default: 0x00
          check_with: max_length
    range:
      type: dict
      schema: 
        rangelist:
          type: list
          schema:
            type: list
            schema:
              type: integer
          check_with: rangecheck
        mode:
          type: string
          allowed: ["Unchanged","Nextup","Nextdown","Nearup","Neardown","Largest","Smallest","Addr"]
          default: "Unchanged"
    is_hardwired:
      type: boolean
      default: False
    hardwired_val:
      type: integer
      default: 0
    implemented:
      type: boolean
      default: True
      readonly: True
  default:
    is_hardwired: True
    hardwired_val: 0

mhpmevent4: *id001
mhpmevent5: *id001
mhpmevent6: *id001
mhpmevent7: *id001
mhpmevent8: *id001
mhpmevent9: *id001
mhpmevent10: *id001
mhpmevent11: *id001
mhpmevent12: *id001
mhpmevent13: *id001
mhpmevent14: *id001
mhpmevent15: *id001
mhpmevent16: *id001
mhpmevent17: *id001
mhpmevent18: *id001
mhpmevent19: *id001
mhpmevent20: *id001
mhpmevent21: *id001
mhpmevent22: *id001
mhpmevent23: *id001
mhpmevent24: *id001
mhpmevent25: *id001
mhpmevent26: *id001
mhpmevent27: *id001
mhpmevent28: *id001
mhpmevent29: *id001
mhpmevent30: *id001
mhpmevent31: *id001

### 
# **Description**: Stores the fields for the *scause* register.
#       - implemented: A boolean field indicating that the register has been implemented.
#       - values: The list of exception values greater than 16 as assumed by the platform as integers.
# 
# **Examples**: 
# 
# .. code-block:: none
#
#   scause:
#      implemented: True
#      value: [16,17,20]
#
# **Constraints**: 
#       - None
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
scause:
  type: dict
  schema:
    implemented:
      type: boolean
    values:
      type: list
      check_with: xcause_check
  default:
    implemented: False
  
### 
# **Description**: Stores the fields for *stval* register.
#       - implemented: A Boolean value indicating whether the field is implemented.   
#       - behaviour: A dictionary type to specify which of the exceptions modify the mtval reg
#           - e0: A string type describing the behaviour of exception 0.
#           - e1: A string type describing the behaviour of exception 1.
#           - e2: A string type describing the behaviour of exception 2.
#           - e3: A string type describing the behaviour of exception 3.
#           - e4: A string type describing the behaviour of exception 4.
#           - e5: A string type describing the behaviour of exception 5.
#           - e6: A string type describing the behaviour of exception 6.
#           - e7: A string type describing the behaviour of exception 7.
#           - e8: A string type describing the behaviour of exception 8.
#           - e9: A string type describing the behaviour of exception 9.
#           - e10: A string type describing the behaviour of exception 10.
#           - e11: A string type describing the behaviour of exception 11.
#           - e12: A string type describing the behaviour of exception 12.
#           - e13: A string type describing the behaviour of exception 13.
#           - e15: A string type describing the behaviour of exception 15.
#
# **Examples**: 
# 
# .. code-block:: none
#
#    TBD: Provide a concrete use-case for the above.
#
# **Constraints**: 
#       - None
#
# `------------------------------------------------------------------------------------------------------------------------------`
#
stval:
  type: dict
  schema:
    implemented:
      type: boolean
      default: False
    behaviour:
      type: dict
      schema:
        e00:
          type: string
        e01:
          type: string
        e02:
          type: string
        e03:
          type: string  
        e04:
          type: string
        e05:
          type: string
        e06:
          type: string
        e07:
          type: string
        e08:
          type: string
        e09:
          type: string
        e10:
          type: string
        e11:
          type: string
        e12:
          type: string
        e13:
          type: string
        e15:
          type: string
  default:
    implemented: False
