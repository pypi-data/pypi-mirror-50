# coding: utf-8

"""
    Firefly III API Client

    This is the Python client for Firefly III API  # noqa: E501

    The version of the OpenAPI document: 0.10.0
    Contact: thegrumpydictator@gmail.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class RecurrenceTransaction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amount': 'float',
        'currency_code': 'str',
        'currency_decimal_places': 'int',
        'currency_id': 'int',
        'currency_symbol': 'str',
        'description': 'str',
        'destination_id': 'int',
        'destination_name': 'str',
        'foreign_amount': 'float',
        'foreign_currency_code': 'str',
        'foreign_currency_decimal_places': 'int',
        'foreign_currency_id': 'int',
        'foreign_currency_symbol': 'str',
        'meta': 'list[RecurrenceTransactionMeta]',
        'source_id': 'int',
        'source_name': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'currency_code': 'currency_code',
        'currency_decimal_places': 'currency_decimal_places',
        'currency_id': 'currency_id',
        'currency_symbol': 'currency_symbol',
        'description': 'description',
        'destination_id': 'destination_id',
        'destination_name': 'destination_name',
        'foreign_amount': 'foreign_amount',
        'foreign_currency_code': 'foreign_currency_code',
        'foreign_currency_decimal_places': 'foreign_currency_decimal_places',
        'foreign_currency_id': 'foreign_currency_id',
        'foreign_currency_symbol': 'foreign_currency_symbol',
        'meta': 'meta',
        'source_id': 'source_id',
        'source_name': 'source_name'
    }

    def __init__(self, amount=None, currency_code=None, currency_decimal_places=None, currency_id=None, currency_symbol=None, description=None, destination_id=None, destination_name=None, foreign_amount=None, foreign_currency_code=None, foreign_currency_decimal_places=None, foreign_currency_id=None, foreign_currency_symbol=None, meta=None, source_id=None, source_name=None):  # noqa: E501
        """RecurrenceTransaction - a model defined in OpenAPI"""  # noqa: E501

        self._amount = None
        self._currency_code = None
        self._currency_decimal_places = None
        self._currency_id = None
        self._currency_symbol = None
        self._description = None
        self._destination_id = None
        self._destination_name = None
        self._foreign_amount = None
        self._foreign_currency_code = None
        self._foreign_currency_decimal_places = None
        self._foreign_currency_id = None
        self._foreign_currency_symbol = None
        self._meta = None
        self._source_id = None
        self._source_name = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if currency_code is not None:
            self.currency_code = currency_code
        if currency_decimal_places is not None:
            self.currency_decimal_places = currency_decimal_places
        if currency_id is not None:
            self.currency_id = currency_id
        if currency_symbol is not None:
            self.currency_symbol = currency_symbol
        if description is not None:
            self.description = description
        if destination_id is not None:
            self.destination_id = destination_id
        if destination_name is not None:
            self.destination_name = destination_name
        self.foreign_amount = foreign_amount
        self.foreign_currency_code = foreign_currency_code
        self.foreign_currency_decimal_places = foreign_currency_decimal_places
        self.foreign_currency_id = foreign_currency_id
        self.foreign_currency_symbol = foreign_currency_symbol
        if meta is not None:
            self.meta = meta
        if source_id is not None:
            self.source_id = source_id
        if source_name is not None:
            self.source_name = source_name

    @property
    def amount(self):
        """Gets the amount of this RecurrenceTransaction.  # noqa: E501

        Amount of the transaction.  # noqa: E501

        :return: The amount of this RecurrenceTransaction.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this RecurrenceTransaction.

        Amount of the transaction.  # noqa: E501

        :param amount: The amount of this RecurrenceTransaction.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def currency_code(self):
        """Gets the currency_code of this RecurrenceTransaction.  # noqa: E501


        :return: The currency_code of this RecurrenceTransaction.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this RecurrenceTransaction.


        :param currency_code: The currency_code of this RecurrenceTransaction.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def currency_decimal_places(self):
        """Gets the currency_decimal_places of this RecurrenceTransaction.  # noqa: E501

        Number of decimals in the currency  # noqa: E501

        :return: The currency_decimal_places of this RecurrenceTransaction.  # noqa: E501
        :rtype: int
        """
        return self._currency_decimal_places

    @currency_decimal_places.setter
    def currency_decimal_places(self, currency_decimal_places):
        """Sets the currency_decimal_places of this RecurrenceTransaction.

        Number of decimals in the currency  # noqa: E501

        :param currency_decimal_places: The currency_decimal_places of this RecurrenceTransaction.  # noqa: E501
        :type: int
        """

        self._currency_decimal_places = currency_decimal_places

    @property
    def currency_id(self):
        """Gets the currency_id of this RecurrenceTransaction.  # noqa: E501


        :return: The currency_id of this RecurrenceTransaction.  # noqa: E501
        :rtype: int
        """
        return self._currency_id

    @currency_id.setter
    def currency_id(self, currency_id):
        """Sets the currency_id of this RecurrenceTransaction.


        :param currency_id: The currency_id of this RecurrenceTransaction.  # noqa: E501
        :type: int
        """

        self._currency_id = currency_id

    @property
    def currency_symbol(self):
        """Gets the currency_symbol of this RecurrenceTransaction.  # noqa: E501


        :return: The currency_symbol of this RecurrenceTransaction.  # noqa: E501
        :rtype: str
        """
        return self._currency_symbol

    @currency_symbol.setter
    def currency_symbol(self, currency_symbol):
        """Sets the currency_symbol of this RecurrenceTransaction.


        :param currency_symbol: The currency_symbol of this RecurrenceTransaction.  # noqa: E501
        :type: str
        """

        self._currency_symbol = currency_symbol

    @property
    def description(self):
        """Gets the description of this RecurrenceTransaction.  # noqa: E501


        :return: The description of this RecurrenceTransaction.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RecurrenceTransaction.


        :param description: The description of this RecurrenceTransaction.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def destination_id(self):
        """Gets the destination_id of this RecurrenceTransaction.  # noqa: E501

        ID of the destination account.  # noqa: E501

        :return: The destination_id of this RecurrenceTransaction.  # noqa: E501
        :rtype: int
        """
        return self._destination_id

    @destination_id.setter
    def destination_id(self, destination_id):
        """Sets the destination_id of this RecurrenceTransaction.

        ID of the destination account.  # noqa: E501

        :param destination_id: The destination_id of this RecurrenceTransaction.  # noqa: E501
        :type: int
        """

        self._destination_id = destination_id

    @property
    def destination_name(self):
        """Gets the destination_name of this RecurrenceTransaction.  # noqa: E501

        Name of the source account.  # noqa: E501

        :return: The destination_name of this RecurrenceTransaction.  # noqa: E501
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this RecurrenceTransaction.

        Name of the source account.  # noqa: E501

        :param destination_name: The destination_name of this RecurrenceTransaction.  # noqa: E501
        :type: str
        """

        self._destination_name = destination_name

    @property
    def foreign_amount(self):
        """Gets the foreign_amount of this RecurrenceTransaction.  # noqa: E501

        Foreign amount of the transaction.  # noqa: E501

        :return: The foreign_amount of this RecurrenceTransaction.  # noqa: E501
        :rtype: float
        """
        return self._foreign_amount

    @foreign_amount.setter
    def foreign_amount(self, foreign_amount):
        """Sets the foreign_amount of this RecurrenceTransaction.

        Foreign amount of the transaction.  # noqa: E501

        :param foreign_amount: The foreign_amount of this RecurrenceTransaction.  # noqa: E501
        :type: float
        """

        self._foreign_amount = foreign_amount

    @property
    def foreign_currency_code(self):
        """Gets the foreign_currency_code of this RecurrenceTransaction.  # noqa: E501


        :return: The foreign_currency_code of this RecurrenceTransaction.  # noqa: E501
        :rtype: str
        """
        return self._foreign_currency_code

    @foreign_currency_code.setter
    def foreign_currency_code(self, foreign_currency_code):
        """Sets the foreign_currency_code of this RecurrenceTransaction.


        :param foreign_currency_code: The foreign_currency_code of this RecurrenceTransaction.  # noqa: E501
        :type: str
        """

        self._foreign_currency_code = foreign_currency_code

    @property
    def foreign_currency_decimal_places(self):
        """Gets the foreign_currency_decimal_places of this RecurrenceTransaction.  # noqa: E501

        Number of decimals in the currency  # noqa: E501

        :return: The foreign_currency_decimal_places of this RecurrenceTransaction.  # noqa: E501
        :rtype: int
        """
        return self._foreign_currency_decimal_places

    @foreign_currency_decimal_places.setter
    def foreign_currency_decimal_places(self, foreign_currency_decimal_places):
        """Sets the foreign_currency_decimal_places of this RecurrenceTransaction.

        Number of decimals in the currency  # noqa: E501

        :param foreign_currency_decimal_places: The foreign_currency_decimal_places of this RecurrenceTransaction.  # noqa: E501
        :type: int
        """

        self._foreign_currency_decimal_places = foreign_currency_decimal_places

    @property
    def foreign_currency_id(self):
        """Gets the foreign_currency_id of this RecurrenceTransaction.  # noqa: E501


        :return: The foreign_currency_id of this RecurrenceTransaction.  # noqa: E501
        :rtype: int
        """
        return self._foreign_currency_id

    @foreign_currency_id.setter
    def foreign_currency_id(self, foreign_currency_id):
        """Sets the foreign_currency_id of this RecurrenceTransaction.


        :param foreign_currency_id: The foreign_currency_id of this RecurrenceTransaction.  # noqa: E501
        :type: int
        """

        self._foreign_currency_id = foreign_currency_id

    @property
    def foreign_currency_symbol(self):
        """Gets the foreign_currency_symbol of this RecurrenceTransaction.  # noqa: E501


        :return: The foreign_currency_symbol of this RecurrenceTransaction.  # noqa: E501
        :rtype: str
        """
        return self._foreign_currency_symbol

    @foreign_currency_symbol.setter
    def foreign_currency_symbol(self, foreign_currency_symbol):
        """Sets the foreign_currency_symbol of this RecurrenceTransaction.


        :param foreign_currency_symbol: The foreign_currency_symbol of this RecurrenceTransaction.  # noqa: E501
        :type: str
        """

        self._foreign_currency_symbol = foreign_currency_symbol

    @property
    def meta(self):
        """Gets the meta of this RecurrenceTransaction.  # noqa: E501


        :return: The meta of this RecurrenceTransaction.  # noqa: E501
        :rtype: list[RecurrenceTransactionMeta]
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this RecurrenceTransaction.


        :param meta: The meta of this RecurrenceTransaction.  # noqa: E501
        :type: list[RecurrenceTransactionMeta]
        """

        self._meta = meta

    @property
    def source_id(self):
        """Gets the source_id of this RecurrenceTransaction.  # noqa: E501

        ID of the source account.  # noqa: E501

        :return: The source_id of this RecurrenceTransaction.  # noqa: E501
        :rtype: int
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this RecurrenceTransaction.

        ID of the source account.  # noqa: E501

        :param source_id: The source_id of this RecurrenceTransaction.  # noqa: E501
        :type: int
        """

        self._source_id = source_id

    @property
    def source_name(self):
        """Gets the source_name of this RecurrenceTransaction.  # noqa: E501

        Name of the source account.  # noqa: E501

        :return: The source_name of this RecurrenceTransaction.  # noqa: E501
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this RecurrenceTransaction.

        Name of the source account.  # noqa: E501

        :param source_name: The source_name of this RecurrenceTransaction.  # noqa: E501
        :type: str
        """

        self._source_name = source_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecurrenceTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
