from collections import OrderedDict
from unittest import TestCase

from pyjsonnlp import conversion
from . import mocks
import pyjsonnlp

pyjsonnlp.__version__ = "0.2.2"


class TestConllu(TestCase):
    def test_to_conllu(self):
        j = OrderedDict([('meta', OrderedDict([('DC.conformsTo', '0.1'), ('DC.created', '2019-01-25T17:04:34'), ('DC.date', '2019-01-25T17:04:34')])), ('documents', {1: OrderedDict([('meta', OrderedDict([('DC.conformsTo', '0.1'), ('DC.source', 'SpaCy 2.1.3'), ('DC.created', '2019-01-25T17:04:34'), ('DC.date', '2019-01-25T17:04:34'), ('DC.language', 'en')])), ('id', 1), ('text', 'Autonomous cars from the countryside of France shift insurance liability toward manufacturers. People are afraid that they will crash.'), ('tokenList', {1: {'id': 1, 'text': 'Autonomous', 'lemma': 'autonomous', 'xpos': 'JJ', 'upos': 'ADJ', 'entity_iob': 'O', 'characterOffsetBegin': 0, 'characterOffsetEnd': 10, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'Degree': 'Pos', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'Xxxxx'}, 2: {'id': 2, 'text': 'cars', 'lemma': 'car', 'xpos': 'NNS', 'upos': 'NOUN', 'entity_iob': 'O', 'characterOffsetBegin': 11, 'characterOffsetEnd': 15, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'Number': 'Plur', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxxx'}, 3: {'id': 3, 'text': 'from', 'lemma': 'from', 'xpos': 'IN', 'upos': 'ADP', 'entity_iob': 'O', 'characterOffsetBegin': 16, 'characterOffsetEnd': 20, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxxx'}, 4: {'id': 4, 'text': 'the', 'lemma': 'the', 'xpos': 'DT', 'upos': 'DET', 'entity_iob': 'O', 'characterOffsetBegin': 21, 'characterOffsetEnd': 24, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxx'}, 5: {'id': 5, 'text': 'countryside', 'lemma': 'countryside', 'xpos': 'NN', 'upos': 'NOUN', 'entity_iob': 'O', 'characterOffsetBegin': 25, 'characterOffsetEnd': 36, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'Number': 'Sing', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxxx'}, 6: {'id': 6, 'text': 'of', 'lemma': 'of', 'xpos': 'IN', 'upos': 'ADP', 'entity_iob': 'O', 'characterOffsetBegin': 37, 'characterOffsetEnd': 39, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xx'}, 7: {'id': 7, 'text': 'France', 'lemma': 'France', 'xpos': 'NNP', 'upos': 'PROPN', 'entity_iob': 'B', 'characterOffsetBegin': 40, 'characterOffsetEnd': 46, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'NounType': 'Prop', 'Number': 'Sing', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'Xxxxx', 'entity': 'GPE'}, 8: {'id': 8, 'text': 'shift', 'lemma': 'shift', 'xpos': 'VBP', 'upos': 'VERB', 'entity_iob': 'O', 'characterOffsetBegin': 47, 'characterOffsetEnd': 52, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'VerbForm': 'Fin', 'Tense': 'Pres', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxxx'}, 9: {'id': 9, 'text': 'insurance', 'lemma': 'insurance', 'xpos': 'NN', 'upos': 'NOUN', 'entity_iob': 'O', 'characterOffsetBegin': 53, 'characterOffsetEnd': 62, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'Number': 'Sing', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxxx'}, 10: {'id': 10, 'text': 'liability', 'lemma': 'liability', 'xpos': 'NN', 'upos': 'NOUN', 'entity_iob': 'O', 'characterOffsetBegin': 63, 'characterOffsetEnd': 72, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'Number': 'Sing', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxxx'}, 11: {'id': 11, 'text': 'toward', 'lemma': 'toward', 'xpos': 'IN', 'upos': 'ADP', 'entity_iob': 'O', 'characterOffsetBegin': 73, 'characterOffsetEnd': 79, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxxx'}, 12: {'id': 12, 'text': 'manufacturers', 'lemma': 'manufacturer', 'xpos': 'NNS', 'upos': 'NOUN', 'entity_iob': 'O', 'characterOffsetBegin': 80, 'characterOffsetEnd': 93, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'Number': 'Plur', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'No'}, 'shape': 'xxxx'}, 13: {'id': 13, 'text': '.', 'lemma': '.', 'xpos': '.', 'upos': 'PUNCT', 'entity_iob': 'O', 'characterOffsetBegin': 93, 'characterOffsetEnd': 94, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'No', 'PunctType': 'Peri', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}}, 14: {'id': 14, 'text': 'People', 'lemma': 'People', 'xpos': 'NNS', 'upos': 'NOUN', 'entity_iob': 'O', 'characterOffsetBegin': 94, 'characterOffsetEnd': 100, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'Number': 'Plur', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'Xxxxx'}, 15: {'id': 15, 'text': 'are', 'lemma': 'be', 'xpos': 'VBP', 'upos': 'VERB', 'entity_iob': 'O', 'characterOffsetBegin': 101, 'characterOffsetEnd': 104, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'VerbForm': 'Fin', 'Tense': 'Pres', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxx'}, 16: {'id': 16, 'text': 'afraid', 'lemma': 'afraid', 'xpos': 'JJ', 'upos': 'ADJ', 'entity_iob': 'O', 'characterOffsetBegin': 105, 'characterOffsetEnd': 111, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'Degree': 'Pos', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxxx'}, 17: {'id': 17, 'text': 'that', 'lemma': 'that', 'xpos': 'IN', 'upos': 'ADP', 'entity_iob': 'O', 'characterOffsetBegin': 112, 'characterOffsetEnd': 116, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxxx'}, 18: {'id': 18, 'text': 'they', 'lemma': '-PRON-', 'xpos': 'PRP', 'upos': 'PRON', 'entity_iob': 'O', 'characterOffsetBegin': 117, 'characterOffsetEnd': 121, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'PronType': 'Prs', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxxx'}, 19: {'id': 19, 'text': 'will', 'lemma': 'will', 'xpos': 'MD', 'upos': 'VERB', 'entity_iob': 'O', 'characterOffsetBegin': 122, 'characterOffsetEnd': 126, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'VerbType': 'Mod', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxxx'}, 20: {'id': 20, 'text': 'crash', 'lemma': 'crash', 'xpos': 'VB', 'upos': 'VERB', 'entity_iob': 'O', 'characterOffsetBegin': 127, 'characterOffsetEnd': 132, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'VerbForm': 'Inf', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'No'}, 'shape': 'xxxx'}, 21: {'id': 21, 'text': '.', 'lemma': '.', 'xpos': '.', 'upos': 'PUNCT', 'entity_iob': 'O', 'characterOffsetBegin': 132, 'characterOffsetEnd': 133, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'No', 'PunctType': 'Peri', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'No'}}}), ('sentences', {1: {'id': 1, 'tokenFrom': 1, 'tokenTo': 14, 'tokens': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]}, 2: {'id': 2, 'tokenFrom': 14, 'tokenTo': 22, 'tokens': [14, 15, 16, 17, 18, 19, 20, 21]}}), ('dependencies', [{'style': 'universal', 'arcs': {1: [{'sentenceId': 0, 'label': 'amod', 'governor': 2, 'dependent': 1}], 2: [{'sentenceId': 0, 'label': 'root', 'governor': 0, 'dependent': 2}], 3: [{'sentenceId': 0, 'label': 'prep', 'governor': 2, 'dependent': 3}], 4: [{'sentenceId': 0, 'label': 'det', 'governor': 5, 'dependent': 4}], 5: [{'sentenceId': 0, 'label': 'pobj', 'governor': 3, 'dependent': 5}], 6: [{'sentenceId': 0, 'label': 'prep', 'governor': 5, 'dependent': 6}], 7: [{'sentenceId': 0, 'label': 'compound', 'governor': 10, 'dependent': 7}], 8: [{'sentenceId': 0, 'label': 'compound', 'governor': 9, 'dependent': 8}], 9: [{'sentenceId': 0, 'label': 'compound', 'governor': 10, 'dependent': 9}], 10: [{'sentenceId': 0, 'label': 'pobj', 'governor': 6, 'dependent': 10}], 11: [{'sentenceId': 0, 'label': 'prep', 'governor': 10, 'dependent': 11}], 12: [{'sentenceId': 0, 'label': 'pobj', 'governor': 11, 'dependent': 12}], 13: [{'sentenceId': 0, 'label': 'punct', 'governor': 2, 'dependent': 13}], 14: [{'sentenceId': 1, 'label': 'nsubj', 'governor': 15, 'dependent': 14}], 15: [{'sentenceId': 1, 'label': 'root', 'governor': 0, 'dependent': 15}], 16: [{'sentenceId': 1, 'label': 'acomp', 'governor': 15, 'dependent': 16}], 17: [{'sentenceId': 1, 'label': 'mark', 'governor': 20, 'dependent': 17}], 18: [{'sentenceId': 1, 'label': 'nsubj', 'governor': 20, 'dependent': 18}], 19: [{'sentenceId': 1, 'label': 'aux', 'governor': 20, 'dependent': 19}], 20: [{'sentenceId': 1, 'label': 'ccomp', 'governor': 16, 'dependent': 20}], 21: [{'sentenceId': 1, 'label': 'punct', 'governor': 15, 'dependent': 21}]}}]), ('constituents', [{'sent_id': 0, 'labeledBracketing': '(ROOT (S (NP (NP (JJ Autonomous) (NNS cars)) (PP (IN from) (NP (NP (DT the) (NN countryside)) (PP (IN of) (NP (NNP France)))))) (VP (VBP shift) (NP (NN insurance) (NN liability)) (PP (IN toward) (NP (NNS manufacturers)))) (. .)))'}, {'sent_id': 1, 'labeledBracketing': '(ROOT (S (NP (NNS People)) (VP (VBP are) (ADJP (JJ afraid) (SBAR (IN that) (S (NP (PRP they)) (VP (MD will) (VP (VB crash))))))) (. .)))'}]), ('expressions', [{'id': 1, 'type': 'NP', 'head': 2, 'dependency': 'root', 'tokens': [1, 2]}, {'id': 2, 'type': 'NP', 'head': 5, 'dependency': 'pobj', 'tokens': [4, 5]}, {'id': 3, 'type': 'NP', 'head': 10, 'dependency': 'pobj', 'tokens': [7, 8, 9, 10]}])])})])
        actual = conversion.to_conllu(j)
        expected = """# newdoc id = 1
# sent id = 1
1	Autonomous	autonomous	ADJ	JJ	Overt=Yes|Stop=No|Alpha=Yes|Degree=Pos|Foreign=No	2	amod	_	_
2	cars	car	NOUN	NNS	Overt=Yes|Stop=No|Alpha=Yes|Number=Plur|Foreign=No	0	root	_	_
3	from	from	ADP	IN	Overt=Yes|Stop=Yes|Alpha=Yes|Foreign=No	2	prep	_	_
4	the	the	DET	DT	Overt=Yes|Stop=Yes|Alpha=Yes|Foreign=No	5	det	_	_
5	countryside	countryside	NOUN	NN	Overt=Yes|Stop=No|Alpha=Yes|Number=Sing|Foreign=No	3	pobj	_	_
6	of	of	ADP	IN	Overt=Yes|Stop=Yes|Alpha=Yes|Foreign=No	5	prep	_	_
7	France	france	PROPN	NNP	Overt=Yes|Stop=No|Alpha=Yes|NounType=Prop|Number=Sing|Foreign=No	10	compound	_	_
8	shift	shift	VERB	VBP	Overt=Yes|Stop=No|Alpha=Yes|VerbForm=Fin|Tense=Pres|Foreign=No	9	compound	_	_
9	insurance	insurance	NOUN	NN	Overt=Yes|Stop=No|Alpha=Yes|Number=Sing|Foreign=No	10	compound	_	_
10	liability	liability	NOUN	NN	Overt=Yes|Stop=No|Alpha=Yes|Number=Sing|Foreign=No	6	pobj	_	_
11	toward	toward	ADP	IN	Overt=Yes|Stop=Yes|Alpha=Yes|Foreign=No	10	prep	_	_
12	manufacturers	manufacturer	NOUN	NNS	Overt=Yes|Stop=No|Alpha=Yes|Number=Plur|Foreign=No	11	pobj	_	_
13	.	.	PUNCT	.	Overt=Yes|Stop=No|Alpha=No|PunctType=Peri|Foreign=No	2	punct	_	_

# sent id = 2
1	People	people	NOUN	NNS	Overt=Yes|Stop=No|Alpha=Yes|Number=Plur|Foreign=No	2	nsubj	_	_
2	are	be	VERB	VBP	Overt=Yes|Stop=Yes|Alpha=Yes|VerbForm=Fin|Tense=Pres|Foreign=No	0	root	_	_
3	afraid	afraid	ADJ	JJ	Overt=Yes|Stop=No|Alpha=Yes|Degree=Pos|Foreign=No	2	acomp	_	_
4	that	that	ADP	IN	Overt=Yes|Stop=Yes|Alpha=Yes|Foreign=No	7	mark	_	_
5	they	they	PRON	PRP	Overt=Yes|Stop=Yes|Alpha=Yes|PronType=Prs|Foreign=No	7	nsubj	_	_
6	will	will	VERB	MD	Overt=Yes|Stop=Yes|Alpha=Yes|VerbType=Mod|Foreign=No	7	aux	_	_
7	crash	crash	VERB	VB	Overt=Yes|Stop=No|Alpha=Yes|VerbForm=Inf|Foreign=No	3	ccomp	_	_
8	.	.	PUNCT	.	Overt=Yes|Stop=No|Alpha=No|PunctType=Peri|Foreign=No	2	punct	_	_"""
        assert expected == actual, actual

    def test_to_conllu_2(self):
        j = OrderedDict([('meta', OrderedDict([('DC.conformsTo', '0.2.6'), ('DC.created', '2019-04-22T11:25:00'), ('DC.date', '2019-04-22T11:25:00')])), ('documents', {1: OrderedDict([('meta', OrderedDict([('DC.conformsTo', '0.2.6'), ('DC.source', 'SpaCy 2.1.3'), ('DC.created', '2019-04-22T11:25:00'), ('DC.date', '2019-04-22T11:25:00'), ('DC.language', 'en')])), ('id', 1), ('text', "The Mueller Report is a very long report. We spent a long time analyzing it. Trump wishes we didn't, but that didn't stop the intrepid NlpLab."), ('tokenList', {1: {'id': 1, 'text': 'The', 'lemma': 'the', 'xpos': 'DT', 'upos': 'DET', 'entity_iob': 'B', 'characterOffsetBegin': 0, 'characterOffsetEnd': 3, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'Xxx', 'entity': 'ORG'}, 2: {'id': 2, 'text': 'Mueller', 'lemma': 'Mueller', 'xpos': 'NNP', 'upos': 'PROPN', 'entity_iob': 'I', 'characterOffsetBegin': 4, 'characterOffsetEnd': 11, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'NounType': 'Prop', 'Number': 'Sing', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'Xxxxx', 'entity': 'ORG'}, 3: {'id': 3, 'text': 'Report', 'lemma': 'Report', 'xpos': 'NNP', 'upos': 'PROPN', 'entity_iob': 'I', 'characterOffsetBegin': 12, 'characterOffsetEnd': 18, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'NounType': 'Prop', 'Number': 'Sing', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'Xxxxx', 'entity': 'ORG'}, 4: {'id': 4, 'text': 'is', 'lemma': 'be', 'xpos': 'VBZ', 'upos': 'VERB', 'entity_iob': 'O', 'characterOffsetBegin': 19, 'characterOffsetEnd': 21, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'VerbForm': 'Fin', 'Tense': 'Pres', 'Number': 'Sing', 'Person': '3', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xx'}, 5: {'id': 5, 'text': 'a', 'lemma': 'a', 'xpos': 'DT', 'upos': 'DET', 'entity_iob': 'O', 'characterOffsetBegin': 22, 'characterOffsetEnd': 23, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'x'}, 6: {'id': 6, 'text': 'very', 'lemma': 'very', 'xpos': 'RB', 'upos': 'ADV', 'entity_iob': 'O', 'characterOffsetBegin': 24, 'characterOffsetEnd': 28, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'Degree': 'Pos', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxxx'}, 7: {'id': 7, 'text': 'long', 'lemma': 'long', 'xpos': 'JJ', 'upos': 'ADJ', 'entity_iob': 'O', 'characterOffsetBegin': 29, 'characterOffsetEnd': 33, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'Degree': 'Pos', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxxx'}, 8: {'id': 8, 'text': 'report', 'lemma': 'report', 'xpos': 'NN', 'upos': 'NOUN', 'entity_iob': 'O', 'characterOffsetBegin': 34, 'characterOffsetEnd': 40, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'Number': 'Sing', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'No'}, 'shape': 'xxxx'}, 9: {'id': 9, 'text': '.', 'lemma': '.', 'xpos': '.', 'upos': 'PUNCT', 'entity_iob': 'O', 'characterOffsetBegin': 40, 'characterOffsetEnd': 41, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'No', 'PunctType': 'Peri', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}}, 10: {'id': 10, 'text': 'We', 'lemma': '-PRON-', 'xpos': 'PRP', 'upos': 'PRON', 'entity_iob': 'O', 'characterOffsetBegin': 41, 'characterOffsetEnd': 43, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'PronType': 'Prs', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'Xx'}, 11: {'id': 11, 'text': 'spent', 'lemma': 'spend', 'xpos': 'VBD', 'upos': 'VERB', 'entity_iob': 'O', 'characterOffsetBegin': 44, 'characterOffsetEnd': 49, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'VerbForm': 'Fin', 'Tense': 'Past', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxxx'}, 12: {'id': 12, 'text': 'a', 'lemma': 'a', 'xpos': 'DT', 'upos': 'DET', 'entity_iob': 'O', 'characterOffsetBegin': 50, 'characterOffsetEnd': 51, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'x'}, 13: {'id': 13, 'text': 'long', 'lemma': 'long', 'xpos': 'JJ', 'upos': 'ADJ', 'entity_iob': 'O', 'characterOffsetBegin': 52, 'characterOffsetEnd': 56, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'Degree': 'Pos', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxxx'}, 14: {'id': 14, 'text': 'time', 'lemma': 'time', 'xpos': 'NN', 'upos': 'NOUN', 'entity_iob': 'O', 'characterOffsetBegin': 57, 'characterOffsetEnd': 61, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'Number': 'Sing', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxxx'}, 15: {'id': 15, 'text': 'analyzing', 'lemma': 'analyze', 'xpos': 'VBG', 'upos': 'VERB', 'entity_iob': 'O', 'characterOffsetBegin': 62, 'characterOffsetEnd': 71, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'VerbForm': 'Part', 'Tense': 'Pres', 'Aspect': 'Prog', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxxx'}, 16: {'id': 16, 'text': 'it', 'lemma': '-PRON-', 'xpos': 'PRP', 'upos': 'PRON', 'entity_iob': 'O', 'characterOffsetBegin': 72, 'characterOffsetEnd': 74, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'PronType': 'Prs', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'No'}, 'shape': 'xx'}, 17: {'id': 17, 'text': '.', 'lemma': '.', 'xpos': '.', 'upos': 'PUNCT', 'entity_iob': 'O', 'characterOffsetBegin': 74, 'characterOffsetEnd': 75, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'No', 'PunctType': 'Peri', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}}, 18: {'id': 18, 'text': 'Trump', 'lemma': 'Trump', 'xpos': 'NNP', 'upos': 'PROPN', 'entity_iob': 'B', 'characterOffsetBegin': 75, 'characterOffsetEnd': 80, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'NounType': 'Prop', 'Number': 'Sing', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'Xxxxx', 'entity': 'PERSON'}, 19: {'id': 19, 'text': 'wishes', 'lemma': 'wish', 'xpos': 'VBZ', 'upos': 'VERB', 'entity_iob': 'O', 'characterOffsetBegin': 81, 'characterOffsetEnd': 87, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'VerbForm': 'Fin', 'Tense': 'Pres', 'Number': 'Sing', 'Person': '3', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxxx'}, 20: {'id': 20, 'text': 'we', 'lemma': '-PRON-', 'xpos': 'PRP', 'upos': 'PRON', 'entity_iob': 'O', 'characterOffsetBegin': 88, 'characterOffsetEnd': 90, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'PronType': 'Prs', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xx'}, 21: {'id': 21, 'text': 'did', 'lemma': 'do', 'xpos': 'VBD', 'upos': 'VERB', 'entity_iob': 'O', 'characterOffsetBegin': 91, 'characterOffsetEnd': 94, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'VerbForm': 'Fin', 'Tense': 'Past', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'No'}, 'shape': 'xxx'}, 22: {'id': 22, 'text': 'not', 'lemma': 'not', 'xpos': 'RB', 'upos': 'ADV', 'entity_iob': 'O', 'characterOffsetBegin': 94, 'characterOffsetEnd': 97, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'Degree': 'Pos', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'No'}, 'shape': 'xxx'}, 23: {'id': 23, 'text': ',', 'lemma': ',', 'xpos': ',', 'upos': 'PUNCT', 'entity_iob': 'O', 'characterOffsetBegin': 97, 'characterOffsetEnd': 98, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'No', 'PunctType': 'Comm', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}}, 24: {'id': 24, 'text': 'but', 'lemma': 'but', 'xpos': 'CC', 'upos': 'CCONJ', 'entity_iob': 'O', 'characterOffsetBegin': 99, 'characterOffsetEnd': 102, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'ConjType': 'Coor', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxx'}, 25: {'id': 25, 'text': 'that', 'lemma': 'that', 'xpos': 'DT', 'upos': 'DET', 'entity_iob': 'O', 'characterOffsetBegin': 103, 'characterOffsetEnd': 107, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxxx'}, 26: {'id': 26, 'text': 'did', 'lemma': 'do', 'xpos': 'VBD', 'upos': 'VERB', 'entity_iob': 'O', 'characterOffsetBegin': 108, 'characterOffsetEnd': 111, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'VerbForm': 'Fin', 'Tense': 'Past', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'No'}, 'shape': 'xxx'}, 27: {'id': 27, 'text': 'not', 'lemma': 'not', 'xpos': 'RB', 'upos': 'ADV', 'entity_iob': 'O', 'characterOffsetBegin': 111, 'characterOffsetEnd': 114, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'Degree': 'Pos', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxx'}, 28: {'id': 28, 'text': 'stop', 'lemma': 'stop', 'xpos': 'VB', 'upos': 'VERB', 'entity_iob': 'O', 'characterOffsetBegin': 115, 'characterOffsetEnd': 119, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'VerbForm': 'Inf', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxxx'}, 29: {'id': 29, 'text': 'the', 'lemma': 'the', 'xpos': 'DT', 'upos': 'DET', 'entity_iob': 'O', 'characterOffsetBegin': 120, 'characterOffsetEnd': 123, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'Yes', 'Alpha': 'Yes', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxx'}, 30: {'id': 30, 'text': 'intrepid', 'lemma': 'intrepid', 'xpos': 'JJ', 'upos': 'ADJ', 'entity_iob': 'O', 'characterOffsetBegin': 124, 'characterOffsetEnd': 132, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'Degree': 'Pos', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'Yes'}, 'shape': 'xxxx'}, 31: {'id': 31, 'text': 'Nlp', 'lemma': 'Nlp', 'xpos': 'NNP', 'upos': 'PROPN', 'entity_iob': 'B', 'characterOffsetBegin': 133, 'characterOffsetEnd': 136, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'NounType': 'Prop', 'Number': 'Sing', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'No'}, 'shape': 'Xxx', 'entity': 'ORG'}, 32: {'id': 32, 'text': 'Lab', 'lemma': 'Lab', 'xpos': 'NNP', 'upos': 'PROPN', 'entity_iob': 'I', 'characterOffsetBegin': 136, 'characterOffsetEnd': 139, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'Yes', 'NounType': 'Prop', 'Number': 'Sing', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'No'}, 'shape': 'Xxx', 'entity': 'ORG'}, 33: {'id': 33, 'text': '.', 'lemma': '.', 'xpos': '.', 'upos': 'PUNCT', 'entity_iob': 'O', 'characterOffsetBegin': 139, 'characterOffsetEnd': 140, 'lang': 'en', 'features': {'Overt': 'Yes', 'Stop': 'No', 'Alpha': 'No', 'PunctType': 'Peri', 'Foreign': 'No'}, 'misc': {'SpaceAfter': 'No'}}}), ('sentences', {1: {'id': 1, 'tokenFrom': 1, 'tokenTo': 10, 'tokens': [1, 2, 3, 4, 5, 6, 7, 8, 9]}, 2: {'id': 2, 'tokenFrom': 10, 'tokenTo': 18, 'tokens': [10, 11, 12, 13, 14, 15, 16, 17]}, 3: {'id': 3, 'tokenFrom': 18, 'tokenTo': 34, 'tokens': [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]}}), ('dependencies', [{'style': 'universal', 'arcs': {1: [{'sentenceId': 1, 'label': 'det', 'governor': 3, 'dependent': 1}], 2: [{'sentenceId': 1, 'label': 'compound', 'governor': 3, 'dependent': 2}], 3: [{'sentenceId': 1, 'label': 'nsubj', 'governor': 4, 'dependent': 3}], 4: [{'sentenceId': 1, 'label': 'root', 'governor': 0, 'dependent': 4}], 5: [{'sentenceId': 1, 'label': 'det', 'governor': 8, 'dependent': 5}], 6: [{'sentenceId': 1, 'label': 'advmod', 'governor': 7, 'dependent': 6}], 7: [{'sentenceId': 1, 'label': 'amod', 'governor': 8, 'dependent': 7}], 8: [{'sentenceId': 1, 'label': 'attr', 'governor': 4, 'dependent': 8}], 9: [{'sentenceId': 1, 'label': 'punct', 'governor': 4, 'dependent': 9}], 10: [{'sentenceId': 2, 'label': 'nsubj', 'governor': 11, 'dependent': 10}], 11: [{'sentenceId': 2, 'label': 'root', 'governor': 0, 'dependent': 11}], 12: [{'sentenceId': 2, 'label': 'det', 'governor': 14, 'dependent': 12}], 13: [{'sentenceId': 2, 'label': 'amod', 'governor': 14, 'dependent': 13}], 14: [{'sentenceId': 2, 'label': 'dobj', 'governor': 11, 'dependent': 14}], 15: [{'sentenceId': 2, 'label': 'xcomp', 'governor': 11, 'dependent': 15}], 16: [{'sentenceId': 2, 'label': 'dobj', 'governor': 15, 'dependent': 16}], 17: [{'sentenceId': 2, 'label': 'punct', 'governor': 11, 'dependent': 17}], 18: [{'sentenceId': 3, 'label': 'nsubj', 'governor': 19, 'dependent': 18}], 19: [{'sentenceId': 3, 'label': 'root', 'governor': 0, 'dependent': 19}], 20: [{'sentenceId': 3, 'label': 'nsubj', 'governor': 21, 'dependent': 20}], 21: [{'sentenceId': 3, 'label': 'ccomp', 'governor': 19, 'dependent': 21}], 22: [{'sentenceId': 3, 'label': 'neg', 'governor': 21, 'dependent': 22}], 23: [{'sentenceId': 3, 'label': 'punct', 'governor': 19, 'dependent': 23}], 24: [{'sentenceId': 3, 'label': 'cc', 'governor': 19, 'dependent': 24}], 25: [{'sentenceId': 3, 'label': 'nsubj', 'governor': 28, 'dependent': 25}], 26: [{'sentenceId': 3, 'label': 'aux', 'governor': 28, 'dependent': 26}], 27: [{'sentenceId': 3, 'label': 'neg', 'governor': 28, 'dependent': 27}], 28: [{'sentenceId': 3, 'label': 'conj', 'governor': 19, 'dependent': 28}], 29: [{'sentenceId': 3, 'label': 'det', 'governor': 32, 'dependent': 29}], 30: [{'sentenceId': 3, 'label': 'amod', 'governor': 32, 'dependent': 30}], 31: [{'sentenceId': 3, 'label': 'compound', 'governor': 32, 'dependent': 31}], 32: [{'sentenceId': 3, 'label': 'dobj', 'governor': 28, 'dependent': 32}], 33: [{'sentenceId': 3, 'label': 'punct', 'governor': 28, 'dependent': 33}]}}]), ('coreferences', [{'id': 0, 'representative': {'tokens': [1, 2, 3], 'head': 3}, 'referents': [{'tokens': [16], 'head': 16}]}, {'id': 1, 'representative': {'tokens': [10], 'head': 10}, 'referents': [{'tokens': [20], 'head': 20}]}]), ('expressions', [{'id': 1, 'type': 'NP', 'head': 3, 'dependency': 'nsubj', 'tokens': [1, 2, 3]}, {'id': 2, 'type': 'NP', 'head': 8, 'dependency': 'attr', 'tokens': [5, 6, 7, 8]}, {'id': 3, 'type': 'NP', 'head': 14, 'dependency': 'dobj', 'tokens': [12, 13, 14]}, {'id': 4, 'type': 'NP', 'head': 32, 'dependency': 'dobj', 'tokens': [29, 30, 31, 32]}])])})])
        actual = conversion.to_conllu(j)
        expected = """# newdoc id = 1
# sent id = 1
1	The	the	DET	DT	Overt=Yes|Stop=Yes|Alpha=Yes|Foreign=No	3	det	_	_
2	Mueller	mueller	PROPN	NNP	Overt=Yes|Stop=No|Alpha=Yes|NounType=Prop|Number=Sing|Foreign=No	3	compound	_	_
3	Report	report	PROPN	NNP	Overt=Yes|Stop=No|Alpha=Yes|NounType=Prop|Number=Sing|Foreign=No	4	nsubj	_	_
4	is	be	VERB	VBZ	Overt=Yes|Stop=Yes|Alpha=Yes|VerbForm=Fin|Tense=Pres|Number=Sing|Person=3|Foreign=No	0	root	_	_
5	a	a	DET	DT	Overt=Yes|Stop=Yes|Alpha=Yes|Foreign=No	8	det	_	_
6	very	very	ADV	RB	Overt=Yes|Stop=Yes|Alpha=Yes|Degree=Pos|Foreign=No	7	advmod	_	_
7	long	long	ADJ	JJ	Overt=Yes|Stop=No|Alpha=Yes|Degree=Pos|Foreign=No	8	amod	_	_
8	report	report	NOUN	NN	Overt=Yes|Stop=No|Alpha=Yes|Number=Sing|Foreign=No	4	attr	_	_
9	.	.	PUNCT	.	Overt=Yes|Stop=No|Alpha=No|PunctType=Peri|Foreign=No	4	punct	_	_

# sent id = 2
1	We	we	PRON	PRP	Overt=Yes|Stop=Yes|Alpha=Yes|PronType=Prs|Foreign=No	2	nsubj	_	_
2	spent	spend	VERB	VBD	Overt=Yes|Stop=No|Alpha=Yes|VerbForm=Fin|Tense=Past|Foreign=No	0	root	_	_
3	a	a	DET	DT	Overt=Yes|Stop=Yes|Alpha=Yes|Foreign=No	5	det	_	_
4	long	long	ADJ	JJ	Overt=Yes|Stop=No|Alpha=Yes|Degree=Pos|Foreign=No	5	amod	_	_
5	time	time	NOUN	NN	Overt=Yes|Stop=No|Alpha=Yes|Number=Sing|Foreign=No	2	dobj	_	_
6	analyzing	analyze	VERB	VBG	Overt=Yes|Stop=No|Alpha=Yes|VerbForm=Part|Tense=Pres|Aspect=Prog|Foreign=No	2	xcomp	_	_
7	it	it	PRON	PRP	Overt=Yes|Stop=Yes|Alpha=Yes|PronType=Prs|Foreign=No	6	dobj	_	_
8	.	.	PUNCT	.	Overt=Yes|Stop=No|Alpha=No|PunctType=Peri|Foreign=No	2	punct	_	_

# sent id = 3
1	Trump	trump	PROPN	NNP	Overt=Yes|Stop=No|Alpha=Yes|NounType=Prop|Number=Sing|Foreign=No	2	nsubj	_	_
2	wishes	wish	VERB	VBZ	Overt=Yes|Stop=No|Alpha=Yes|VerbForm=Fin|Tense=Pres|Number=Sing|Person=3|Foreign=No	0	root	_	_
3	we	we	PRON	PRP	Overt=Yes|Stop=Yes|Alpha=Yes|PronType=Prs|Foreign=No	4	nsubj	_	_
4	did	do	VERB	VBD	Overt=Yes|Stop=Yes|Alpha=Yes|VerbForm=Fin|Tense=Past|Foreign=No	2	ccomp	_	_
5	not	not	ADV	RB	Overt=Yes|Stop=Yes|Alpha=Yes|Degree=Pos|Foreign=No	4	neg	_	_
6	,	,	PUNCT	,	Overt=Yes|Stop=No|Alpha=No|PunctType=Comm|Foreign=No	2	punct	_	_
7	but	but	CCONJ	CC	Overt=Yes|Stop=Yes|Alpha=Yes|ConjType=Coor|Foreign=No	2	cc	_	_
8	that	that	DET	DT	Overt=Yes|Stop=Yes|Alpha=Yes|Foreign=No	11	nsubj	_	_
9	did	do	VERB	VBD	Overt=Yes|Stop=Yes|Alpha=Yes|VerbForm=Fin|Tense=Past|Foreign=No	11	aux	_	_
10	not	not	ADV	RB	Overt=Yes|Stop=Yes|Alpha=Yes|Degree=Pos|Foreign=No	11	neg	_	_
11	stop	stop	VERB	VB	Overt=Yes|Stop=No|Alpha=Yes|VerbForm=Inf|Foreign=No	2	conj	_	_
12	the	the	DET	DT	Overt=Yes|Stop=Yes|Alpha=Yes|Foreign=No	15	det	_	_
13	intrepid	intrepid	ADJ	JJ	Overt=Yes|Stop=No|Alpha=Yes|Degree=Pos|Foreign=No	15	amod	_	_
14	Nlp	nlp	PROPN	NNP	Overt=Yes|Stop=No|Alpha=Yes|NounType=Prop|Number=Sing|Foreign=No	15	compound	_	_
15	Lab	lab	PROPN	NNP	Overt=Yes|Stop=No|Alpha=Yes|NounType=Prop|Number=Sing|Foreign=No	11	dobj	_	_
16	.	.	PUNCT	.	Overt=Yes|Stop=No|Alpha=No|PunctType=Peri|Foreign=No	11	punct	_	_"""
        assert expected == actual, actual

    def test_parse_conllu(self):
        text = """1	John	John	NNP	NNP	_	2	nsubj	_	_
        2	visited	visit	VBD	VBD	_	0	ROOT	_	_
        3	Spain	Spain	NNP	NNP	_	2	dobj	_	_
        4	.	.	.	.	_	2	punct	_	_

        1	His	he	PRP$	PRP$	_	2	nmod:poss	_	_
        2	visit	visit	NN	NN	_	3	nsubj	_	_
        3	went	go	VBD	VBD	_	0	ROOT	_	_
        4	well	well	RB	RB	_	3	advmod	_	_
        5	.	.	.	.	_	3	punct	_	_"""
        actual = conversion.parse_conllu(text)
        expected = OrderedDict([('meta', {'DC.conformsTo': '0.2.2', 'DC.source': '', 'DC.created': '2019-01-25T17:04:34', 'DC.date': '2019-01-25T17:04:34', 'DC.creator': '', 'DC.publisher': '', 'DC.title': '', 'DC.description': '', 'DC.identifier': '', 'DC.language': '', 'DC.subject': '', 'DC.contributors': '', 'DC.type': '', 'DC.format': '', 'DC.relation': '', 'DC.coverage': '', 'DC.rights': '', 'counts': {}}), ('conll', {}), ('documents', {1: OrderedDict([('meta', {'DC.conformsTo': '0.2.2', 'DC.source': '', 'DC.created': '2019-01-25T17:04:34', 'DC.date': '2019-01-25T17:04:34', 'DC.creator': '', 'DC.publisher': '', 'DC.title': '', 'DC.description': '', 'DC.identifier': '', 'DC.language': '', 'DC.subject': '', 'DC.contributors': '', 'DC.type': '', 'DC.format': '', 'DC.relation': '', 'DC.coverage': '', 'DC.rights': '', 'counts': {}}), ('id', 1), ('conllId', ''), ('text', ''), ('tokenList', {1: {'id': 1, 'text': 'John', 'lemma': 'John', 'upos': 'NNP', 'xpos': 'NNP', 'features': OrderedDict([('Overt', 'Yes')])}, 2: {'id': 2, 'text': 'visited', 'lemma': 'visit', 'upos': 'VBD', 'xpos': 'VBD', 'features': OrderedDict([('Overt', 'Yes')])}, 3: {'id': 3, 'text': 'Spain', 'lemma': 'Spain', 'upos': 'NNP', 'xpos': 'NNP', 'features': OrderedDict([('Overt', 'Yes')])}, 4: {'id': 4, 'text': '.', 'lemma': '.', 'upos': '.', 'xpos': '.', 'features': OrderedDict([('Overt', 'Yes')])}, 5: {'id': 5, 'text': 'His', 'lemma': 'he', 'upos': 'PRP$', 'xpos': 'PRP$', 'features': OrderedDict([('Overt', 'Yes')])}, 6: {'id': 6, 'text': 'visit', 'lemma': 'visit', 'upos': 'NN', 'xpos': 'NN', 'features': OrderedDict([('Overt', 'Yes')])}, 7: {'id': 7, 'text': 'went', 'lemma': 'go', 'upos': 'VBD', 'xpos': 'VBD', 'features': OrderedDict([('Overt', 'Yes')])}, 8: {'id': 8, 'text': 'well', 'lemma': 'well', 'upos': 'RB', 'xpos': 'RB', 'features': OrderedDict([('Overt', 'Yes')])}, 9: {'id': 9, 'text': '.', 'lemma': '.', 'upos': '.', 'xpos': '.', 'features': OrderedDict([('Overt', 'Yes')])}}), ('clauses', {}), ('sentences', {0: {'id': 0, 'conllId': '', 'tokenFrom': 1, 'tokenTo': 5, 'tokens': [1, 2, 3, 4]}, 1: {'id': 1, 'conllId': '', 'tokenFrom': 5, 'tokenTo': 10, 'tokens': [5, 6, 7, 8, 9]}}), ('paragraphs', {}), ('dependencies', [{'style': 'universal', 'arcs': {1: [{'label': 'nsubj', 'governor': 2, 'dependent': 1}], 2: [{'label': 'root', 'governor': 0, 'dependent': 2}], 3: [{'label': 'dobj', 'governor': 2, 'dependent': 3}], 4: [{'label': 'punct', 'governor': 2, 'dependent': 4}], 5: [{'label': 'nmod:poss', 'governor': 6, 'dependent': 5}], 6: [{'label': 'nsubj', 'governor': 7, 'dependent': 6}], 7: [{'label': 'root', 'governor': 0, 'dependent': 7}], 8: [{'label': 'advmod', 'governor': 7, 'dependent': 8}], 9: [{'label': 'punct', 'governor': 7, 'dependent': 9}]}}, {'style': 'enhanced', 'arcs': {}}]), ('coreferences', []), ('constituents', []), ('expressions', [])])})])
        assert expected == actual, actual

    def test_conllu2json_enhanced_dependencies(self):
        text = """1    They     they    PRON    PRP    Case=Nom|Number=Plur               2    nsubj    2:nsubj|4:nsubj
2    buy      buy     VERB    VBP    Number=Plur|Person=3|Tense=Pres    0    root     0:root
3    and      and     CONJ    CC     _                                  4    cc       4:cc
3.1    they    they    PRON    PRP    _    _    _     4:nsbj|1:elip
4    sell     sell    VERB    VBP    Number=Plur|Person=3|Tense=Pres    2    conj     0:root|2:conj
5    books    book    NOUN    NNS    Number=Plur                        2    obj      2:obj|4:obj
6    .        .       PUNCT   .      _                                  2    punct    2:punct"""
        actual = conversion.parse_conllu(text)
        expected = OrderedDict([('meta', {'DC.conformsTo': '0.2.2', 'DC.source': '', 'DC.created': '2019-01-25T17:04:34', 'DC.date': '2019-01-25T17:04:34', 'DC.creator': '', 'DC.publisher': '', 'DC.title': '', 'DC.description': '', 'DC.identifier': '', 'DC.language': '', 'DC.subject': '', 'DC.contributors': '', 'DC.type': '', 'DC.format': '', 'DC.relation': '', 'DC.coverage': '', 'DC.rights': '', 'counts': {}}), ('conll', {}), ('documents', {1: OrderedDict([('meta', {'DC.conformsTo': '0.2.2', 'DC.source': '', 'DC.created': '2019-01-25T17:04:34', 'DC.date': '2019-01-25T17:04:34', 'DC.creator': '', 'DC.publisher': '', 'DC.title': '', 'DC.description': '', 'DC.identifier': '', 'DC.language': '', 'DC.subject': '', 'DC.contributors': '', 'DC.type': '', 'DC.format': '', 'DC.relation': '', 'DC.coverage': '', 'DC.rights': '', 'counts': {}}), ('id', 1), ('conllId', ''), ('text', ''), ('tokenList', {1: {'id': 1, 'text': 'They', 'lemma': 'they', 'upos': 'PRON', 'xpos': 'PRP', 'features': OrderedDict([('Overt', 'Yes'), ('Case', 'Nom'), ('Number', 'Plur')])}, 2: {'id': 2, 'text': 'buy', 'lemma': 'buy', 'upos': 'VERB', 'xpos': 'VBP', 'features': OrderedDict([('Overt', 'Yes'), ('Number', 'Plur'), ('Person', '3'), ('Tense', 'Pres')])}, 3: {'id': 3, 'text': 'and', 'lemma': 'and', 'upos': 'CONJ', 'xpos': 'CC', 'features': OrderedDict([('Overt', 'Yes')])}, 4: {'id': 4, 'text': 'they', 'lemma': 'they', 'upos': 'PRON', 'xpos': 'PRP', 'features': OrderedDict([('Overt', 'No')])}, 5: {'id': 5, 'text': 'sell', 'lemma': 'sell', 'upos': 'VERB', 'xpos': 'VBP', 'features': OrderedDict([('Overt', 'Yes'), ('Number', 'Plur'), ('Person', '3'), ('Tense', 'Pres')])}, 6: {'id': 6, 'text': 'books', 'lemma': 'book', 'upos': 'NOUN', 'xpos': 'NNS', 'features': OrderedDict([('Overt', 'Yes'), ('Number', 'Plur')])}, 7: {'id': 7, 'text': '.', 'lemma': '.', 'upos': 'PUNCT', 'xpos': '.', 'features': OrderedDict([('Overt', 'Yes')])}}), ('clauses', {}), ('sentences', {0: {'id': 0, 'conllId': '', 'tokenFrom': 1, 'tokenTo': 8, 'tokens': [1, 2, 3, 4, 5, 6, 7]}}), ('paragraphs', {}), ('dependencies', [{'style': 'universal', 'arcs': {1: [{'label': 'nsubj', 'governor': 2, 'dependent': 1}], 2: [{'label': 'root', 'governor': 0, 'dependent': 2}], 3: [{'label': 'cc', 'governor': 5, 'dependent': 3}], 5: [{'label': 'conj', 'governor': 2, 'dependent': 5}], 6: [{'label': 'obj', 'governor': 2, 'dependent': 6}], 7: [{'label': 'punct', 'governor': 2, 'dependent': 7}]}}, {'style': 'enhanced', 'arcs': {1: [{'label': 'nsubj', 'governor': 2, 'dependent': 1}, {'label': 'nsubj', 'governor': 5, 'dependent': 1}], 2: [{'label': 'root', 'governor': 0, 'dependent': 2}], 3: [{'label': 'cc', 'governor': 5, 'dependent': 3}], 4: [{'label': 'nsbj', 'governor': 5, 'dependent': 4}, {'label': 'elip', 'governor': 1, 'dependent': 4}], 5: [{'label': 'root', 'governor': 0, 'dependent': 5}, {'label': 'conj', 'governor': 2, 'dependent': 5}], 6: [{'label': 'obj', 'governor': 2, 'dependent': 6}, {'label': 'obj', 'governor': 5, 'dependent': 6}], 7: [{'label': 'punct', 'governor': 2, 'dependent': 7}]}}]), ('coreferences', []), ('constituents', []), ('expressions', [])])})])
        assert expected == actual, actual

    def test_conllu2json_features(self):
        text = """1    Då      då     ADV      AB                    _
2    var     vara   VERB     VB.PRET.ACT           Tense=Past|Voice=Act
3    han     han    PRON     PN.UTR.SIN.DEF.NOM    Case=Nom|Definite=Def|Gender=Com|Number=Sing
4    elva    elva   NUM      RG.NOM                Case=Nom|NumType=Card
5    år      år     NOUN     NN.NEU.PLU.IND.NOM    Case=Nom|Definite=Ind|Gender=Neut|Number=Plur
6    .       .      PUNCT    DL.MAD                _"""
        actual = conversion.parse_conllu(text)
        expected = OrderedDict([('meta', {'DC.conformsTo': '0.2.2', 'DC.source': '', 'DC.created': '2019-01-25T17:04:34', 'DC.date': '2019-01-25T17:04:34', 'DC.creator': '', 'DC.publisher': '', 'DC.title': '', 'DC.description': '', 'DC.identifier': '', 'DC.language': '', 'DC.subject': '', 'DC.contributors': '', 'DC.type': '', 'DC.format': '', 'DC.relation': '', 'DC.coverage': '', 'DC.rights': '', 'counts': {}}), ('conll', {}), ('documents', {1: OrderedDict([('meta', {'DC.conformsTo': '0.2.2', 'DC.source': '', 'DC.created': '2019-01-25T17:04:34', 'DC.date': '2019-01-25T17:04:34', 'DC.creator': '', 'DC.publisher': '', 'DC.title': '', 'DC.description': '', 'DC.identifier': '', 'DC.language': '', 'DC.subject': '', 'DC.contributors': '', 'DC.type': '', 'DC.format': '', 'DC.relation': '', 'DC.coverage': '', 'DC.rights': '', 'counts': {}}), ('id', 1), ('conllId', ''), ('text', ''), ('tokenList', {1: {'id': 1, 'text': 'Då', 'lemma': 'då', 'upos': 'ADV', 'xpos': 'AB', 'features': OrderedDict([('Overt', 'Yes')])}, 2: {'id': 2, 'text': 'var', 'lemma': 'vara', 'upos': 'VERB', 'xpos': 'VB.PRET.ACT', 'features': OrderedDict([('Overt', 'Yes'), ('Tense', 'Past'), ('Voice', 'Act')])}, 3: {'id': 3, 'text': 'han', 'lemma': 'han', 'upos': 'PRON', 'xpos': 'PN.UTR.SIN.DEF.NOM', 'features': OrderedDict([('Overt', 'Yes'), ('Case', 'Nom'), ('Definite', 'Def'), ('Gender', 'Com'), ('Number', 'Sing')])}, 4: {'id': 4, 'text': 'elva', 'lemma': 'elva', 'upos': 'NUM', 'xpos': 'RG.NOM', 'features': OrderedDict([('Overt', 'Yes'), ('Case', 'Nom'), ('NumType', 'Card')])}, 5: {'id': 5, 'text': 'år', 'lemma': 'år', 'upos': 'NOUN', 'xpos': 'NN.NEU.PLU.IND.NOM', 'features': OrderedDict([('Overt', 'Yes'), ('Case', 'Nom'), ('Definite', 'Ind'), ('Gender', 'Neut'), ('Number', 'Plur')])}, 6: {'id': 6, 'text': '.', 'lemma': '.', 'upos': 'PUNCT', 'xpos': 'DL.MAD', 'features': OrderedDict([('Overt', 'Yes')])}}), ('clauses', {}), ('sentences', {0: {'id': 0, 'conllId': '', 'tokenFrom': 1, 'tokenTo': 7, 'tokens': [1, 2, 3, 4, 5, 6]}}), ('paragraphs', {}), ('dependencies', [{'style': 'universal', 'arcs': {}}, {'style': 'enhanced', 'arcs': {}}]), ('coreferences', []), ('constituents', []), ('expressions', [])])})])
        assert expected == actual, actual

    def test_conllu2json_misc(self):
        text = """1     He        he        PRON    PRP     Case=Nom|Number=Sing|Person=3     2   nsubj   _   _
2     is        be        VERB    VBZ     Number=Sing|Person=3|Tense=Pres   0   root    _   _
3     in        in        ADP     IN      _                                 6   case    _   _
4     the       the       DET     DT      Definite=Def|PronType=Art         6   det     _   _
5     United    unite     VERB    VBD     Tense=Past|VerbForm=Part          6   amod    _   _
6     Kingdom   kingdom   NOUN    NN      Number=Sing                       2   nmod    _   _
7     (         (         PUNCT   -LRB-   _                                 8   punct   _   SpaceAfter=No
8     UK        UK        PROPN   NNP     Number=Sing                       6   appos   _   SpaceAfter=No
9     )         )         PUNCT   -RRB-   _                                 8   punct   _   SpaceAfter=No
10    .         .         PUNCT   .       _                                 2   punct   _   _"""
        actual = conversion.parse_conllu(text)
        expected = OrderedDict([('meta', {'DC.conformsTo': '0.2.2', 'DC.source': '', 'DC.created': '2019-01-25T17:04:34', 'DC.date': '2019-01-25T17:04:34', 'DC.creator': '', 'DC.publisher': '', 'DC.title': '', 'DC.description': '', 'DC.identifier': '', 'DC.language': '', 'DC.subject': '', 'DC.contributors': '', 'DC.type': '', 'DC.format': '', 'DC.relation': '', 'DC.coverage': '', 'DC.rights': '', 'counts': {}}), ('conll', {}), ('documents', {1: OrderedDict([('meta', {'DC.conformsTo': '0.2.2', 'DC.source': '', 'DC.created': '2019-01-25T17:04:34', 'DC.date': '2019-01-25T17:04:34', 'DC.creator': '', 'DC.publisher': '', 'DC.title': '', 'DC.description': '', 'DC.identifier': '', 'DC.language': '', 'DC.subject': '', 'DC.contributors': '', 'DC.type': '', 'DC.format': '', 'DC.relation': '', 'DC.coverage': '', 'DC.rights': '', 'counts': {}}), ('id', 1), ('conllId', ''), ('text', ''), ('tokenList', {1: {'id': 1, 'text': 'He', 'lemma': 'he', 'upos': 'PRON', 'xpos': 'PRP', 'features': OrderedDict([('Overt', 'Yes'), ('Case', 'Nom'), ('Number', 'Sing'), ('Person', '3')])}, 2: {'id': 2, 'text': 'is', 'lemma': 'be', 'upos': 'VERB', 'xpos': 'VBZ', 'features': OrderedDict([('Overt', 'Yes'), ('Number', 'Sing'), ('Person', '3'), ('Tense', 'Pres')])}, 3: {'id': 3, 'text': 'in', 'lemma': 'in', 'upos': 'ADP', 'xpos': 'IN', 'features': OrderedDict([('Overt', 'Yes')])}, 4: {'id': 4, 'text': 'the', 'lemma': 'the', 'upos': 'DET', 'xpos': 'DT', 'features': OrderedDict([('Overt', 'Yes'), ('Definite', 'Def'), ('PronType', 'Art')])}, 5: {'id': 5, 'text': 'United', 'lemma': 'unite', 'upos': 'VERB', 'xpos': 'VBD', 'features': OrderedDict([('Overt', 'Yes'), ('Tense', 'Past'), ('VerbForm', 'Part')])}, 6: {'id': 6, 'text': 'Kingdom', 'lemma': 'kingdom', 'upos': 'NOUN', 'xpos': 'NN', 'features': OrderedDict([('Overt', 'Yes'), ('Number', 'Sing')])}, 7: {'id': 7, 'text': '(', 'lemma': '(', 'upos': 'PUNCT', 'xpos': '-LRB-', 'features': OrderedDict([('Overt', 'Yes')]), 'misc': OrderedDict([('SpaceAfter', 'No')])}, 8: {'id': 8, 'text': 'UK', 'lemma': 'UK', 'upos': 'PROPN', 'xpos': 'NNP', 'features': OrderedDict([('Overt', 'Yes'), ('Number', 'Sing')]), 'misc': OrderedDict([('SpaceAfter', 'No')])}, 9: {'id': 9, 'text': ')', 'lemma': ')', 'upos': 'PUNCT', 'xpos': '-RRB-', 'features': OrderedDict([('Overt', 'Yes')]), 'misc': OrderedDict([('SpaceAfter', 'No')])}, 10: {'id': 10, 'text': '.', 'lemma': '.', 'upos': 'PUNCT', 'xpos': '.', 'features': OrderedDict([('Overt', 'Yes')])}}), ('clauses', {}), ('sentences', {0: {'id': 0, 'conllId': '', 'tokenFrom': 1, 'tokenTo': 11, 'tokens': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}}), ('paragraphs', {}), ('dependencies', [{'style': 'universal', 'arcs': {1: [{'label': 'nsubj', 'governor': 2, 'dependent': 1}], 2: [{'label': 'root', 'governor': 0, 'dependent': 2}], 3: [{'label': 'case', 'governor': 6, 'dependent': 3}], 4: [{'label': 'det', 'governor': 6, 'dependent': 4}], 5: [{'label': 'amod', 'governor': 6, 'dependent': 5}], 6: [{'label': 'nmod', 'governor': 2, 'dependent': 6}], 7: [{'label': 'punct', 'governor': 8, 'dependent': 7}], 8: [{'label': 'appos', 'governor': 6, 'dependent': 8}], 9: [{'label': 'punct', 'governor': 8, 'dependent': 9}], 10: [{'label': 'punct', 'governor': 2, 'dependent': 10}]}}, {'style': 'enhanced', 'arcs': {}}]), ('coreferences', []), ('constituents', []), ('expressions', [])])})])
        assert expected == actual, actual

    def test_conllu2json_ranges(self):
        text = """1     I         I      PRON    PRP   Case=Nom|Number=Sing|Person=1     2   nsubj
2-3   haven't   _      _       _     _                                 _   _
2     have      have   VERB    VBP    Number=Sing|Person=1|Tense=Pres   0   root
3     not       not    PART    RB    Negative=Neg                      2   neg
4     a         a      DET     DT    Definite=Ind|PronType=Art         5   det
5     clue      clue   NOUN    NN    Number=Sing                       2   dobj
6     .         .      PUNCT   .     _                                 2   punct"""
        actual = conversion.parse_conllu(text)
        expected = OrderedDict([('meta', {'DC.conformsTo': '0.2.2', 'DC.source': '', 'DC.created': '2019-01-25T17:04:34', 'DC.date': '2019-01-25T17:04:34', 'DC.creator': '', 'DC.publisher': '', 'DC.title': '', 'DC.description': '', 'DC.identifier': '', 'DC.language': '', 'DC.subject': '', 'DC.contributors': '', 'DC.type': '', 'DC.format': '', 'DC.relation': '', 'DC.coverage': '', 'DC.rights': '', 'counts': {}}), ('conll', {}), ('documents', {1: OrderedDict([('meta', {'DC.conformsTo': '0.2.2', 'DC.source': '', 'DC.created': '2019-01-25T17:04:34', 'DC.date': '2019-01-25T17:04:34', 'DC.creator': '', 'DC.publisher': '', 'DC.title': '', 'DC.description': '', 'DC.identifier': '', 'DC.language': '', 'DC.subject': '', 'DC.contributors': '', 'DC.type': '', 'DC.format': '', 'DC.relation': '', 'DC.coverage': '', 'DC.rights': '', 'counts': {}}), ('id', 1), ('conllId', ''), ('text', ''), ('tokenList', {1: {'id': 1, 'text': 'I', 'lemma': 'I', 'upos': 'PRON', 'xpos': 'PRP', 'features': OrderedDict([('Overt', 'Yes'), ('Case', 'Nom'), ('Number', 'Sing'), ('Person', '1')])}, 2: {'id': 2, 'text': 'have', 'lemma': 'have', 'upos': 'VERB', 'xpos': 'VBP', 'features': OrderedDict([('Overt', 'Yes'), ('Number', 'Sing'), ('Person', '1'), ('Tense', 'Pres')])}, 3: {'id': 3, 'text': 'not', 'lemma': 'not', 'upos': 'PART', 'xpos': 'RB', 'features': OrderedDict([('Overt', 'Yes'), ('Negative', 'Neg')])}, 4: {'id': 4, 'text': 'a', 'lemma': 'a', 'upos': 'DET', 'xpos': 'DT', 'features': OrderedDict([('Overt', 'Yes'), ('Definite', 'Ind'), ('PronType', 'Art')])}, 5: {'id': 5, 'text': 'clue', 'lemma': 'clue', 'upos': 'NOUN', 'xpos': 'NN', 'features': OrderedDict([('Overt', 'Yes'), ('Number', 'Sing')])}, 6: {'id': 6, 'text': '.', 'lemma': '.', 'upos': 'PUNCT', 'xpos': '.', 'features': OrderedDict([('Overt', 'Yes')])}}), ('clauses', {}), ('sentences', {0: {'id': 0, 'conllId': '', 'tokenFrom': 1, 'tokenTo': 8, 'tokens': [1, 2, 3, 4, 5, 6]}}), ('paragraphs', {}), ('dependencies', [{'style': 'universal', 'arcs': {1: [{'label': 'nsubj', 'governor': 2, 'dependent': 1}], 2: [{'label': 'root', 'governor': 0, 'dependent': 2}], 3: [{'label': 'neg', 'governor': 2, 'dependent': 3}], 4: [{'label': 'det', 'governor': 5, 'dependent': 4}], 5: [{'label': 'dobj', 'governor': 2, 'dependent': 5}], 6: [{'label': 'punct', 'governor': 2, 'dependent': 6}]}}, {'style': 'enhanced', 'arcs': {}}]), ('coreferences', []), ('constituents', []), ('expressions', [{'id': 1, 'type': 'conll-range', 'tokens': [2, 3]}])])})])
        assert expected == actual, actual

    def test_conllu2json_multiple_sentences(self):
        text = """1	John	John	NNP	NNP	_	2	compound	_	_
2	Smith	Smith	NNP	NNP	_	3	nsubj	_	_
3	visited	visit	VBD	VBD	_	0	ROOT	_	_
4	Spain	Spain	NNP	NNP	_	3	dobj	_	_
5	.	.	.	.	_	3	punct	_	_

1	His	he	PRP$	PRP$	_	2	nmod:poss	_	_
2	visit	visit	NN	NN	_	3	nsubj	_	_
3	went	go	VBD	VBD	_	0	ROOT	_	_
4	well	well	RB	RB	_	3	advmod	_	_
5	.	.	.	.	_	3	punct	_	_
"""
        actual = conversion.parse_conllu(text)
        expected = OrderedDict([('meta', {'DC.conformsTo': '0.2.2', 'DC.source': '', 'DC.created': '2019-01-25T17:04:34', 'DC.date': '2019-01-25T17:04:34', 'DC.creator': '', 'DC.publisher': '', 'DC.title': '', 'DC.description': '', 'DC.identifier': '', 'DC.language': '', 'DC.subject': '', 'DC.contributors': '', 'DC.type': '', 'DC.format': '', 'DC.relation': '', 'DC.coverage': '', 'DC.rights': '', 'counts': {}}), ('conll', {}), ('documents', {1: OrderedDict([('meta', {'DC.conformsTo': '0.2.2', 'DC.source': '', 'DC.created': '2019-01-25T17:04:34', 'DC.date': '2019-01-25T17:04:34', 'DC.creator': '', 'DC.publisher': '', 'DC.title': '', 'DC.description': '', 'DC.identifier': '', 'DC.language': '', 'DC.subject': '', 'DC.contributors': '', 'DC.type': '', 'DC.format': '', 'DC.relation': '', 'DC.coverage': '', 'DC.rights': '', 'counts': {}}), ('id', 1), ('conllId', ''), ('text', ''), ('tokenList', {1: {'id': 1, 'text': 'John', 'lemma': 'John', 'upos': 'NNP', 'xpos': 'NNP', 'features': OrderedDict([('Overt', 'Yes')])}, 2: {'id': 2, 'text': 'Smith', 'lemma': 'Smith', 'upos': 'NNP', 'xpos': 'NNP', 'features': OrderedDict([('Overt', 'Yes')])}, 3: {'id': 3, 'text': 'visited', 'lemma': 'visit', 'upos': 'VBD', 'xpos': 'VBD', 'features': OrderedDict([('Overt', 'Yes')])}, 4: {'id': 4, 'text': 'Spain', 'lemma': 'Spain', 'upos': 'NNP', 'xpos': 'NNP', 'features': OrderedDict([('Overt', 'Yes')])}, 5: {'id': 5, 'text': '.', 'lemma': '.', 'upos': '.', 'xpos': '.', 'features': OrderedDict([('Overt', 'Yes')])}, 6: {'id': 6, 'text': 'His', 'lemma': 'he', 'upos': 'PRP$', 'xpos': 'PRP$', 'features': OrderedDict([('Overt', 'Yes')])}, 7: {'id': 7, 'text': 'visit', 'lemma': 'visit', 'upos': 'NN', 'xpos': 'NN', 'features': OrderedDict([('Overt', 'Yes')])}, 8: {'id': 8, 'text': 'went', 'lemma': 'go', 'upos': 'VBD', 'xpos': 'VBD', 'features': OrderedDict([('Overt', 'Yes')])}, 9: {'id': 9, 'text': 'well', 'lemma': 'well', 'upos': 'RB', 'xpos': 'RB', 'features': OrderedDict([('Overt', 'Yes')])}, 10: {'id': 10, 'text': '.', 'lemma': '.', 'upos': '.', 'xpos': '.', 'features': OrderedDict([('Overt', 'Yes')])}}), ('clauses', {}), ('sentences', {0: {'id': 0, 'conllId': '', 'tokenFrom': 1, 'tokenTo': 6, 'tokens': [1, 2, 3, 4, 5]}, 1: {'id': 1, 'conllId': '', 'tokenFrom': 6, 'tokenTo': 11, 'tokens': [6, 7, 8, 9, 10]}}), ('paragraphs', {}), ('dependencies', [{'style': 'universal', 'arcs': {1: [{'label': 'compound', 'governor': 2, 'dependent': 1}], 2: [{'label': 'nsubj', 'governor': 3, 'dependent': 2}], 3: [{'label': 'root', 'governor': 0, 'dependent': 3}], 4: [{'label': 'dobj', 'governor': 3, 'dependent': 4}], 5: [{'label': 'punct', 'governor': 3, 'dependent': 5}], 6: [{'label': 'nmod:poss', 'governor': 7, 'dependent': 6}], 7: [{'label': 'nsubj', 'governor': 8, 'dependent': 7}], 8: [{'label': 'root', 'governor': 0, 'dependent': 8}], 9: [{'label': 'advmod', 'governor': 8, 'dependent': 9}], 10: [{'label': 'punct', 'governor': 8, 'dependent': 10}]}}, {'style': 'enhanced', 'arcs': {}}]), ('coreferences', []), ('constituents', []), ('expressions', [])])})])
        assert expected == actual, actual

    def test_conllu2json_sentence_ids(self):
        pass

    def test_conllu2json_doc_par_ids(self):
        pass

    def test_conllu2json_doc_par_no_ids(self):
        pass

    def test_conllu2json_newpar_mid_sentence(self):
        pass

    def test_conllu2json_coref(self):
        pass

    def test_conllu2json_syntax(self):
        pass
