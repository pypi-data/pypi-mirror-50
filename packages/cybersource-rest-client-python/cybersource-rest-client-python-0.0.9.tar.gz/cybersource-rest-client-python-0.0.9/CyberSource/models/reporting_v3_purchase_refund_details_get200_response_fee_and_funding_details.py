# coding: utf-8

"""
    CyberSource Merged Spec

    All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'str',
        'interchange_per_item_fee': 'str',
        'discount_percentage': 'str',
        'discount_amount': 'str',
        'discount_per_item_fee': 'str',
        'total_fee': 'str',
        'fee_currency': 'str',
        'dues_assessments': 'str',
        'funding_amount': 'str',
        'funding_currency': 'str'
    }

    attribute_map = {
        'request_id': 'requestId',
        'interchange_per_item_fee': 'interchangePerItemFee',
        'discount_percentage': 'discountPercentage',
        'discount_amount': 'discountAmount',
        'discount_per_item_fee': 'discountPerItemFee',
        'total_fee': 'totalFee',
        'fee_currency': 'feeCurrency',
        'dues_assessments': 'duesAssessments',
        'funding_amount': 'fundingAmount',
        'funding_currency': 'fundingCurrency'
    }

    def __init__(self, request_id=None, interchange_per_item_fee=None, discount_percentage=None, discount_amount=None, discount_per_item_fee=None, total_fee=None, fee_currency=None, dues_assessments=None, funding_amount=None, funding_currency=None):
        """
        ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails - a model defined in Swagger
        """

        self._request_id = None
        self._interchange_per_item_fee = None
        self._discount_percentage = None
        self._discount_amount = None
        self._discount_per_item_fee = None
        self._total_fee = None
        self._fee_currency = None
        self._dues_assessments = None
        self._funding_amount = None
        self._funding_currency = None

        if request_id is not None:
          self.request_id = request_id
        if interchange_per_item_fee is not None:
          self.interchange_per_item_fee = interchange_per_item_fee
        if discount_percentage is not None:
          self.discount_percentage = discount_percentage
        if discount_amount is not None:
          self.discount_amount = discount_amount
        if discount_per_item_fee is not None:
          self.discount_per_item_fee = discount_per_item_fee
        if total_fee is not None:
          self.total_fee = total_fee
        if fee_currency is not None:
          self.fee_currency = fee_currency
        if dues_assessments is not None:
          self.dues_assessments = dues_assessments
        if funding_amount is not None:
          self.funding_amount = funding_amount
        if funding_currency is not None:
          self.funding_currency = funding_currency

    @property
    def request_id(self):
        """
        Gets the request_id of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        An unique identification number assigned by CyberSource to identify the submitted request.

        :return: The request_id of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """
        Sets the request_id of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        An unique identification number assigned by CyberSource to identify the submitted request.

        :param request_id: The request_id of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        :type: str
        """
        if request_id is not None and len(request_id) > 26:
            raise ValueError("Invalid value for `request_id`, length must be less than or equal to `26`")

        self._request_id = request_id

    @property
    def interchange_per_item_fee(self):
        """
        Gets the interchange_per_item_fee of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        interchange Per Item Fee

        :return: The interchange_per_item_fee of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        :rtype: str
        """
        return self._interchange_per_item_fee

    @interchange_per_item_fee.setter
    def interchange_per_item_fee(self, interchange_per_item_fee):
        """
        Sets the interchange_per_item_fee of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        interchange Per Item Fee

        :param interchange_per_item_fee: The interchange_per_item_fee of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        :type: str
        """

        self._interchange_per_item_fee = interchange_per_item_fee

    @property
    def discount_percentage(self):
        """
        Gets the discount_percentage of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        Discount Percentage

        :return: The discount_percentage of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        :rtype: str
        """
        return self._discount_percentage

    @discount_percentage.setter
    def discount_percentage(self, discount_percentage):
        """
        Sets the discount_percentage of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        Discount Percentage

        :param discount_percentage: The discount_percentage of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        :type: str
        """

        self._discount_percentage = discount_percentage

    @property
    def discount_amount(self):
        """
        Gets the discount_amount of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        Discount Amount

        :return: The discount_amount of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        :rtype: str
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """
        Sets the discount_amount of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        Discount Amount

        :param discount_amount: The discount_amount of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        :type: str
        """

        self._discount_amount = discount_amount

    @property
    def discount_per_item_fee(self):
        """
        Gets the discount_per_item_fee of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        Discount Per Item Fee

        :return: The discount_per_item_fee of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        :rtype: str
        """
        return self._discount_per_item_fee

    @discount_per_item_fee.setter
    def discount_per_item_fee(self, discount_per_item_fee):
        """
        Sets the discount_per_item_fee of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        Discount Per Item Fee

        :param discount_per_item_fee: The discount_per_item_fee of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        :type: str
        """

        self._discount_per_item_fee = discount_per_item_fee

    @property
    def total_fee(self):
        """
        Gets the total_fee of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        Total Fee

        :return: The total_fee of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        :rtype: str
        """
        return self._total_fee

    @total_fee.setter
    def total_fee(self, total_fee):
        """
        Sets the total_fee of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        Total Fee

        :param total_fee: The total_fee of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        :type: str
        """

        self._total_fee = total_fee

    @property
    def fee_currency(self):
        """
        Gets the fee_currency of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        Fee Currency

        :return: The fee_currency of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        :rtype: str
        """
        return self._fee_currency

    @fee_currency.setter
    def fee_currency(self, fee_currency):
        """
        Sets the fee_currency of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        Fee Currency

        :param fee_currency: The fee_currency of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        :type: str
        """

        self._fee_currency = fee_currency

    @property
    def dues_assessments(self):
        """
        Gets the dues_assessments of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        Dues Assessments

        :return: The dues_assessments of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        :rtype: str
        """
        return self._dues_assessments

    @dues_assessments.setter
    def dues_assessments(self, dues_assessments):
        """
        Sets the dues_assessments of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        Dues Assessments

        :param dues_assessments: The dues_assessments of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        :type: str
        """

        self._dues_assessments = dues_assessments

    @property
    def funding_amount(self):
        """
        Gets the funding_amount of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        Funding Amount

        :return: The funding_amount of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        :rtype: str
        """
        return self._funding_amount

    @funding_amount.setter
    def funding_amount(self, funding_amount):
        """
        Sets the funding_amount of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        Funding Amount

        :param funding_amount: The funding_amount of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        :type: str
        """

        self._funding_amount = funding_amount

    @property
    def funding_currency(self):
        """
        Gets the funding_currency of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        Funding Currency (ISO 4217)

        :return: The funding_currency of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        :rtype: str
        """
        return self._funding_currency

    @funding_currency.setter
    def funding_currency(self, funding_currency):
        """
        Sets the funding_currency of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        Funding Currency (ISO 4217)

        :param funding_currency: The funding_currency of this ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails.
        :type: str
        """

        self._funding_currency = funding_currency

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReportingV3PurchaseRefundDetailsGet200ResponseFeeAndFundingDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
