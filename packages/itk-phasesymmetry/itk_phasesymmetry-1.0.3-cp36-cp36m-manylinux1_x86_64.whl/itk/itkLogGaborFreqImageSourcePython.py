# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkLogGaborFreqImageSourcePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkLogGaborFreqImageSourcePython', [dirname(__file__)])
        except ImportError:
            import _itkLogGaborFreqImageSourcePython
            return _itkLogGaborFreqImageSourcePython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkLogGaborFreqImageSourcePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkLogGaborFreqImageSourcePython = swig_import_helper()
    del swig_import_helper
else:
    import _itkLogGaborFreqImageSourcePython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkGenerateImageSourcePython
import itkPointPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import pyBasePython
import itkVectorPython
import itkFixedArrayPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkImageSourcePython
import ITKCommonBasePython
import itkImageSourceCommonPython
import itkImagePython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkRGBPixelPython
import itkSymmetricSecondRankTensorPython
import itkImageRegionPython
import itkRGBAPixelPython
import itkVectorImagePython
import itkVariableLengthVectorPython

def itkLogGaborFreqImageSourceIF3_New():
  return itkLogGaborFreqImageSourceIF3.New()


def itkLogGaborFreqImageSourceIF2_New():
  return itkLogGaborFreqImageSourceIF2.New()

class itkLogGaborFreqImageSourceIF2(itkGenerateImageSourcePython.itkGenerateImageSourceIF2):
    """Proxy of C++ itkLogGaborFreqImageSourceIF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLogGaborFreqImageSourceIF2_Pointer":
        """__New_orig__() -> itkLogGaborFreqImageSourceIF2_Pointer"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLogGaborFreqImageSourceIF2_Pointer":
        """Clone(itkLogGaborFreqImageSourceIF2 self) -> itkLogGaborFreqImageSourceIF2_Pointer"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2_Clone(self)


    def SetSigma(self, _arg: 'double const') -> "void":
        """SetSigma(itkLogGaborFreqImageSourceIF2 self, double const _arg)"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2_SetSigma(self, _arg)


    def GetSigma(self) -> "double":
        """GetSigma(itkLogGaborFreqImageSourceIF2 self) -> double"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2_GetSigma(self)


    def SetWavelengths(self, _arg: 'itkFixedArrayD2') -> "void":
        """SetWavelengths(itkLogGaborFreqImageSourceIF2 self, itkFixedArrayD2 _arg)"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2_SetWavelengths(self, _arg)


    def GetWavelengths(self) -> "itkFixedArrayD2 const &":
        """GetWavelengths(itkLogGaborFreqImageSourceIF2 self) -> itkFixedArrayD2"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2_GetWavelengths(self)

    __swig_destroy__ = _itkLogGaborFreqImageSourcePython.delete_itkLogGaborFreqImageSourceIF2

    def cast(obj: 'itkLightObject') -> "itkLogGaborFreqImageSourceIF2 *":
        """cast(itkLightObject obj) -> itkLogGaborFreqImageSourceIF2"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLogGaborFreqImageSourceIF2

        Create a new object of the class itkLogGaborFreqImageSourceIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogGaborFreqImageSourceIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLogGaborFreqImageSourceIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLogGaborFreqImageSourceIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLogGaborFreqImageSourceIF2.Clone = new_instancemethod(_itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2_Clone, None, itkLogGaborFreqImageSourceIF2)
itkLogGaborFreqImageSourceIF2.SetSigma = new_instancemethod(_itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2_SetSigma, None, itkLogGaborFreqImageSourceIF2)
itkLogGaborFreqImageSourceIF2.GetSigma = new_instancemethod(_itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2_GetSigma, None, itkLogGaborFreqImageSourceIF2)
itkLogGaborFreqImageSourceIF2.SetWavelengths = new_instancemethod(_itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2_SetWavelengths, None, itkLogGaborFreqImageSourceIF2)
itkLogGaborFreqImageSourceIF2.GetWavelengths = new_instancemethod(_itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2_GetWavelengths, None, itkLogGaborFreqImageSourceIF2)
itkLogGaborFreqImageSourceIF2_swigregister = _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2_swigregister
itkLogGaborFreqImageSourceIF2_swigregister(itkLogGaborFreqImageSourceIF2)

def itkLogGaborFreqImageSourceIF2___New_orig__() -> "itkLogGaborFreqImageSourceIF2_Pointer":
    """itkLogGaborFreqImageSourceIF2___New_orig__() -> itkLogGaborFreqImageSourceIF2_Pointer"""
    return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2___New_orig__()

def itkLogGaborFreqImageSourceIF2_cast(obj: 'itkLightObject') -> "itkLogGaborFreqImageSourceIF2 *":
    """itkLogGaborFreqImageSourceIF2_cast(itkLightObject obj) -> itkLogGaborFreqImageSourceIF2"""
    return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF2_cast(obj)

class itkLogGaborFreqImageSourceIF3(itkGenerateImageSourcePython.itkGenerateImageSourceIF3):
    """Proxy of C++ itkLogGaborFreqImageSourceIF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkLogGaborFreqImageSourceIF3_Pointer":
        """__New_orig__() -> itkLogGaborFreqImageSourceIF3_Pointer"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkLogGaborFreqImageSourceIF3_Pointer":
        """Clone(itkLogGaborFreqImageSourceIF3 self) -> itkLogGaborFreqImageSourceIF3_Pointer"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3_Clone(self)


    def SetSigma(self, _arg: 'double const') -> "void":
        """SetSigma(itkLogGaborFreqImageSourceIF3 self, double const _arg)"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3_SetSigma(self, _arg)


    def GetSigma(self) -> "double":
        """GetSigma(itkLogGaborFreqImageSourceIF3 self) -> double"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3_GetSigma(self)


    def SetWavelengths(self, _arg: 'itkFixedArrayD3') -> "void":
        """SetWavelengths(itkLogGaborFreqImageSourceIF3 self, itkFixedArrayD3 _arg)"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3_SetWavelengths(self, _arg)


    def GetWavelengths(self) -> "itkFixedArrayD3 const &":
        """GetWavelengths(itkLogGaborFreqImageSourceIF3 self) -> itkFixedArrayD3"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3_GetWavelengths(self)

    __swig_destroy__ = _itkLogGaborFreqImageSourcePython.delete_itkLogGaborFreqImageSourceIF3

    def cast(obj: 'itkLightObject') -> "itkLogGaborFreqImageSourceIF3 *":
        """cast(itkLightObject obj) -> itkLogGaborFreqImageSourceIF3"""
        return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkLogGaborFreqImageSourceIF3

        Create a new object of the class itkLogGaborFreqImageSourceIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLogGaborFreqImageSourceIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkLogGaborFreqImageSourceIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLogGaborFreqImageSourceIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLogGaborFreqImageSourceIF3.Clone = new_instancemethod(_itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3_Clone, None, itkLogGaborFreqImageSourceIF3)
itkLogGaborFreqImageSourceIF3.SetSigma = new_instancemethod(_itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3_SetSigma, None, itkLogGaborFreqImageSourceIF3)
itkLogGaborFreqImageSourceIF3.GetSigma = new_instancemethod(_itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3_GetSigma, None, itkLogGaborFreqImageSourceIF3)
itkLogGaborFreqImageSourceIF3.SetWavelengths = new_instancemethod(_itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3_SetWavelengths, None, itkLogGaborFreqImageSourceIF3)
itkLogGaborFreqImageSourceIF3.GetWavelengths = new_instancemethod(_itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3_GetWavelengths, None, itkLogGaborFreqImageSourceIF3)
itkLogGaborFreqImageSourceIF3_swigregister = _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3_swigregister
itkLogGaborFreqImageSourceIF3_swigregister(itkLogGaborFreqImageSourceIF3)

def itkLogGaborFreqImageSourceIF3___New_orig__() -> "itkLogGaborFreqImageSourceIF3_Pointer":
    """itkLogGaborFreqImageSourceIF3___New_orig__() -> itkLogGaborFreqImageSourceIF3_Pointer"""
    return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3___New_orig__()

def itkLogGaborFreqImageSourceIF3_cast(obj: 'itkLightObject') -> "itkLogGaborFreqImageSourceIF3 *":
    """itkLogGaborFreqImageSourceIF3_cast(itkLightObject obj) -> itkLogGaborFreqImageSourceIF3"""
    return _itkLogGaborFreqImageSourcePython.itkLogGaborFreqImageSourceIF3_cast(obj)


def log_gabor_freq_image_source(*args, **kwargs):
    """Procedural interface for LogGaborFreqImageSource"""
    import itk
    instance = itk.LogGaborFreqImageSource.New(*args, **kwargs)
    return instance.__internal_call__()

def log_gabor_freq_image_source_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.LogGaborFreqImageSource, itkTemplate.itkTemplate):
        log_gabor_freq_image_source.__doc__ = itk.LogGaborFreqImageSource.values()[0].__doc__
    else:
        log_gabor_freq_image_source.__doc__ = itk.LogGaborFreqImageSource.__doc__




