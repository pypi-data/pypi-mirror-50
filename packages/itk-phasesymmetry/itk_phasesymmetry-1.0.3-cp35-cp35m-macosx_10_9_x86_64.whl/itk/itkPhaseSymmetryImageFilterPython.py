# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkPhaseSymmetryImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkPhaseSymmetryImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkPhaseSymmetryImageFilterPython
            return _itkPhaseSymmetryImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkPhaseSymmetryImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkPhaseSymmetryImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkPhaseSymmetryImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkArray2DPython
import vnl_matrixPython
import stdcomplexPython
import pyBasePython
import vnl_vectorPython
import itkImageToImageFilterAPython
import itkImageToImageFilterCommonPython
import itkImageRegionPython
import ITKCommonBasePython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImagePython
import itkVectorPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkPointPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkRGBPixelPython

def itkPhaseSymmetryImageFilterIF3IF3_New():
  return itkPhaseSymmetryImageFilterIF3IF3.New()


def itkPhaseSymmetryImageFilterIF2IF2_New():
  return itkPhaseSymmetryImageFilterIF2IF2.New()

class itkPhaseSymmetryImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """Proxy of C++ itkPhaseSymmetryImageFilterIF2IF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPhaseSymmetryImageFilterIF2IF2_Pointer":
        """__New_orig__() -> itkPhaseSymmetryImageFilterIF2IF2_Pointer"""
        return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPhaseSymmetryImageFilterIF2IF2_Pointer":
        """Clone(itkPhaseSymmetryImageFilterIF2IF2 self) -> itkPhaseSymmetryImageFilterIF2IF2_Pointer"""
        return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_Clone(self)


    def SetWavelengths(self, _arg: 'itkArray2DD') -> "void":
        """SetWavelengths(itkPhaseSymmetryImageFilterIF2IF2 self, itkArray2DD _arg)"""
        return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_SetWavelengths(self, _arg)


    def SetOrientations(self, _arg: 'itkArray2DD') -> "void":
        """SetOrientations(itkPhaseSymmetryImageFilterIF2IF2 self, itkArray2DD _arg)"""
        return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_SetOrientations(self, _arg)


    def SetAngleBandwidth(self, _arg: 'double const') -> "void":
        """SetAngleBandwidth(itkPhaseSymmetryImageFilterIF2IF2 self, double const _arg)"""
        return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_SetAngleBandwidth(self, _arg)


    def SetSigma(self, _arg: 'double const') -> "void":
        """SetSigma(itkPhaseSymmetryImageFilterIF2IF2 self, double const _arg)"""
        return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_SetSigma(self, _arg)


    def SetNoiseThreshold(self, _arg: 'double const') -> "void":
        """SetNoiseThreshold(itkPhaseSymmetryImageFilterIF2IF2 self, double const _arg)"""
        return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_SetNoiseThreshold(self, _arg)


    def SetPolarity(self, _arg: 'int const') -> "void":
        """SetPolarity(itkPhaseSymmetryImageFilterIF2IF2 self, int const _arg)"""
        return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_SetPolarity(self, _arg)


    def Initialize(self) -> "void":
        """Initialize(itkPhaseSymmetryImageFilterIF2IF2 self)"""
        return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_Initialize(self)

    ImageDimensionCheck = _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_ImageDimensionCheck
    __swig_destroy__ = _itkPhaseSymmetryImageFilterPython.delete_itkPhaseSymmetryImageFilterIF2IF2

    def cast(obj: 'itkLightObject') -> "itkPhaseSymmetryImageFilterIF2IF2 *":
        """cast(itkLightObject obj) -> itkPhaseSymmetryImageFilterIF2IF2"""
        return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPhaseSymmetryImageFilterIF2IF2

        Create a new object of the class itkPhaseSymmetryImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseSymmetryImageFilterIF2IF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPhaseSymmetryImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPhaseSymmetryImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPhaseSymmetryImageFilterIF2IF2.Clone = new_instancemethod(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_Clone, None, itkPhaseSymmetryImageFilterIF2IF2)
itkPhaseSymmetryImageFilterIF2IF2.SetWavelengths = new_instancemethod(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_SetWavelengths, None, itkPhaseSymmetryImageFilterIF2IF2)
itkPhaseSymmetryImageFilterIF2IF2.SetOrientations = new_instancemethod(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_SetOrientations, None, itkPhaseSymmetryImageFilterIF2IF2)
itkPhaseSymmetryImageFilterIF2IF2.SetAngleBandwidth = new_instancemethod(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_SetAngleBandwidth, None, itkPhaseSymmetryImageFilterIF2IF2)
itkPhaseSymmetryImageFilterIF2IF2.SetSigma = new_instancemethod(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_SetSigma, None, itkPhaseSymmetryImageFilterIF2IF2)
itkPhaseSymmetryImageFilterIF2IF2.SetNoiseThreshold = new_instancemethod(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_SetNoiseThreshold, None, itkPhaseSymmetryImageFilterIF2IF2)
itkPhaseSymmetryImageFilterIF2IF2.SetPolarity = new_instancemethod(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_SetPolarity, None, itkPhaseSymmetryImageFilterIF2IF2)
itkPhaseSymmetryImageFilterIF2IF2.Initialize = new_instancemethod(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_Initialize, None, itkPhaseSymmetryImageFilterIF2IF2)
itkPhaseSymmetryImageFilterIF2IF2_swigregister = _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_swigregister
itkPhaseSymmetryImageFilterIF2IF2_swigregister(itkPhaseSymmetryImageFilterIF2IF2)

def itkPhaseSymmetryImageFilterIF2IF2___New_orig__() -> "itkPhaseSymmetryImageFilterIF2IF2_Pointer":
    """itkPhaseSymmetryImageFilterIF2IF2___New_orig__() -> itkPhaseSymmetryImageFilterIF2IF2_Pointer"""
    return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2___New_orig__()

def itkPhaseSymmetryImageFilterIF2IF2_cast(obj: 'itkLightObject') -> "itkPhaseSymmetryImageFilterIF2IF2 *":
    """itkPhaseSymmetryImageFilterIF2IF2_cast(itkLightObject obj) -> itkPhaseSymmetryImageFilterIF2IF2"""
    return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_cast(obj)

class itkPhaseSymmetryImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """Proxy of C++ itkPhaseSymmetryImageFilterIF3IF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__() -> "itkPhaseSymmetryImageFilterIF3IF3_Pointer":
        """__New_orig__() -> itkPhaseSymmetryImageFilterIF3IF3_Pointer"""
        return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "itkPhaseSymmetryImageFilterIF3IF3_Pointer":
        """Clone(itkPhaseSymmetryImageFilterIF3IF3 self) -> itkPhaseSymmetryImageFilterIF3IF3_Pointer"""
        return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_Clone(self)


    def SetWavelengths(self, _arg: 'itkArray2DD') -> "void":
        """SetWavelengths(itkPhaseSymmetryImageFilterIF3IF3 self, itkArray2DD _arg)"""
        return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_SetWavelengths(self, _arg)


    def SetOrientations(self, _arg: 'itkArray2DD') -> "void":
        """SetOrientations(itkPhaseSymmetryImageFilterIF3IF3 self, itkArray2DD _arg)"""
        return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_SetOrientations(self, _arg)


    def SetAngleBandwidth(self, _arg: 'double const') -> "void":
        """SetAngleBandwidth(itkPhaseSymmetryImageFilterIF3IF3 self, double const _arg)"""
        return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_SetAngleBandwidth(self, _arg)


    def SetSigma(self, _arg: 'double const') -> "void":
        """SetSigma(itkPhaseSymmetryImageFilterIF3IF3 self, double const _arg)"""
        return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_SetSigma(self, _arg)


    def SetNoiseThreshold(self, _arg: 'double const') -> "void":
        """SetNoiseThreshold(itkPhaseSymmetryImageFilterIF3IF3 self, double const _arg)"""
        return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_SetNoiseThreshold(self, _arg)


    def SetPolarity(self, _arg: 'int const') -> "void":
        """SetPolarity(itkPhaseSymmetryImageFilterIF3IF3 self, int const _arg)"""
        return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_SetPolarity(self, _arg)


    def Initialize(self) -> "void":
        """Initialize(itkPhaseSymmetryImageFilterIF3IF3 self)"""
        return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_Initialize(self)

    ImageDimensionCheck = _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_ImageDimensionCheck
    __swig_destroy__ = _itkPhaseSymmetryImageFilterPython.delete_itkPhaseSymmetryImageFilterIF3IF3

    def cast(obj: 'itkLightObject') -> "itkPhaseSymmetryImageFilterIF3IF3 *":
        """cast(itkLightObject obj) -> itkPhaseSymmetryImageFilterIF3IF3"""
        return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkPhaseSymmetryImageFilterIF3IF3

        Create a new object of the class itkPhaseSymmetryImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseSymmetryImageFilterIF3IF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkPhaseSymmetryImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPhaseSymmetryImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPhaseSymmetryImageFilterIF3IF3.Clone = new_instancemethod(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_Clone, None, itkPhaseSymmetryImageFilterIF3IF3)
itkPhaseSymmetryImageFilterIF3IF3.SetWavelengths = new_instancemethod(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_SetWavelengths, None, itkPhaseSymmetryImageFilterIF3IF3)
itkPhaseSymmetryImageFilterIF3IF3.SetOrientations = new_instancemethod(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_SetOrientations, None, itkPhaseSymmetryImageFilterIF3IF3)
itkPhaseSymmetryImageFilterIF3IF3.SetAngleBandwidth = new_instancemethod(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_SetAngleBandwidth, None, itkPhaseSymmetryImageFilterIF3IF3)
itkPhaseSymmetryImageFilterIF3IF3.SetSigma = new_instancemethod(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_SetSigma, None, itkPhaseSymmetryImageFilterIF3IF3)
itkPhaseSymmetryImageFilterIF3IF3.SetNoiseThreshold = new_instancemethod(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_SetNoiseThreshold, None, itkPhaseSymmetryImageFilterIF3IF3)
itkPhaseSymmetryImageFilterIF3IF3.SetPolarity = new_instancemethod(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_SetPolarity, None, itkPhaseSymmetryImageFilterIF3IF3)
itkPhaseSymmetryImageFilterIF3IF3.Initialize = new_instancemethod(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_Initialize, None, itkPhaseSymmetryImageFilterIF3IF3)
itkPhaseSymmetryImageFilterIF3IF3_swigregister = _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_swigregister
itkPhaseSymmetryImageFilterIF3IF3_swigregister(itkPhaseSymmetryImageFilterIF3IF3)

def itkPhaseSymmetryImageFilterIF3IF3___New_orig__() -> "itkPhaseSymmetryImageFilterIF3IF3_Pointer":
    """itkPhaseSymmetryImageFilterIF3IF3___New_orig__() -> itkPhaseSymmetryImageFilterIF3IF3_Pointer"""
    return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3___New_orig__()

def itkPhaseSymmetryImageFilterIF3IF3_cast(obj: 'itkLightObject') -> "itkPhaseSymmetryImageFilterIF3IF3 *":
    """itkPhaseSymmetryImageFilterIF3IF3_cast(itkLightObject obj) -> itkPhaseSymmetryImageFilterIF3IF3"""
    return _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_cast(obj)


def phase_symmetry_image_filter(*args, **kwargs):
    """Procedural interface for PhaseSymmetryImageFilter"""
    import itk
    instance = itk.PhaseSymmetryImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def phase_symmetry_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.PhaseSymmetryImageFilter, itkTemplate.itkTemplate):
        phase_symmetry_image_filter.__doc__ = itk.PhaseSymmetryImageFilter.values()[0].__doc__
    else:
        phase_symmetry_image_filter.__doc__ = itk.PhaseSymmetryImageFilter.__doc__




