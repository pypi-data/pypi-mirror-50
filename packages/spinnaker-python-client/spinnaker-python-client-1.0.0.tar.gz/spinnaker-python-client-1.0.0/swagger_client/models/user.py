# coding: utf-8

"""
    Spinnaker API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.granted_authority import GrantedAuthority  # noqa: F401,E501


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_non_expired': 'bool',
        'first_name': 'str',
        'allowed_accounts': 'list[str]',
        'authorities': 'list[GrantedAuthority]',
        'account_non_locked': 'bool',
        'credentials_non_expired': 'bool',
        'last_name': 'str',
        'username': 'str',
        'roles': 'list[str]',
        'email': 'str',
        'enabled': 'bool'
    }

    attribute_map = {
        'account_non_expired': 'accountNonExpired',
        'first_name': 'firstName',
        'allowed_accounts': 'allowedAccounts',
        'authorities': 'authorities',
        'account_non_locked': 'accountNonLocked',
        'credentials_non_expired': 'credentialsNonExpired',
        'last_name': 'lastName',
        'username': 'username',
        'roles': 'roles',
        'email': 'email',
        'enabled': 'enabled'
    }

    def __init__(self, account_non_expired=None, first_name=None, allowed_accounts=None, authorities=None, account_non_locked=None, credentials_non_expired=None, last_name=None, username=None, roles=None, email=None, enabled=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501

        self._account_non_expired = None
        self._first_name = None
        self._allowed_accounts = None
        self._authorities = None
        self._account_non_locked = None
        self._credentials_non_expired = None
        self._last_name = None
        self._username = None
        self._roles = None
        self._email = None
        self._enabled = None
        self.discriminator = None

        if account_non_expired is not None:
            self.account_non_expired = account_non_expired
        if first_name is not None:
            self.first_name = first_name
        if allowed_accounts is not None:
            self.allowed_accounts = allowed_accounts
        if authorities is not None:
            self.authorities = authorities
        if account_non_locked is not None:
            self.account_non_locked = account_non_locked
        if credentials_non_expired is not None:
            self.credentials_non_expired = credentials_non_expired
        if last_name is not None:
            self.last_name = last_name
        if username is not None:
            self.username = username
        if roles is not None:
            self.roles = roles
        if email is not None:
            self.email = email
        if enabled is not None:
            self.enabled = enabled

    @property
    def account_non_expired(self):
        """Gets the account_non_expired of this User.  # noqa: E501


        :return: The account_non_expired of this User.  # noqa: E501
        :rtype: bool
        """
        return self._account_non_expired

    @account_non_expired.setter
    def account_non_expired(self, account_non_expired):
        """Sets the account_non_expired of this User.


        :param account_non_expired: The account_non_expired of this User.  # noqa: E501
        :type: bool
        """

        self._account_non_expired = account_non_expired

    @property
    def first_name(self):
        """Gets the first_name of this User.  # noqa: E501


        :return: The first_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.


        :param first_name: The first_name of this User.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def allowed_accounts(self):
        """Gets the allowed_accounts of this User.  # noqa: E501


        :return: The allowed_accounts of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_accounts

    @allowed_accounts.setter
    def allowed_accounts(self, allowed_accounts):
        """Sets the allowed_accounts of this User.


        :param allowed_accounts: The allowed_accounts of this User.  # noqa: E501
        :type: list[str]
        """

        self._allowed_accounts = allowed_accounts

    @property
    def authorities(self):
        """Gets the authorities of this User.  # noqa: E501


        :return: The authorities of this User.  # noqa: E501
        :rtype: list[GrantedAuthority]
        """
        return self._authorities

    @authorities.setter
    def authorities(self, authorities):
        """Sets the authorities of this User.


        :param authorities: The authorities of this User.  # noqa: E501
        :type: list[GrantedAuthority]
        """

        self._authorities = authorities

    @property
    def account_non_locked(self):
        """Gets the account_non_locked of this User.  # noqa: E501


        :return: The account_non_locked of this User.  # noqa: E501
        :rtype: bool
        """
        return self._account_non_locked

    @account_non_locked.setter
    def account_non_locked(self, account_non_locked):
        """Sets the account_non_locked of this User.


        :param account_non_locked: The account_non_locked of this User.  # noqa: E501
        :type: bool
        """

        self._account_non_locked = account_non_locked

    @property
    def credentials_non_expired(self):
        """Gets the credentials_non_expired of this User.  # noqa: E501


        :return: The credentials_non_expired of this User.  # noqa: E501
        :rtype: bool
        """
        return self._credentials_non_expired

    @credentials_non_expired.setter
    def credentials_non_expired(self, credentials_non_expired):
        """Sets the credentials_non_expired of this User.


        :param credentials_non_expired: The credentials_non_expired of this User.  # noqa: E501
        :type: bool
        """

        self._credentials_non_expired = credentials_non_expired

    @property
    def last_name(self):
        """Gets the last_name of this User.  # noqa: E501


        :return: The last_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.


        :param last_name: The last_name of this User.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def username(self):
        """Gets the username of this User.  # noqa: E501


        :return: The username of this User.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.


        :param username: The username of this User.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def roles(self):
        """Gets the roles of this User.  # noqa: E501


        :return: The roles of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this User.


        :param roles: The roles of this User.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def enabled(self):
        """Gets the enabled of this User.  # noqa: E501


        :return: The enabled of this User.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this User.


        :param enabled: The enabled of this User.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
