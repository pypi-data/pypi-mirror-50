# coding: utf-8

"""
    Spinnaker API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AccountDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cloud_provider': 'str',
        'challenge_destructive_actions': 'bool',
        'required_group_membership': 'list[str]',
        'name': 'str',
        'type': 'str',
        'environment': 'str',
        'provider_version': 'str',
        'primary_account': 'bool',
        'account_id': 'str',
        'account_type': 'str',
        'skin': 'str',
        'permissions': 'dict(str, list[str])'
    }

    attribute_map = {
        'cloud_provider': 'cloudProvider',
        'challenge_destructive_actions': 'challengeDestructiveActions',
        'required_group_membership': 'requiredGroupMembership',
        'name': 'name',
        'type': 'type',
        'environment': 'environment',
        'provider_version': 'providerVersion',
        'primary_account': 'primaryAccount',
        'account_id': 'accountId',
        'account_type': 'accountType',
        'skin': 'skin',
        'permissions': 'permissions'
    }

    def __init__(self, cloud_provider=None, challenge_destructive_actions=None, required_group_membership=None, name=None, type=None, environment=None, provider_version=None, primary_account=None, account_id=None, account_type=None, skin=None, permissions=None):  # noqa: E501
        """AccountDetails - a model defined in Swagger"""  # noqa: E501

        self._cloud_provider = None
        self._challenge_destructive_actions = None
        self._required_group_membership = None
        self._name = None
        self._type = None
        self._environment = None
        self._provider_version = None
        self._primary_account = None
        self._account_id = None
        self._account_type = None
        self._skin = None
        self._permissions = None
        self.discriminator = None

        if cloud_provider is not None:
            self.cloud_provider = cloud_provider
        if challenge_destructive_actions is not None:
            self.challenge_destructive_actions = challenge_destructive_actions
        if required_group_membership is not None:
            self.required_group_membership = required_group_membership
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if environment is not None:
            self.environment = environment
        if provider_version is not None:
            self.provider_version = provider_version
        if primary_account is not None:
            self.primary_account = primary_account
        if account_id is not None:
            self.account_id = account_id
        if account_type is not None:
            self.account_type = account_type
        if skin is not None:
            self.skin = skin
        if permissions is not None:
            self.permissions = permissions

    @property
    def cloud_provider(self):
        """Gets the cloud_provider of this AccountDetails.  # noqa: E501


        :return: The cloud_provider of this AccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._cloud_provider

    @cloud_provider.setter
    def cloud_provider(self, cloud_provider):
        """Sets the cloud_provider of this AccountDetails.


        :param cloud_provider: The cloud_provider of this AccountDetails.  # noqa: E501
        :type: str
        """

        self._cloud_provider = cloud_provider

    @property
    def challenge_destructive_actions(self):
        """Gets the challenge_destructive_actions of this AccountDetails.  # noqa: E501


        :return: The challenge_destructive_actions of this AccountDetails.  # noqa: E501
        :rtype: bool
        """
        return self._challenge_destructive_actions

    @challenge_destructive_actions.setter
    def challenge_destructive_actions(self, challenge_destructive_actions):
        """Sets the challenge_destructive_actions of this AccountDetails.


        :param challenge_destructive_actions: The challenge_destructive_actions of this AccountDetails.  # noqa: E501
        :type: bool
        """

        self._challenge_destructive_actions = challenge_destructive_actions

    @property
    def required_group_membership(self):
        """Gets the required_group_membership of this AccountDetails.  # noqa: E501


        :return: The required_group_membership of this AccountDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._required_group_membership

    @required_group_membership.setter
    def required_group_membership(self, required_group_membership):
        """Sets the required_group_membership of this AccountDetails.


        :param required_group_membership: The required_group_membership of this AccountDetails.  # noqa: E501
        :type: list[str]
        """

        self._required_group_membership = required_group_membership

    @property
    def name(self):
        """Gets the name of this AccountDetails.  # noqa: E501


        :return: The name of this AccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountDetails.


        :param name: The name of this AccountDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this AccountDetails.  # noqa: E501


        :return: The type of this AccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccountDetails.


        :param type: The type of this AccountDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def environment(self):
        """Gets the environment of this AccountDetails.  # noqa: E501


        :return: The environment of this AccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this AccountDetails.


        :param environment: The environment of this AccountDetails.  # noqa: E501
        :type: str
        """

        self._environment = environment

    @property
    def provider_version(self):
        """Gets the provider_version of this AccountDetails.  # noqa: E501


        :return: The provider_version of this AccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._provider_version

    @provider_version.setter
    def provider_version(self, provider_version):
        """Sets the provider_version of this AccountDetails.


        :param provider_version: The provider_version of this AccountDetails.  # noqa: E501
        :type: str
        """

        self._provider_version = provider_version

    @property
    def primary_account(self):
        """Gets the primary_account of this AccountDetails.  # noqa: E501


        :return: The primary_account of this AccountDetails.  # noqa: E501
        :rtype: bool
        """
        return self._primary_account

    @primary_account.setter
    def primary_account(self, primary_account):
        """Sets the primary_account of this AccountDetails.


        :param primary_account: The primary_account of this AccountDetails.  # noqa: E501
        :type: bool
        """

        self._primary_account = primary_account

    @property
    def account_id(self):
        """Gets the account_id of this AccountDetails.  # noqa: E501


        :return: The account_id of this AccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountDetails.


        :param account_id: The account_id of this AccountDetails.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_type(self):
        """Gets the account_type of this AccountDetails.  # noqa: E501


        :return: The account_type of this AccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this AccountDetails.


        :param account_type: The account_type of this AccountDetails.  # noqa: E501
        :type: str
        """

        self._account_type = account_type

    @property
    def skin(self):
        """Gets the skin of this AccountDetails.  # noqa: E501


        :return: The skin of this AccountDetails.  # noqa: E501
        :rtype: str
        """
        return self._skin

    @skin.setter
    def skin(self, skin):
        """Sets the skin of this AccountDetails.


        :param skin: The skin of this AccountDetails.  # noqa: E501
        :type: str
        """

        self._skin = skin

    @property
    def permissions(self):
        """Gets the permissions of this AccountDetails.  # noqa: E501


        :return: The permissions of this AccountDetails.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this AccountDetails.


        :param permissions: The permissions of this AccountDetails.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._permissions = permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
