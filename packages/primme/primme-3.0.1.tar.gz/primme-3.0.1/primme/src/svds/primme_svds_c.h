/*******************************************************************************
 * Copyright (c) 2018, College of William & Mary
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the College of William & Mary nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COLLEGE OF WILLIAM & MARY BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * PRIMME: https://github.com/primme/primme
 * Contact: Andreas Stathopoulos, a n d r e a s _at_ c s . w m . e d u
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef primme_svds_c_H
#define primme_svds_c_H
#if !defined(CHECK_TEMPLATE) && !defined(Xprimme_svds_aux)
#  define Xprimme_svds_aux CONCAT(Xprimme_svds_aux,SCALAR_SUF)
#endif
int Xprimme_svds_auxdprimme(dummy_type_dprimme *svals, dummy_type_dprimme *svecs, dummy_type_dprimme *resNorms,
      primme_svds_params *primme_svds, primme_op_datatype svals_resNorms_type);
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_Sprimme)
#  define wrapper_svds_Sprimme CONCAT(wrapper_svds_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_Rprimme)
#  define wrapper_svds_Rprimme CONCAT(wrapper_svds_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_SHprimme)
#  define wrapper_svds_SHprimme CONCAT(wrapper_svds_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_RHprimme)
#  define wrapper_svds_RHprimme CONCAT(wrapper_svds_,HOST_REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_SXprimme)
#  define wrapper_svds_SXprimme CONCAT(wrapper_svds_,XSCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_RXprimme)
#  define wrapper_svds_RXprimme CONCAT(wrapper_svds_,XREAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_Shprimme)
#  define wrapper_svds_Shprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(STEM_C,USE_ARITH(h,k)),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_Rhprimme)
#  define wrapper_svds_Rhprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(STEM_C,h),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_Ssprimme)
#  define wrapper_svds_Ssprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(STEM_C,USE_ARITH(s,c)),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_Rsprimme)
#  define wrapper_svds_Rsprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(STEM_C,s),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_Sdprimme)
#  define wrapper_svds_Sdprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(STEM_C,USE_ARITH(d,z)),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_Rdprimme)
#  define wrapper_svds_Rdprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(STEM_C,d),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_Sqprimme)
#  define wrapper_svds_Sqprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(STEM_C,USE_ARITH(q,w)),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_Rqprimme)
#  define wrapper_svds_Rqprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(STEM_C,q),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_SXhprimme)
#  define wrapper_svds_SXhprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(,USE_ARITH(h,k)),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_RXhprimme)
#  define wrapper_svds_RXhprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(,h),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_SXsprimme)
#  define wrapper_svds_SXsprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(,USE_ARITH(s,c)),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_RXsprimme)
#  define wrapper_svds_RXsprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(,s),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_SXdprimme)
#  define wrapper_svds_SXdprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(,USE_ARITH(d,z)),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_RXdprimme)
#  define wrapper_svds_RXdprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(,d),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_SXqprimme)
#  define wrapper_svds_SXqprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(,USE_ARITH(q,w)),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_RXqprimme)
#  define wrapper_svds_RXqprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(,q),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_SHhprimme)
#  define wrapper_svds_SHhprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(,USE_ARITH(s,c)),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_RHhprimme)
#  define wrapper_svds_RHhprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(,s),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_SHsprimme)
#  define wrapper_svds_SHsprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(,USE_ARITH(s,c)),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_RHsprimme)
#  define wrapper_svds_RHsprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(,s),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_SHdprimme)
#  define wrapper_svds_SHdprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(,USE_ARITH(d,z)),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_RHdprimme)
#  define wrapper_svds_RHdprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(,d),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_SHqprimme)
#  define wrapper_svds_SHqprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(,USE_ARITH(q,w)),primme),))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(wrapper_svds_RHqprimme)
#  define wrapper_svds_RHqprimme CONCAT(wrapper_svds_,CONCAT(CONCAT(CONCAT(,q),primme),))
#endif
int wrapper_svds_dprimme(void *svals_, void *svecs_, void *resNorms_,
      primme_op_datatype svals_resNorms_type, primme_op_datatype svecs_type,
      int *outInitSize, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(comp_double)
#  define comp_double CONCAT(comp_double,SCALAR_SUF)
#endif
int comp_doubledprimme(const void *a, const void *b);
#if !defined(CHECK_TEMPLATE) && !defined(copy_last_params_from_svds)
#  define copy_last_params_from_svds CONCAT(copy_last_params_from_svds,SCALAR_SUF)
#endif
int copy_last_params_from_svdsdprimme(int stage, dummy_type_dprimme *svals, dummy_type_dprimme *svecs,
      dummy_type_dprimme *rnorms, int *allocatedTargetShifts,
      dummy_type_dprimme **out_svecs, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(copy_last_params_to_svds)
#  define copy_last_params_to_svds CONCAT(copy_last_params_to_svds,SCALAR_SUF)
#endif
int copy_last_params_to_svdsdprimme(int stage, dummy_type_dprimme *svals, dummy_type_dprimme *svecs,
      dummy_type_dprimme *rnorms, int allocatedTargetShifts,
      primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(primme_svds_check_input)
#  define primme_svds_check_input CONCAT(primme_svds_check_input,SCALAR_SUF)
#endif
int primme_svds_check_inputdprimme(dummy_type_dprimme *svals, dummy_type_dprimme *svecs, dummy_type_dprimme *resNorms,
      primme_svds_params *primme_svds);
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvecSVDS)
#  define matrixMatvecSVDS CONCAT(matrixMatvecSVDS,SCALAR_SUF)
#endif
void matrixMatvecSVDSdprimme(void *x_, PRIMME_INT *ldx, void *y_,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
#if !defined(CHECK_TEMPLATE) && !defined(applyPreconditionerSVDS)
#  define applyPreconditionerSVDS CONCAT(applyPreconditionerSVDS,SCALAR_SUF)
#endif
void applyPreconditionerSVDSdprimme(void *x, PRIMME_INT *ldx, void *y,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
#if !defined(CHECK_TEMPLATE) && !defined(Num_scalInv_Smatrix)
#  define Num_scalInv_Smatrix CONCAT(Num_scalInv_Smatrix,SCALAR_SUF)
#endif
int Num_scalInv_Smatrixdprimme(dummy_type_dprimme *x, PRIMME_INT m, int n, PRIMME_INT ldx,
      dummy_type_dprimme *factors, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(globalSum_Rprimme_svds)
#  define globalSum_Rprimme_svds CONCAT(globalSum_Rprimme_svds,SCALAR_SUF)
#endif
int globalSum_Rprimme_svdsdprimme(
      dummy_type_dprimme *sendBuf, dummy_type_dprimme *recvBuf, int count, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(compute_resNorm)
#  define compute_resNorm CONCAT(compute_resNorm,SCALAR_SUF)
#endif
int compute_resNormdprimme(dummy_type_dprimme *leftsvec, dummy_type_dprimme *rightsvec, dummy_type_dprimme *rNorm,
      primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(default_convTestFun)
#  define default_convTestFun CONCAT(default_convTestFun,SCALAR_SUF)
#endif
void default_convTestFundprimme(double *sval, void *leftsvec_, void *rightsvec_,
      double *rNorm, int *method, int *isConv, primme_svds_params *primme_svds,
      int *ierr);
#if !defined(CHECK_TEMPLATE) && !defined(convTestFunATA)
#  define convTestFunATA CONCAT(convTestFunATA,SCALAR_SUF)
#endif
void convTestFunATAdprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
#if !defined(CHECK_TEMPLATE) && !defined(convTestFunAug)
#  define convTestFunAug CONCAT(convTestFunAug,SCALAR_SUF)
#endif
void convTestFunAugdprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
#if !defined(CHECK_TEMPLATE) && !defined(default_monitor_svds)
#  define default_monitor_svds CONCAT(default_monitor_svds,SCALAR_SUF)
#endif
void default_monitor_svdsdprimme(void *basisSvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedSvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, int *stage, primme_svds_params *primme_svds,
      int *err);
#if !defined(CHECK_TEMPLATE) && !defined(monitor_single_stage)
#  define monitor_single_stage CONCAT(monitor_single_stage,SCALAR_SUF)
#endif
void monitor_single_stagedprimme(void *basisEvals_, int *basisSize,
      int *basisFlags, int *iblock, int *blockSize, void *basisNorms_,
      int *numConverged, void *lockedEvals_, int *numLocked, int *lockedFlags,
      void *lockedNorms_, int *inner_its, void *LSRes_, const char *msg,
      double *time, primme_event *event, primme_params *primme, int *err);
#if !defined(CHECK_TEMPLATE) && !defined(monitor_stage1)
#  define monitor_stage1 CONCAT(monitor_stage1,SCALAR_SUF)
#endif
void monitor_stage1dprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
#if !defined(CHECK_TEMPLATE) && !defined(monitor_stage2)
#  define monitor_stage2 CONCAT(monitor_stage2,SCALAR_SUF)
#endif
void monitor_stage2dprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
int Xprimme_svds_auxhprimme(dummy_type_hprimme *svals, dummy_type_hprimme *svecs, dummy_type_hprimme *resNorms,
      primme_svds_params *primme_svds, primme_op_datatype svals_resNorms_type);
int wrapper_svds_hprimme(void *svals_, void *svecs_, void *resNorms_,
      primme_op_datatype svals_resNorms_type, primme_op_datatype svecs_type,
      int *outInitSize, primme_context ctx);
int comp_doublehprimme(const void *a, const void *b);
int copy_last_params_from_svdshprimme(int stage, dummy_type_hprimme *svals, dummy_type_hprimme *svecs,
      dummy_type_hprimme *rnorms, int *allocatedTargetShifts,
      dummy_type_hprimme **out_svecs, primme_context ctx);
int copy_last_params_to_svdshprimme(int stage, dummy_type_hprimme *svals, dummy_type_hprimme *svecs,
      dummy_type_hprimme *rnorms, int allocatedTargetShifts,
      primme_context ctx);
int primme_svds_check_inputhprimme(dummy_type_hprimme *svals, dummy_type_hprimme *svecs, dummy_type_hprimme *resNorms,
      primme_svds_params *primme_svds);
void matrixMatvecSVDShprimme(void *x_, PRIMME_INT *ldx, void *y_,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
void applyPreconditionerSVDShprimme(void *x, PRIMME_INT *ldx, void *y,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
int Num_scalInv_Smatrixhprimme(dummy_type_hprimme *x, PRIMME_INT m, int n, PRIMME_INT ldx,
      dummy_type_hprimme *factors, primme_context ctx);
int globalSum_Rprimme_svdshprimme(
      dummy_type_sprimme *sendBuf, dummy_type_sprimme *recvBuf, int count, primme_context ctx);
int compute_resNormhprimme(dummy_type_hprimme *leftsvec, dummy_type_hprimme *rightsvec, dummy_type_sprimme *rNorm,
      primme_context ctx);
void default_convTestFunhprimme(double *sval, void *leftsvec_, void *rightsvec_,
      double *rNorm, int *method, int *isConv, primme_svds_params *primme_svds,
      int *ierr);
void convTestFunATAhprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
void convTestFunAughprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
void default_monitor_svdshprimme(void *basisSvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedSvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, int *stage, primme_svds_params *primme_svds,
      int *err);
void monitor_single_stagehprimme(void *basisEvals_, int *basisSize,
      int *basisFlags, int *iblock, int *blockSize, void *basisNorms_,
      int *numConverged, void *lockedEvals_, int *numLocked, int *lockedFlags,
      void *lockedNorms_, int *inner_its, void *LSRes_, const char *msg,
      double *time, primme_event *event, primme_params *primme, int *err);
void monitor_stage1hprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
void monitor_stage2hprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
int Xprimme_svds_auxkprimme(dummy_type_hprimme *svals, dummy_type_kprimme *svecs, dummy_type_hprimme *resNorms,
      primme_svds_params *primme_svds, primme_op_datatype svals_resNorms_type);
int wrapper_svds_kprimme(void *svals_, void *svecs_, void *resNorms_,
      primme_op_datatype svals_resNorms_type, primme_op_datatype svecs_type,
      int *outInitSize, primme_context ctx);
int comp_doublekprimme(const void *a, const void *b);
int copy_last_params_from_svdskprimme(int stage, dummy_type_hprimme *svals, dummy_type_kprimme *svecs,
      dummy_type_hprimme *rnorms, int *allocatedTargetShifts,
      dummy_type_kprimme **out_svecs, primme_context ctx);
int copy_last_params_to_svdskprimme(int stage, dummy_type_hprimme *svals, dummy_type_kprimme *svecs,
      dummy_type_hprimme *rnorms, int allocatedTargetShifts,
      primme_context ctx);
int primme_svds_check_inputkprimme(dummy_type_hprimme *svals, dummy_type_kprimme *svecs, dummy_type_hprimme *resNorms,
      primme_svds_params *primme_svds);
void matrixMatvecSVDSkprimme(void *x_, PRIMME_INT *ldx, void *y_,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
void applyPreconditionerSVDSkprimme(void *x, PRIMME_INT *ldx, void *y,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
int Num_scalInv_Smatrixkprimme(dummy_type_kprimme *x, PRIMME_INT m, int n, PRIMME_INT ldx,
      dummy_type_hprimme *factors, primme_context ctx);
int globalSum_Rprimme_svdskprimme(
      dummy_type_sprimme *sendBuf, dummy_type_sprimme *recvBuf, int count, primme_context ctx);
int compute_resNormkprimme(dummy_type_kprimme *leftsvec, dummy_type_kprimme *rightsvec, dummy_type_sprimme *rNorm,
      primme_context ctx);
void default_convTestFunkprimme(double *sval, void *leftsvec_, void *rightsvec_,
      double *rNorm, int *method, int *isConv, primme_svds_params *primme_svds,
      int *ierr);
void convTestFunATAkprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
void convTestFunAugkprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
void default_monitor_svdskprimme(void *basisSvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedSvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, int *stage, primme_svds_params *primme_svds,
      int *err);
void monitor_single_stagekprimme(void *basisEvals_, int *basisSize,
      int *basisFlags, int *iblock, int *blockSize, void *basisNorms_,
      int *numConverged, void *lockedEvals_, int *numLocked, int *lockedFlags,
      void *lockedNorms_, int *inner_its, void *LSRes_, const char *msg,
      double *time, primme_event *event, primme_params *primme, int *err);
void monitor_stage1kprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
void monitor_stage2kprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
int Xprimme_svds_auxsprimme(dummy_type_sprimme *svals, dummy_type_sprimme *svecs, dummy_type_sprimme *resNorms,
      primme_svds_params *primme_svds, primme_op_datatype svals_resNorms_type);
int wrapper_svds_sprimme(void *svals_, void *svecs_, void *resNorms_,
      primme_op_datatype svals_resNorms_type, primme_op_datatype svecs_type,
      int *outInitSize, primme_context ctx);
int comp_doublesprimme(const void *a, const void *b);
int copy_last_params_from_svdssprimme(int stage, dummy_type_sprimme *svals, dummy_type_sprimme *svecs,
      dummy_type_sprimme *rnorms, int *allocatedTargetShifts,
      dummy_type_sprimme **out_svecs, primme_context ctx);
int copy_last_params_to_svdssprimme(int stage, dummy_type_sprimme *svals, dummy_type_sprimme *svecs,
      dummy_type_sprimme *rnorms, int allocatedTargetShifts,
      primme_context ctx);
int primme_svds_check_inputsprimme(dummy_type_sprimme *svals, dummy_type_sprimme *svecs, dummy_type_sprimme *resNorms,
      primme_svds_params *primme_svds);
void matrixMatvecSVDSsprimme(void *x_, PRIMME_INT *ldx, void *y_,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
void applyPreconditionerSVDSsprimme(void *x, PRIMME_INT *ldx, void *y,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
int Num_scalInv_Smatrixsprimme(dummy_type_sprimme *x, PRIMME_INT m, int n, PRIMME_INT ldx,
      dummy_type_sprimme *factors, primme_context ctx);
int globalSum_Rprimme_svdssprimme(
      dummy_type_sprimme *sendBuf, dummy_type_sprimme *recvBuf, int count, primme_context ctx);
int compute_resNormsprimme(dummy_type_sprimme *leftsvec, dummy_type_sprimme *rightsvec, dummy_type_sprimme *rNorm,
      primme_context ctx);
void default_convTestFunsprimme(double *sval, void *leftsvec_, void *rightsvec_,
      double *rNorm, int *method, int *isConv, primme_svds_params *primme_svds,
      int *ierr);
void convTestFunATAsprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
void convTestFunAugsprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
void default_monitor_svdssprimme(void *basisSvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedSvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, int *stage, primme_svds_params *primme_svds,
      int *err);
void monitor_single_stagesprimme(void *basisEvals_, int *basisSize,
      int *basisFlags, int *iblock, int *blockSize, void *basisNorms_,
      int *numConverged, void *lockedEvals_, int *numLocked, int *lockedFlags,
      void *lockedNorms_, int *inner_its, void *LSRes_, const char *msg,
      double *time, primme_event *event, primme_params *primme, int *err);
void monitor_stage1sprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
void monitor_stage2sprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
int Xprimme_svds_auxcprimme(dummy_type_sprimme *svals, dummy_type_cprimme *svecs, dummy_type_sprimme *resNorms,
      primme_svds_params *primme_svds, primme_op_datatype svals_resNorms_type);
int wrapper_svds_cprimme(void *svals_, void *svecs_, void *resNorms_,
      primme_op_datatype svals_resNorms_type, primme_op_datatype svecs_type,
      int *outInitSize, primme_context ctx);
int comp_doublecprimme(const void *a, const void *b);
int copy_last_params_from_svdscprimme(int stage, dummy_type_sprimme *svals, dummy_type_cprimme *svecs,
      dummy_type_sprimme *rnorms, int *allocatedTargetShifts,
      dummy_type_cprimme **out_svecs, primme_context ctx);
int copy_last_params_to_svdscprimme(int stage, dummy_type_sprimme *svals, dummy_type_cprimme *svecs,
      dummy_type_sprimme *rnorms, int allocatedTargetShifts,
      primme_context ctx);
int primme_svds_check_inputcprimme(dummy_type_sprimme *svals, dummy_type_cprimme *svecs, dummy_type_sprimme *resNorms,
      primme_svds_params *primme_svds);
void matrixMatvecSVDScprimme(void *x_, PRIMME_INT *ldx, void *y_,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
void applyPreconditionerSVDScprimme(void *x, PRIMME_INT *ldx, void *y,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
int Num_scalInv_Smatrixcprimme(dummy_type_cprimme *x, PRIMME_INT m, int n, PRIMME_INT ldx,
      dummy_type_sprimme *factors, primme_context ctx);
int globalSum_Rprimme_svdscprimme(
      dummy_type_sprimme *sendBuf, dummy_type_sprimme *recvBuf, int count, primme_context ctx);
int compute_resNormcprimme(dummy_type_cprimme *leftsvec, dummy_type_cprimme *rightsvec, dummy_type_sprimme *rNorm,
      primme_context ctx);
void default_convTestFuncprimme(double *sval, void *leftsvec_, void *rightsvec_,
      double *rNorm, int *method, int *isConv, primme_svds_params *primme_svds,
      int *ierr);
void convTestFunATAcprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
void convTestFunAugcprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
void default_monitor_svdscprimme(void *basisSvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedSvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, int *stage, primme_svds_params *primme_svds,
      int *err);
void monitor_single_stagecprimme(void *basisEvals_, int *basisSize,
      int *basisFlags, int *iblock, int *blockSize, void *basisNorms_,
      int *numConverged, void *lockedEvals_, int *numLocked, int *lockedFlags,
      void *lockedNorms_, int *inner_its, void *LSRes_, const char *msg,
      double *time, primme_event *event, primme_params *primme, int *err);
void monitor_stage1cprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
void monitor_stage2cprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
int Xprimme_svds_auxzprimme(dummy_type_dprimme *svals, dummy_type_zprimme *svecs, dummy_type_dprimme *resNorms,
      primme_svds_params *primme_svds, primme_op_datatype svals_resNorms_type);
int wrapper_svds_zprimme(void *svals_, void *svecs_, void *resNorms_,
      primme_op_datatype svals_resNorms_type, primme_op_datatype svecs_type,
      int *outInitSize, primme_context ctx);
int comp_doublezprimme(const void *a, const void *b);
int copy_last_params_from_svdszprimme(int stage, dummy_type_dprimme *svals, dummy_type_zprimme *svecs,
      dummy_type_dprimme *rnorms, int *allocatedTargetShifts,
      dummy_type_zprimme **out_svecs, primme_context ctx);
int copy_last_params_to_svdszprimme(int stage, dummy_type_dprimme *svals, dummy_type_zprimme *svecs,
      dummy_type_dprimme *rnorms, int allocatedTargetShifts,
      primme_context ctx);
int primme_svds_check_inputzprimme(dummy_type_dprimme *svals, dummy_type_zprimme *svecs, dummy_type_dprimme *resNorms,
      primme_svds_params *primme_svds);
void matrixMatvecSVDSzprimme(void *x_, PRIMME_INT *ldx, void *y_,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
void applyPreconditionerSVDSzprimme(void *x, PRIMME_INT *ldx, void *y,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
int Num_scalInv_Smatrixzprimme(dummy_type_zprimme *x, PRIMME_INT m, int n, PRIMME_INT ldx,
      dummy_type_dprimme *factors, primme_context ctx);
int globalSum_Rprimme_svdszprimme(
      dummy_type_dprimme *sendBuf, dummy_type_dprimme *recvBuf, int count, primme_context ctx);
int compute_resNormzprimme(dummy_type_zprimme *leftsvec, dummy_type_zprimme *rightsvec, dummy_type_dprimme *rNorm,
      primme_context ctx);
void default_convTestFunzprimme(double *sval, void *leftsvec_, void *rightsvec_,
      double *rNorm, int *method, int *isConv, primme_svds_params *primme_svds,
      int *ierr);
void convTestFunATAzprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
void convTestFunAugzprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
void default_monitor_svdszprimme(void *basisSvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedSvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, int *stage, primme_svds_params *primme_svds,
      int *err);
void monitor_single_stagezprimme(void *basisEvals_, int *basisSize,
      int *basisFlags, int *iblock, int *blockSize, void *basisNorms_,
      int *numConverged, void *lockedEvals_, int *numLocked, int *lockedFlags,
      void *lockedNorms_, int *inner_its, void *LSRes_, const char *msg,
      double *time, primme_event *event, primme_params *primme, int *err);
void monitor_stage1zprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
void monitor_stage2zprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
int Xprimme_svds_auxmagma_hprimme(dummy_type_hprimme *svals, dummy_type_hprimme *svecs, dummy_type_hprimme *resNorms,
      primme_svds_params *primme_svds, primme_op_datatype svals_resNorms_type);
int wrapper_svds_magma_hprimme(void *svals_, void *svecs_, void *resNorms_,
      primme_op_datatype svals_resNorms_type, primme_op_datatype svecs_type,
      int *outInitSize, primme_context ctx);
int comp_doublemagma_hprimme(const void *a, const void *b);
int copy_last_params_from_svdsmagma_hprimme(int stage, dummy_type_hprimme *svals, dummy_type_magma_hprimme *svecs,
      dummy_type_hprimme *rnorms, int *allocatedTargetShifts,
      dummy_type_magma_hprimme **out_svecs, primme_context ctx);
int copy_last_params_to_svdsmagma_hprimme(int stage, dummy_type_hprimme *svals, dummy_type_magma_hprimme *svecs,
      dummy_type_hprimme *rnorms, int allocatedTargetShifts,
      primme_context ctx);
int primme_svds_check_inputmagma_hprimme(dummy_type_hprimme *svals, dummy_type_magma_hprimme *svecs, dummy_type_hprimme *resNorms,
      primme_svds_params *primme_svds);
void matrixMatvecSVDSmagma_hprimme(void *x_, PRIMME_INT *ldx, void *y_,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
void applyPreconditionerSVDSmagma_hprimme(void *x, PRIMME_INT *ldx, void *y,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
int Num_scalInv_Smatrixmagma_hprimme(dummy_type_magma_hprimme *x, PRIMME_INT m, int n, PRIMME_INT ldx,
      dummy_type_hprimme *factors, primme_context ctx);
int globalSum_Rprimme_svdsmagma_hprimme(
      dummy_type_sprimme *sendBuf, dummy_type_sprimme *recvBuf, int count, primme_context ctx);
int compute_resNormmagma_hprimme(dummy_type_magma_hprimme *leftsvec, dummy_type_magma_hprimme *rightsvec, dummy_type_sprimme *rNorm,
      primme_context ctx);
void default_convTestFunmagma_hprimme(double *sval, void *leftsvec_, void *rightsvec_,
      double *rNorm, int *method, int *isConv, primme_svds_params *primme_svds,
      int *ierr);
void convTestFunATAmagma_hprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
void convTestFunAugmagma_hprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
void default_monitor_svdsmagma_hprimme(void *basisSvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedSvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, int *stage, primme_svds_params *primme_svds,
      int *err);
void monitor_single_stagemagma_hprimme(void *basisEvals_, int *basisSize,
      int *basisFlags, int *iblock, int *blockSize, void *basisNorms_,
      int *numConverged, void *lockedEvals_, int *numLocked, int *lockedFlags,
      void *lockedNorms_, int *inner_its, void *LSRes_, const char *msg,
      double *time, primme_event *event, primme_params *primme, int *err);
void monitor_stage1magma_hprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
void monitor_stage2magma_hprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
int Xprimme_svds_auxmagma_kprimme(dummy_type_hprimme *svals, dummy_type_kprimme *svecs, dummy_type_hprimme *resNorms,
      primme_svds_params *primme_svds, primme_op_datatype svals_resNorms_type);
int wrapper_svds_magma_kprimme(void *svals_, void *svecs_, void *resNorms_,
      primme_op_datatype svals_resNorms_type, primme_op_datatype svecs_type,
      int *outInitSize, primme_context ctx);
int comp_doublemagma_kprimme(const void *a, const void *b);
int copy_last_params_from_svdsmagma_kprimme(int stage, dummy_type_hprimme *svals, dummy_type_magma_kprimme *svecs,
      dummy_type_hprimme *rnorms, int *allocatedTargetShifts,
      dummy_type_magma_kprimme **out_svecs, primme_context ctx);
int copy_last_params_to_svdsmagma_kprimme(int stage, dummy_type_hprimme *svals, dummy_type_magma_kprimme *svecs,
      dummy_type_hprimme *rnorms, int allocatedTargetShifts,
      primme_context ctx);
int primme_svds_check_inputmagma_kprimme(dummy_type_hprimme *svals, dummy_type_magma_kprimme *svecs, dummy_type_hprimme *resNorms,
      primme_svds_params *primme_svds);
void matrixMatvecSVDSmagma_kprimme(void *x_, PRIMME_INT *ldx, void *y_,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
void applyPreconditionerSVDSmagma_kprimme(void *x, PRIMME_INT *ldx, void *y,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
int Num_scalInv_Smatrixmagma_kprimme(dummy_type_magma_kprimme *x, PRIMME_INT m, int n, PRIMME_INT ldx,
      dummy_type_hprimme *factors, primme_context ctx);
int globalSum_Rprimme_svdsmagma_kprimme(
      dummy_type_sprimme *sendBuf, dummy_type_sprimme *recvBuf, int count, primme_context ctx);
int compute_resNormmagma_kprimme(dummy_type_magma_kprimme *leftsvec, dummy_type_magma_kprimme *rightsvec, dummy_type_sprimme *rNorm,
      primme_context ctx);
void default_convTestFunmagma_kprimme(double *sval, void *leftsvec_, void *rightsvec_,
      double *rNorm, int *method, int *isConv, primme_svds_params *primme_svds,
      int *ierr);
void convTestFunATAmagma_kprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
void convTestFunAugmagma_kprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
void default_monitor_svdsmagma_kprimme(void *basisSvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedSvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, int *stage, primme_svds_params *primme_svds,
      int *err);
void monitor_single_stagemagma_kprimme(void *basisEvals_, int *basisSize,
      int *basisFlags, int *iblock, int *blockSize, void *basisNorms_,
      int *numConverged, void *lockedEvals_, int *numLocked, int *lockedFlags,
      void *lockedNorms_, int *inner_its, void *LSRes_, const char *msg,
      double *time, primme_event *event, primme_params *primme, int *err);
void monitor_stage1magma_kprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
void monitor_stage2magma_kprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
int Xprimme_svds_auxmagma_sprimme(dummy_type_sprimme *svals, dummy_type_sprimme *svecs, dummy_type_sprimme *resNorms,
      primme_svds_params *primme_svds, primme_op_datatype svals_resNorms_type);
int wrapper_svds_magma_sprimme(void *svals_, void *svecs_, void *resNorms_,
      primme_op_datatype svals_resNorms_type, primme_op_datatype svecs_type,
      int *outInitSize, primme_context ctx);
int comp_doublemagma_sprimme(const void *a, const void *b);
int copy_last_params_from_svdsmagma_sprimme(int stage, dummy_type_sprimme *svals, dummy_type_magma_sprimme *svecs,
      dummy_type_sprimme *rnorms, int *allocatedTargetShifts,
      dummy_type_magma_sprimme **out_svecs, primme_context ctx);
int copy_last_params_to_svdsmagma_sprimme(int stage, dummy_type_sprimme *svals, dummy_type_magma_sprimme *svecs,
      dummy_type_sprimme *rnorms, int allocatedTargetShifts,
      primme_context ctx);
int primme_svds_check_inputmagma_sprimme(dummy_type_sprimme *svals, dummy_type_magma_sprimme *svecs, dummy_type_sprimme *resNorms,
      primme_svds_params *primme_svds);
void matrixMatvecSVDSmagma_sprimme(void *x_, PRIMME_INT *ldx, void *y_,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
void applyPreconditionerSVDSmagma_sprimme(void *x, PRIMME_INT *ldx, void *y,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
int Num_scalInv_Smatrixmagma_sprimme(dummy_type_magma_sprimme *x, PRIMME_INT m, int n, PRIMME_INT ldx,
      dummy_type_sprimme *factors, primme_context ctx);
int globalSum_Rprimme_svdsmagma_sprimme(
      dummy_type_sprimme *sendBuf, dummy_type_sprimme *recvBuf, int count, primme_context ctx);
int compute_resNormmagma_sprimme(dummy_type_magma_sprimme *leftsvec, dummy_type_magma_sprimme *rightsvec, dummy_type_sprimme *rNorm,
      primme_context ctx);
void default_convTestFunmagma_sprimme(double *sval, void *leftsvec_, void *rightsvec_,
      double *rNorm, int *method, int *isConv, primme_svds_params *primme_svds,
      int *ierr);
void convTestFunATAmagma_sprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
void convTestFunAugmagma_sprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
void default_monitor_svdsmagma_sprimme(void *basisSvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedSvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, int *stage, primme_svds_params *primme_svds,
      int *err);
void monitor_single_stagemagma_sprimme(void *basisEvals_, int *basisSize,
      int *basisFlags, int *iblock, int *blockSize, void *basisNorms_,
      int *numConverged, void *lockedEvals_, int *numLocked, int *lockedFlags,
      void *lockedNorms_, int *inner_its, void *LSRes_, const char *msg,
      double *time, primme_event *event, primme_params *primme, int *err);
void monitor_stage1magma_sprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
void monitor_stage2magma_sprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
int Xprimme_svds_auxmagma_cprimme(dummy_type_sprimme *svals, dummy_type_cprimme *svecs, dummy_type_sprimme *resNorms,
      primme_svds_params *primme_svds, primme_op_datatype svals_resNorms_type);
int wrapper_svds_magma_cprimme(void *svals_, void *svecs_, void *resNorms_,
      primme_op_datatype svals_resNorms_type, primme_op_datatype svecs_type,
      int *outInitSize, primme_context ctx);
int comp_doublemagma_cprimme(const void *a, const void *b);
int copy_last_params_from_svdsmagma_cprimme(int stage, dummy_type_sprimme *svals, dummy_type_magma_cprimme *svecs,
      dummy_type_sprimme *rnorms, int *allocatedTargetShifts,
      dummy_type_magma_cprimme **out_svecs, primme_context ctx);
int copy_last_params_to_svdsmagma_cprimme(int stage, dummy_type_sprimme *svals, dummy_type_magma_cprimme *svecs,
      dummy_type_sprimme *rnorms, int allocatedTargetShifts,
      primme_context ctx);
int primme_svds_check_inputmagma_cprimme(dummy_type_sprimme *svals, dummy_type_magma_cprimme *svecs, dummy_type_sprimme *resNorms,
      primme_svds_params *primme_svds);
void matrixMatvecSVDSmagma_cprimme(void *x_, PRIMME_INT *ldx, void *y_,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
void applyPreconditionerSVDSmagma_cprimme(void *x, PRIMME_INT *ldx, void *y,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
int Num_scalInv_Smatrixmagma_cprimme(dummy_type_magma_cprimme *x, PRIMME_INT m, int n, PRIMME_INT ldx,
      dummy_type_sprimme *factors, primme_context ctx);
int globalSum_Rprimme_svdsmagma_cprimme(
      dummy_type_sprimme *sendBuf, dummy_type_sprimme *recvBuf, int count, primme_context ctx);
int compute_resNormmagma_cprimme(dummy_type_magma_cprimme *leftsvec, dummy_type_magma_cprimme *rightsvec, dummy_type_sprimme *rNorm,
      primme_context ctx);
void default_convTestFunmagma_cprimme(double *sval, void *leftsvec_, void *rightsvec_,
      double *rNorm, int *method, int *isConv, primme_svds_params *primme_svds,
      int *ierr);
void convTestFunATAmagma_cprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
void convTestFunAugmagma_cprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
void default_monitor_svdsmagma_cprimme(void *basisSvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedSvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, int *stage, primme_svds_params *primme_svds,
      int *err);
void monitor_single_stagemagma_cprimme(void *basisEvals_, int *basisSize,
      int *basisFlags, int *iblock, int *blockSize, void *basisNorms_,
      int *numConverged, void *lockedEvals_, int *numLocked, int *lockedFlags,
      void *lockedNorms_, int *inner_its, void *LSRes_, const char *msg,
      double *time, primme_event *event, primme_params *primme, int *err);
void monitor_stage1magma_cprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
void monitor_stage2magma_cprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
int Xprimme_svds_auxmagma_dprimme(dummy_type_dprimme *svals, dummy_type_dprimme *svecs, dummy_type_dprimme *resNorms,
      primme_svds_params *primme_svds, primme_op_datatype svals_resNorms_type);
int wrapper_svds_magma_dprimme(void *svals_, void *svecs_, void *resNorms_,
      primme_op_datatype svals_resNorms_type, primme_op_datatype svecs_type,
      int *outInitSize, primme_context ctx);
int comp_doublemagma_dprimme(const void *a, const void *b);
int copy_last_params_from_svdsmagma_dprimme(int stage, dummy_type_dprimme *svals, dummy_type_magma_dprimme *svecs,
      dummy_type_dprimme *rnorms, int *allocatedTargetShifts,
      dummy_type_magma_dprimme **out_svecs, primme_context ctx);
int copy_last_params_to_svdsmagma_dprimme(int stage, dummy_type_dprimme *svals, dummy_type_magma_dprimme *svecs,
      dummy_type_dprimme *rnorms, int allocatedTargetShifts,
      primme_context ctx);
int primme_svds_check_inputmagma_dprimme(dummy_type_dprimme *svals, dummy_type_magma_dprimme *svecs, dummy_type_dprimme *resNorms,
      primme_svds_params *primme_svds);
void matrixMatvecSVDSmagma_dprimme(void *x_, PRIMME_INT *ldx, void *y_,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
void applyPreconditionerSVDSmagma_dprimme(void *x, PRIMME_INT *ldx, void *y,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
int Num_scalInv_Smatrixmagma_dprimme(dummy_type_magma_dprimme *x, PRIMME_INT m, int n, PRIMME_INT ldx,
      dummy_type_dprimme *factors, primme_context ctx);
int globalSum_Rprimme_svdsmagma_dprimme(
      dummy_type_dprimme *sendBuf, dummy_type_dprimme *recvBuf, int count, primme_context ctx);
int compute_resNormmagma_dprimme(dummy_type_magma_dprimme *leftsvec, dummy_type_magma_dprimme *rightsvec, dummy_type_dprimme *rNorm,
      primme_context ctx);
void default_convTestFunmagma_dprimme(double *sval, void *leftsvec_, void *rightsvec_,
      double *rNorm, int *method, int *isConv, primme_svds_params *primme_svds,
      int *ierr);
void convTestFunATAmagma_dprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
void convTestFunAugmagma_dprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
void default_monitor_svdsmagma_dprimme(void *basisSvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedSvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, int *stage, primme_svds_params *primme_svds,
      int *err);
void monitor_single_stagemagma_dprimme(void *basisEvals_, int *basisSize,
      int *basisFlags, int *iblock, int *blockSize, void *basisNorms_,
      int *numConverged, void *lockedEvals_, int *numLocked, int *lockedFlags,
      void *lockedNorms_, int *inner_its, void *LSRes_, const char *msg,
      double *time, primme_event *event, primme_params *primme, int *err);
void monitor_stage1magma_dprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
void monitor_stage2magma_dprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
int Xprimme_svds_auxmagma_zprimme(dummy_type_dprimme *svals, dummy_type_zprimme *svecs, dummy_type_dprimme *resNorms,
      primme_svds_params *primme_svds, primme_op_datatype svals_resNorms_type);
int wrapper_svds_magma_zprimme(void *svals_, void *svecs_, void *resNorms_,
      primme_op_datatype svals_resNorms_type, primme_op_datatype svecs_type,
      int *outInitSize, primme_context ctx);
int comp_doublemagma_zprimme(const void *a, const void *b);
int copy_last_params_from_svdsmagma_zprimme(int stage, dummy_type_dprimme *svals, dummy_type_magma_zprimme *svecs,
      dummy_type_dprimme *rnorms, int *allocatedTargetShifts,
      dummy_type_magma_zprimme **out_svecs, primme_context ctx);
int copy_last_params_to_svdsmagma_zprimme(int stage, dummy_type_dprimme *svals, dummy_type_magma_zprimme *svecs,
      dummy_type_dprimme *rnorms, int allocatedTargetShifts,
      primme_context ctx);
int primme_svds_check_inputmagma_zprimme(dummy_type_dprimme *svals, dummy_type_magma_zprimme *svecs, dummy_type_dprimme *resNorms,
      primme_svds_params *primme_svds);
void matrixMatvecSVDSmagma_zprimme(void *x_, PRIMME_INT *ldx, void *y_,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
void applyPreconditionerSVDSmagma_zprimme(void *x, PRIMME_INT *ldx, void *y,
      PRIMME_INT *ldy, int *blockSize, primme_params *primme, int *ierr);
int Num_scalInv_Smatrixmagma_zprimme(dummy_type_magma_zprimme *x, PRIMME_INT m, int n, PRIMME_INT ldx,
      dummy_type_dprimme *factors, primme_context ctx);
int globalSum_Rprimme_svdsmagma_zprimme(
      dummy_type_dprimme *sendBuf, dummy_type_dprimme *recvBuf, int count, primme_context ctx);
int compute_resNormmagma_zprimme(dummy_type_magma_zprimme *leftsvec, dummy_type_magma_zprimme *rightsvec, dummy_type_dprimme *rNorm,
      primme_context ctx);
void default_convTestFunmagma_zprimme(double *sval, void *leftsvec_, void *rightsvec_,
      double *rNorm, int *method, int *isConv, primme_svds_params *primme_svds,
      int *ierr);
void convTestFunATAmagma_zprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
void convTestFunAugmagma_zprimme(double *eval, void *evec, double *rNorm, int *isConv,
      primme_params *primme, int *ierr);
void default_monitor_svdsmagma_zprimme(void *basisSvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedSvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, int *stage, primme_svds_params *primme_svds,
      int *err);
void monitor_single_stagemagma_zprimme(void *basisEvals_, int *basisSize,
      int *basisFlags, int *iblock, int *blockSize, void *basisNorms_,
      int *numConverged, void *lockedEvals_, int *numLocked, int *lockedFlags,
      void *lockedNorms_, int *inner_its, void *LSRes_, const char *msg,
      double *time, primme_event *event, primme_params *primme, int *err);
void monitor_stage1magma_zprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
void monitor_stage2magma_zprimme(void *basisEvals_, int *basisSize, int *basisFlags,
      int *iblock, int *blockSize, void *basisNorms_, int *numConverged,
      void *lockedEvals_, int *numLocked, int *lockedFlags, void *lockedNorms_,
      int *inner_its, void *LSRes_, const char *msg, double *time,
      primme_event *event, primme_params *primme, int *err);
#endif
