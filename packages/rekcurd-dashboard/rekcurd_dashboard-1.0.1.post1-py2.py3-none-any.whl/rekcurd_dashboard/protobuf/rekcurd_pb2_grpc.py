# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import rekcurd_pb2 as rekcurd__pb2


class HealthStub(object):
  """gRPC official health check service.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Check = channel.unary_unary(
        '/rekcurd.Health/Check',
        request_serializer=rekcurd__pb2.HealthCheckRequest.SerializeToString,
        response_deserializer=rekcurd__pb2.HealthCheckResponse.FromString,
        )


class HealthServicer(object):
  """gRPC official health check service.
  """

  def Check(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_HealthServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Check': grpc.unary_unary_rpc_method_handler(
          servicer.Check,
          request_deserializer=rekcurd__pb2.HealthCheckRequest.FromString,
          response_serializer=rekcurd__pb2.HealthCheckResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'rekcurd.Health', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class RekcurdDashboardStub(object):
  """Rekcurd Dashboard service.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ServiceInfo = channel.unary_unary(
        '/rekcurd.RekcurdDashboard/ServiceInfo',
        request_serializer=rekcurd__pb2.ServiceInfoRequest.SerializeToString,
        response_deserializer=rekcurd__pb2.ServiceInfoResponse.FromString,
        )
    self.UploadModel = channel.stream_unary(
        '/rekcurd.RekcurdDashboard/UploadModel',
        request_serializer=rekcurd__pb2.UploadModelRequest.SerializeToString,
        response_deserializer=rekcurd__pb2.ModelResponse.FromString,
        )
    self.SwitchModel = channel.unary_unary(
        '/rekcurd.RekcurdDashboard/SwitchModel',
        request_serializer=rekcurd__pb2.SwitchModelRequest.SerializeToString,
        response_deserializer=rekcurd__pb2.ModelResponse.FromString,
        )
    self.UploadEvaluationData = channel.stream_unary(
        '/rekcurd.RekcurdDashboard/UploadEvaluationData',
        request_serializer=rekcurd__pb2.UploadEvaluationDataRequest.SerializeToString,
        response_deserializer=rekcurd__pb2.UploadEvaluationDataResponse.FromString,
        )
    self.EvaluateModel = channel.stream_unary(
        '/rekcurd.RekcurdDashboard/EvaluateModel',
        request_serializer=rekcurd__pb2.EvaluateModelRequest.SerializeToString,
        response_deserializer=rekcurd__pb2.EvaluateModelResponse.FromString,
        )
    self.EvaluationResult = channel.unary_stream(
        '/rekcurd.RekcurdDashboard/EvaluationResult',
        request_serializer=rekcurd__pb2.EvaluationResultRequest.SerializeToString,
        response_deserializer=rekcurd__pb2.EvaluationResultResponse.FromString,
        )


class RekcurdDashboardServicer(object):
  """Rekcurd Dashboard service.
  """

  def ServiceInfo(self, request, context):
    """Get Service Info.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UploadModel(self, request_iterator, context):
    """Upload your latest ML model.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SwitchModel(self, request, context):
    """Switch your ML model to run.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UploadEvaluationData(self, request_iterator, context):
    """Upload data for evaluation
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def EvaluateModel(self, request_iterator, context):
    """Evaluate the accuracy of your ML model.
    Deprecated: `stream` is deprecated. upload evaluation data by using UploadEvaluationData
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def EvaluationResult(self, request, context):
    """Get detailed result of EvaluateModel
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RekcurdDashboardServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ServiceInfo': grpc.unary_unary_rpc_method_handler(
          servicer.ServiceInfo,
          request_deserializer=rekcurd__pb2.ServiceInfoRequest.FromString,
          response_serializer=rekcurd__pb2.ServiceInfoResponse.SerializeToString,
      ),
      'UploadModel': grpc.stream_unary_rpc_method_handler(
          servicer.UploadModel,
          request_deserializer=rekcurd__pb2.UploadModelRequest.FromString,
          response_serializer=rekcurd__pb2.ModelResponse.SerializeToString,
      ),
      'SwitchModel': grpc.unary_unary_rpc_method_handler(
          servicer.SwitchModel,
          request_deserializer=rekcurd__pb2.SwitchModelRequest.FromString,
          response_serializer=rekcurd__pb2.ModelResponse.SerializeToString,
      ),
      'UploadEvaluationData': grpc.stream_unary_rpc_method_handler(
          servicer.UploadEvaluationData,
          request_deserializer=rekcurd__pb2.UploadEvaluationDataRequest.FromString,
          response_serializer=rekcurd__pb2.UploadEvaluationDataResponse.SerializeToString,
      ),
      'EvaluateModel': grpc.stream_unary_rpc_method_handler(
          servicer.EvaluateModel,
          request_deserializer=rekcurd__pb2.EvaluateModelRequest.FromString,
          response_serializer=rekcurd__pb2.EvaluateModelResponse.SerializeToString,
      ),
      'EvaluationResult': grpc.unary_stream_rpc_method_handler(
          servicer.EvaluationResult,
          request_deserializer=rekcurd__pb2.EvaluationResultRequest.FromString,
          response_serializer=rekcurd__pb2.EvaluationResultResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'rekcurd.RekcurdDashboard', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class RekcurdWorkerStub(object):
  """Rekcurd worker service.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Predict_String_String = channel.unary_unary(
        '/rekcurd.RekcurdWorker/Predict_String_String',
        request_serializer=rekcurd__pb2.StringInput.SerializeToString,
        response_deserializer=rekcurd__pb2.StringOutput.FromString,
        )
    self.Predict_String_Bytes = channel.unary_stream(
        '/rekcurd.RekcurdWorker/Predict_String_Bytes',
        request_serializer=rekcurd__pb2.StringInput.SerializeToString,
        response_deserializer=rekcurd__pb2.BytesOutput.FromString,
        )
    self.Predict_String_ArrInt = channel.unary_unary(
        '/rekcurd.RekcurdWorker/Predict_String_ArrInt',
        request_serializer=rekcurd__pb2.StringInput.SerializeToString,
        response_deserializer=rekcurd__pb2.ArrIntOutput.FromString,
        )
    self.Predict_String_ArrFloat = channel.unary_unary(
        '/rekcurd.RekcurdWorker/Predict_String_ArrFloat',
        request_serializer=rekcurd__pb2.StringInput.SerializeToString,
        response_deserializer=rekcurd__pb2.ArrFloatOutput.FromString,
        )
    self.Predict_String_ArrString = channel.unary_unary(
        '/rekcurd.RekcurdWorker/Predict_String_ArrString',
        request_serializer=rekcurd__pb2.StringInput.SerializeToString,
        response_deserializer=rekcurd__pb2.ArrStringOutput.FromString,
        )
    self.Predict_Bytes_String = channel.stream_unary(
        '/rekcurd.RekcurdWorker/Predict_Bytes_String',
        request_serializer=rekcurd__pb2.BytesInput.SerializeToString,
        response_deserializer=rekcurd__pb2.StringOutput.FromString,
        )
    self.Predict_Bytes_Bytes = channel.stream_stream(
        '/rekcurd.RekcurdWorker/Predict_Bytes_Bytes',
        request_serializer=rekcurd__pb2.BytesInput.SerializeToString,
        response_deserializer=rekcurd__pb2.BytesOutput.FromString,
        )
    self.Predict_Bytes_ArrInt = channel.stream_unary(
        '/rekcurd.RekcurdWorker/Predict_Bytes_ArrInt',
        request_serializer=rekcurd__pb2.BytesInput.SerializeToString,
        response_deserializer=rekcurd__pb2.ArrIntOutput.FromString,
        )
    self.Predict_Bytes_ArrFloat = channel.stream_unary(
        '/rekcurd.RekcurdWorker/Predict_Bytes_ArrFloat',
        request_serializer=rekcurd__pb2.BytesInput.SerializeToString,
        response_deserializer=rekcurd__pb2.ArrFloatOutput.FromString,
        )
    self.Predict_Bytes_ArrString = channel.stream_unary(
        '/rekcurd.RekcurdWorker/Predict_Bytes_ArrString',
        request_serializer=rekcurd__pb2.BytesInput.SerializeToString,
        response_deserializer=rekcurd__pb2.ArrStringOutput.FromString,
        )
    self.Predict_ArrInt_String = channel.unary_unary(
        '/rekcurd.RekcurdWorker/Predict_ArrInt_String',
        request_serializer=rekcurd__pb2.ArrIntInput.SerializeToString,
        response_deserializer=rekcurd__pb2.StringOutput.FromString,
        )
    self.Predict_ArrInt_Bytes = channel.unary_stream(
        '/rekcurd.RekcurdWorker/Predict_ArrInt_Bytes',
        request_serializer=rekcurd__pb2.ArrIntInput.SerializeToString,
        response_deserializer=rekcurd__pb2.BytesOutput.FromString,
        )
    self.Predict_ArrInt_ArrInt = channel.unary_unary(
        '/rekcurd.RekcurdWorker/Predict_ArrInt_ArrInt',
        request_serializer=rekcurd__pb2.ArrIntInput.SerializeToString,
        response_deserializer=rekcurd__pb2.ArrIntOutput.FromString,
        )
    self.Predict_ArrInt_ArrFloat = channel.unary_unary(
        '/rekcurd.RekcurdWorker/Predict_ArrInt_ArrFloat',
        request_serializer=rekcurd__pb2.ArrIntInput.SerializeToString,
        response_deserializer=rekcurd__pb2.ArrFloatOutput.FromString,
        )
    self.Predict_ArrInt_ArrString = channel.unary_unary(
        '/rekcurd.RekcurdWorker/Predict_ArrInt_ArrString',
        request_serializer=rekcurd__pb2.ArrIntInput.SerializeToString,
        response_deserializer=rekcurd__pb2.ArrStringOutput.FromString,
        )
    self.Predict_ArrFloat_String = channel.unary_unary(
        '/rekcurd.RekcurdWorker/Predict_ArrFloat_String',
        request_serializer=rekcurd__pb2.ArrFloatInput.SerializeToString,
        response_deserializer=rekcurd__pb2.StringOutput.FromString,
        )
    self.Predict_ArrFloat_Bytes = channel.unary_stream(
        '/rekcurd.RekcurdWorker/Predict_ArrFloat_Bytes',
        request_serializer=rekcurd__pb2.ArrFloatInput.SerializeToString,
        response_deserializer=rekcurd__pb2.BytesOutput.FromString,
        )
    self.Predict_ArrFloat_ArrInt = channel.unary_unary(
        '/rekcurd.RekcurdWorker/Predict_ArrFloat_ArrInt',
        request_serializer=rekcurd__pb2.ArrFloatInput.SerializeToString,
        response_deserializer=rekcurd__pb2.ArrIntOutput.FromString,
        )
    self.Predict_ArrFloat_ArrFloat = channel.unary_unary(
        '/rekcurd.RekcurdWorker/Predict_ArrFloat_ArrFloat',
        request_serializer=rekcurd__pb2.ArrFloatInput.SerializeToString,
        response_deserializer=rekcurd__pb2.ArrFloatOutput.FromString,
        )
    self.Predict_ArrFloat_ArrString = channel.unary_unary(
        '/rekcurd.RekcurdWorker/Predict_ArrFloat_ArrString',
        request_serializer=rekcurd__pb2.ArrFloatInput.SerializeToString,
        response_deserializer=rekcurd__pb2.ArrStringOutput.FromString,
        )
    self.Predict_ArrString_String = channel.unary_unary(
        '/rekcurd.RekcurdWorker/Predict_ArrString_String',
        request_serializer=rekcurd__pb2.ArrStringInput.SerializeToString,
        response_deserializer=rekcurd__pb2.StringOutput.FromString,
        )
    self.Predict_ArrString_Bytes = channel.unary_stream(
        '/rekcurd.RekcurdWorker/Predict_ArrString_Bytes',
        request_serializer=rekcurd__pb2.ArrStringInput.SerializeToString,
        response_deserializer=rekcurd__pb2.BytesOutput.FromString,
        )
    self.Predict_ArrString_ArrInt = channel.unary_unary(
        '/rekcurd.RekcurdWorker/Predict_ArrString_ArrInt',
        request_serializer=rekcurd__pb2.ArrStringInput.SerializeToString,
        response_deserializer=rekcurd__pb2.ArrIntOutput.FromString,
        )
    self.Predict_ArrString_ArrFloat = channel.unary_unary(
        '/rekcurd.RekcurdWorker/Predict_ArrString_ArrFloat',
        request_serializer=rekcurd__pb2.ArrStringInput.SerializeToString,
        response_deserializer=rekcurd__pb2.ArrFloatOutput.FromString,
        )
    self.Predict_ArrString_ArrString = channel.unary_unary(
        '/rekcurd.RekcurdWorker/Predict_ArrString_ArrString',
        request_serializer=rekcurd__pb2.ArrStringInput.SerializeToString,
        response_deserializer=rekcurd__pb2.ArrStringOutput.FromString,
        )


class RekcurdWorkerServicer(object):
  """Rekcurd worker service.
  """

  def Predict_String_String(self, request, context):
    """Input string, output string.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_String_Bytes(self, request, context):
    """Input string, output bytes.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_String_ArrInt(self, request, context):
    """Input string, output array[int].
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_String_ArrFloat(self, request, context):
    """Input string, output array[float].
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_String_ArrString(self, request, context):
    """Input string, output array[string].
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_Bytes_String(self, request_iterator, context):
    """Input bytes, output string.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_Bytes_Bytes(self, request_iterator, context):
    """Input bytes, output bytes.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_Bytes_ArrInt(self, request_iterator, context):
    """Input bytes, output array[int].
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_Bytes_ArrFloat(self, request_iterator, context):
    """Input bytes, output array[float].
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_Bytes_ArrString(self, request_iterator, context):
    """Input bytes, output array[string].
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_ArrInt_String(self, request, context):
    """Input array[int], output string.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_ArrInt_Bytes(self, request, context):
    """Input array[int], output bytes.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_ArrInt_ArrInt(self, request, context):
    """Input array[int], output array[int].
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_ArrInt_ArrFloat(self, request, context):
    """Input array[int], output array[float].
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_ArrInt_ArrString(self, request, context):
    """Input array[int], output array[string].
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_ArrFloat_String(self, request, context):
    """Input array[float], output string.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_ArrFloat_Bytes(self, request, context):
    """Input array[float], output bytes.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_ArrFloat_ArrInt(self, request, context):
    """Input array[float], output array[int].
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_ArrFloat_ArrFloat(self, request, context):
    """Input array[float], output array[float].
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_ArrFloat_ArrString(self, request, context):
    """Input array[float], output array[string].
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_ArrString_String(self, request, context):
    """Input array[string], output string.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_ArrString_Bytes(self, request, context):
    """Input array[string], output bytes.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_ArrString_ArrInt(self, request, context):
    """Input array[string], output array[int].
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_ArrString_ArrFloat(self, request, context):
    """Input array[string], output array[float].
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Predict_ArrString_ArrString(self, request, context):
    """Input array[string], output array[string].
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RekcurdWorkerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Predict_String_String': grpc.unary_unary_rpc_method_handler(
          servicer.Predict_String_String,
          request_deserializer=rekcurd__pb2.StringInput.FromString,
          response_serializer=rekcurd__pb2.StringOutput.SerializeToString,
      ),
      'Predict_String_Bytes': grpc.unary_stream_rpc_method_handler(
          servicer.Predict_String_Bytes,
          request_deserializer=rekcurd__pb2.StringInput.FromString,
          response_serializer=rekcurd__pb2.BytesOutput.SerializeToString,
      ),
      'Predict_String_ArrInt': grpc.unary_unary_rpc_method_handler(
          servicer.Predict_String_ArrInt,
          request_deserializer=rekcurd__pb2.StringInput.FromString,
          response_serializer=rekcurd__pb2.ArrIntOutput.SerializeToString,
      ),
      'Predict_String_ArrFloat': grpc.unary_unary_rpc_method_handler(
          servicer.Predict_String_ArrFloat,
          request_deserializer=rekcurd__pb2.StringInput.FromString,
          response_serializer=rekcurd__pb2.ArrFloatOutput.SerializeToString,
      ),
      'Predict_String_ArrString': grpc.unary_unary_rpc_method_handler(
          servicer.Predict_String_ArrString,
          request_deserializer=rekcurd__pb2.StringInput.FromString,
          response_serializer=rekcurd__pb2.ArrStringOutput.SerializeToString,
      ),
      'Predict_Bytes_String': grpc.stream_unary_rpc_method_handler(
          servicer.Predict_Bytes_String,
          request_deserializer=rekcurd__pb2.BytesInput.FromString,
          response_serializer=rekcurd__pb2.StringOutput.SerializeToString,
      ),
      'Predict_Bytes_Bytes': grpc.stream_stream_rpc_method_handler(
          servicer.Predict_Bytes_Bytes,
          request_deserializer=rekcurd__pb2.BytesInput.FromString,
          response_serializer=rekcurd__pb2.BytesOutput.SerializeToString,
      ),
      'Predict_Bytes_ArrInt': grpc.stream_unary_rpc_method_handler(
          servicer.Predict_Bytes_ArrInt,
          request_deserializer=rekcurd__pb2.BytesInput.FromString,
          response_serializer=rekcurd__pb2.ArrIntOutput.SerializeToString,
      ),
      'Predict_Bytes_ArrFloat': grpc.stream_unary_rpc_method_handler(
          servicer.Predict_Bytes_ArrFloat,
          request_deserializer=rekcurd__pb2.BytesInput.FromString,
          response_serializer=rekcurd__pb2.ArrFloatOutput.SerializeToString,
      ),
      'Predict_Bytes_ArrString': grpc.stream_unary_rpc_method_handler(
          servicer.Predict_Bytes_ArrString,
          request_deserializer=rekcurd__pb2.BytesInput.FromString,
          response_serializer=rekcurd__pb2.ArrStringOutput.SerializeToString,
      ),
      'Predict_ArrInt_String': grpc.unary_unary_rpc_method_handler(
          servicer.Predict_ArrInt_String,
          request_deserializer=rekcurd__pb2.ArrIntInput.FromString,
          response_serializer=rekcurd__pb2.StringOutput.SerializeToString,
      ),
      'Predict_ArrInt_Bytes': grpc.unary_stream_rpc_method_handler(
          servicer.Predict_ArrInt_Bytes,
          request_deserializer=rekcurd__pb2.ArrIntInput.FromString,
          response_serializer=rekcurd__pb2.BytesOutput.SerializeToString,
      ),
      'Predict_ArrInt_ArrInt': grpc.unary_unary_rpc_method_handler(
          servicer.Predict_ArrInt_ArrInt,
          request_deserializer=rekcurd__pb2.ArrIntInput.FromString,
          response_serializer=rekcurd__pb2.ArrIntOutput.SerializeToString,
      ),
      'Predict_ArrInt_ArrFloat': grpc.unary_unary_rpc_method_handler(
          servicer.Predict_ArrInt_ArrFloat,
          request_deserializer=rekcurd__pb2.ArrIntInput.FromString,
          response_serializer=rekcurd__pb2.ArrFloatOutput.SerializeToString,
      ),
      'Predict_ArrInt_ArrString': grpc.unary_unary_rpc_method_handler(
          servicer.Predict_ArrInt_ArrString,
          request_deserializer=rekcurd__pb2.ArrIntInput.FromString,
          response_serializer=rekcurd__pb2.ArrStringOutput.SerializeToString,
      ),
      'Predict_ArrFloat_String': grpc.unary_unary_rpc_method_handler(
          servicer.Predict_ArrFloat_String,
          request_deserializer=rekcurd__pb2.ArrFloatInput.FromString,
          response_serializer=rekcurd__pb2.StringOutput.SerializeToString,
      ),
      'Predict_ArrFloat_Bytes': grpc.unary_stream_rpc_method_handler(
          servicer.Predict_ArrFloat_Bytes,
          request_deserializer=rekcurd__pb2.ArrFloatInput.FromString,
          response_serializer=rekcurd__pb2.BytesOutput.SerializeToString,
      ),
      'Predict_ArrFloat_ArrInt': grpc.unary_unary_rpc_method_handler(
          servicer.Predict_ArrFloat_ArrInt,
          request_deserializer=rekcurd__pb2.ArrFloatInput.FromString,
          response_serializer=rekcurd__pb2.ArrIntOutput.SerializeToString,
      ),
      'Predict_ArrFloat_ArrFloat': grpc.unary_unary_rpc_method_handler(
          servicer.Predict_ArrFloat_ArrFloat,
          request_deserializer=rekcurd__pb2.ArrFloatInput.FromString,
          response_serializer=rekcurd__pb2.ArrFloatOutput.SerializeToString,
      ),
      'Predict_ArrFloat_ArrString': grpc.unary_unary_rpc_method_handler(
          servicer.Predict_ArrFloat_ArrString,
          request_deserializer=rekcurd__pb2.ArrFloatInput.FromString,
          response_serializer=rekcurd__pb2.ArrStringOutput.SerializeToString,
      ),
      'Predict_ArrString_String': grpc.unary_unary_rpc_method_handler(
          servicer.Predict_ArrString_String,
          request_deserializer=rekcurd__pb2.ArrStringInput.FromString,
          response_serializer=rekcurd__pb2.StringOutput.SerializeToString,
      ),
      'Predict_ArrString_Bytes': grpc.unary_stream_rpc_method_handler(
          servicer.Predict_ArrString_Bytes,
          request_deserializer=rekcurd__pb2.ArrStringInput.FromString,
          response_serializer=rekcurd__pb2.BytesOutput.SerializeToString,
      ),
      'Predict_ArrString_ArrInt': grpc.unary_unary_rpc_method_handler(
          servicer.Predict_ArrString_ArrInt,
          request_deserializer=rekcurd__pb2.ArrStringInput.FromString,
          response_serializer=rekcurd__pb2.ArrIntOutput.SerializeToString,
      ),
      'Predict_ArrString_ArrFloat': grpc.unary_unary_rpc_method_handler(
          servicer.Predict_ArrString_ArrFloat,
          request_deserializer=rekcurd__pb2.ArrStringInput.FromString,
          response_serializer=rekcurd__pb2.ArrFloatOutput.SerializeToString,
      ),
      'Predict_ArrString_ArrString': grpc.unary_unary_rpc_method_handler(
          servicer.Predict_ArrString_ArrString,
          request_deserializer=rekcurd__pb2.ArrStringInput.FromString,
          response_serializer=rekcurd__pb2.ArrStringOutput.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'rekcurd.RekcurdWorker', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
