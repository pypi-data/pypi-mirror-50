# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkReplaceFeatureMapNanInfImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkReplaceFeatureMapNanInfImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkReplaceFeatureMapNanInfImageFilterPython
            return _itkReplaceFeatureMapNanInfImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkReplaceFeatureMapNanInfImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkReplaceFeatureMapNanInfImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkReplaceFeatureMapNanInfImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkImagePython
import stdcomplexPython
import pyBasePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import ITKCommonBasePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkRGBAPixelPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkImageSourceCommonPython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterCommonPython
import itkSimpleDataObjectDecoratorPython
import itkArrayPython

def itkReplaceFeatureMapNanInfImageFilterVIF3_New():
  return itkReplaceFeatureMapNanInfImageFilterVIF3.New()


def itkReplaceFeatureMapNanInfImageFilterIVF53_New():
  return itkReplaceFeatureMapNanInfImageFilterIVF53.New()


def itkImageFileWriterIVF53_New():
  return itkImageFileWriterIVF53.New()


def itkImageFileReaderIVF53_New():
  return itkImageFileReaderIVF53.New()


def itkImageToImageFilterIVF53IVF53_New():
  return itkImageToImageFilterIVF53IVF53.New()


def itkImageToImageFilterIVF53IVF53_New():
  return itkImageToImageFilterIVF53IVF53.New()


def itkImageToImageFilterIVF53IVF53_New():
  return itkImageToImageFilterIVF53IVF53.New()


def itkImageToImageFilterIVF53IVF53_New():
  return itkImageToImageFilterIVF53IVF53.New()


def itkImageSourceIVF53_New():
  return itkImageSourceIVF53.New()


def itkImageVF53_New():
  return itkImageVF53.New()

class vectoritkImageVF53(object):
    """Proxy of C++ std::vector<(itkImageVF53_Pointer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        """iterator(vectoritkImageVF53 self) -> SwigPyIterator"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """__nonzero__(vectoritkImageVF53 self) -> bool"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___nonzero__(self)


    def __bool__(self):
        """__bool__(vectoritkImageVF53 self) -> bool"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___bool__(self)


    def __len__(self):
        """__len__(vectoritkImageVF53 self) -> std::vector< itkImageVF53_Pointer >::size_type"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___len__(self)


    def __getslice__(self, i, j):
        """__getslice__(vectoritkImageVF53 self, std::vector< itkImageVF53_Pointer >::difference_type i, std::vector< itkImageVF53_Pointer >::difference_type j) -> vectoritkImageVF53"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(vectoritkImageVF53 self, std::vector< itkImageVF53_Pointer >::difference_type i, std::vector< itkImageVF53_Pointer >::difference_type j)
        __setslice__(vectoritkImageVF53 self, std::vector< itkImageVF53_Pointer >::difference_type i, std::vector< itkImageVF53_Pointer >::difference_type j, vectoritkImageVF53 v)
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___setslice__(self, *args)


    def __delslice__(self, i, j):
        """__delslice__(vectoritkImageVF53 self, std::vector< itkImageVF53_Pointer >::difference_type i, std::vector< itkImageVF53_Pointer >::difference_type j)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(vectoritkImageVF53 self, std::vector< itkImageVF53_Pointer >::difference_type i)
        __delitem__(vectoritkImageVF53 self, PySliceObject * slice)
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(vectoritkImageVF53 self, PySliceObject * slice) -> vectoritkImageVF53
        __getitem__(vectoritkImageVF53 self, std::vector< itkImageVF53_Pointer >::difference_type i) -> std::vector< itkImageVF53_Pointer >::value_type const &
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(vectoritkImageVF53 self, PySliceObject * slice, vectoritkImageVF53 v)
        __setitem__(vectoritkImageVF53 self, PySliceObject * slice)
        __setitem__(vectoritkImageVF53 self, std::vector< itkImageVF53_Pointer >::difference_type i, std::vector< itkImageVF53_Pointer >::value_type const & x)
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___setitem__(self, *args)


    def pop(self):
        """pop(vectoritkImageVF53 self) -> std::vector< itkImageVF53_Pointer >::value_type"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_pop(self)


    def append(self, x):
        """append(vectoritkImageVF53 self, std::vector< itkImageVF53_Pointer >::value_type const & x)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_append(self, x)


    def empty(self):
        """empty(vectoritkImageVF53 self) -> bool"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_empty(self)


    def size(self):
        """size(vectoritkImageVF53 self) -> std::vector< itkImageVF53_Pointer >::size_type"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_size(self)


    def swap(self, v):
        """swap(vectoritkImageVF53 self, vectoritkImageVF53 v)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_swap(self, v)


    def begin(self):
        """begin(vectoritkImageVF53 self) -> std::vector< itkImageVF53_Pointer >::iterator"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_begin(self)


    def end(self):
        """end(vectoritkImageVF53 self) -> std::vector< itkImageVF53_Pointer >::iterator"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_end(self)


    def rbegin(self):
        """rbegin(vectoritkImageVF53 self) -> std::vector< itkImageVF53_Pointer >::reverse_iterator"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_rbegin(self)


    def rend(self):
        """rend(vectoritkImageVF53 self) -> std::vector< itkImageVF53_Pointer >::reverse_iterator"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_rend(self)


    def clear(self):
        """clear(vectoritkImageVF53 self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_clear(self)


    def get_allocator(self):
        """get_allocator(vectoritkImageVF53 self) -> std::vector< itkImageVF53_Pointer >::allocator_type"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_get_allocator(self)


    def pop_back(self):
        """pop_back(vectoritkImageVF53 self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_pop_back(self)


    def erase(self, *args):
        """
        erase(vectoritkImageVF53 self, std::vector< itkImageVF53_Pointer >::iterator pos) -> std::vector< itkImageVF53_Pointer >::iterator
        erase(vectoritkImageVF53 self, std::vector< itkImageVF53_Pointer >::iterator first, std::vector< itkImageVF53_Pointer >::iterator last) -> std::vector< itkImageVF53_Pointer >::iterator
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(itkImageVF53_Pointer)> self) -> vectoritkImageVF53
        __init__(std::vector<(itkImageVF53_Pointer)> self, vectoritkImageVF53 arg2) -> vectoritkImageVF53
        __init__(std::vector<(itkImageVF53_Pointer)> self, std::vector< itkImageVF53_Pointer >::size_type size) -> vectoritkImageVF53
        __init__(std::vector<(itkImageVF53_Pointer)> self, std::vector< itkImageVF53_Pointer >::size_type size, std::vector< itkImageVF53_Pointer >::value_type const & value) -> vectoritkImageVF53
        """
        _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_swiginit(self, _itkReplaceFeatureMapNanInfImageFilterPython.new_vectoritkImageVF53(*args))

    def push_back(self, x):
        """push_back(vectoritkImageVF53 self, std::vector< itkImageVF53_Pointer >::value_type const & x)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_push_back(self, x)


    def front(self):
        """front(vectoritkImageVF53 self) -> std::vector< itkImageVF53_Pointer >::value_type const &"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_front(self)


    def back(self):
        """back(vectoritkImageVF53 self) -> std::vector< itkImageVF53_Pointer >::value_type const &"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_back(self)


    def assign(self, n, x):
        """assign(vectoritkImageVF53 self, std::vector< itkImageVF53_Pointer >::size_type n, std::vector< itkImageVF53_Pointer >::value_type const & x)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_assign(self, n, x)


    def resize(self, *args):
        """
        resize(vectoritkImageVF53 self, std::vector< itkImageVF53_Pointer >::size_type new_size)
        resize(vectoritkImageVF53 self, std::vector< itkImageVF53_Pointer >::size_type new_size, std::vector< itkImageVF53_Pointer >::value_type const & x)
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_resize(self, *args)


    def insert(self, *args):
        """
        insert(vectoritkImageVF53 self, std::vector< itkImageVF53_Pointer >::iterator pos, std::vector< itkImageVF53_Pointer >::value_type const & x) -> std::vector< itkImageVF53_Pointer >::iterator
        insert(vectoritkImageVF53 self, std::vector< itkImageVF53_Pointer >::iterator pos, std::vector< itkImageVF53_Pointer >::size_type n, std::vector< itkImageVF53_Pointer >::value_type const & x)
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_insert(self, *args)


    def reserve(self, n):
        """reserve(vectoritkImageVF53 self, std::vector< itkImageVF53_Pointer >::size_type n)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_reserve(self, n)


    def capacity(self):
        """capacity(vectoritkImageVF53 self) -> std::vector< itkImageVF53_Pointer >::size_type"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_capacity(self)

    __swig_destroy__ = _itkReplaceFeatureMapNanInfImageFilterPython.delete_vectoritkImageVF53
vectoritkImageVF53.iterator = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_iterator, None, vectoritkImageVF53)
vectoritkImageVF53.__nonzero__ = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___nonzero__, None, vectoritkImageVF53)
vectoritkImageVF53.__bool__ = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___bool__, None, vectoritkImageVF53)
vectoritkImageVF53.__len__ = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___len__, None, vectoritkImageVF53)
vectoritkImageVF53.__getslice__ = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___getslice__, None, vectoritkImageVF53)
vectoritkImageVF53.__setslice__ = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___setslice__, None, vectoritkImageVF53)
vectoritkImageVF53.__delslice__ = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___delslice__, None, vectoritkImageVF53)
vectoritkImageVF53.__delitem__ = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___delitem__, None, vectoritkImageVF53)
vectoritkImageVF53.__getitem__ = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___getitem__, None, vectoritkImageVF53)
vectoritkImageVF53.__setitem__ = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53___setitem__, None, vectoritkImageVF53)
vectoritkImageVF53.pop = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_pop, None, vectoritkImageVF53)
vectoritkImageVF53.append = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_append, None, vectoritkImageVF53)
vectoritkImageVF53.empty = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_empty, None, vectoritkImageVF53)
vectoritkImageVF53.size = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_size, None, vectoritkImageVF53)
vectoritkImageVF53.swap = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_swap, None, vectoritkImageVF53)
vectoritkImageVF53.begin = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_begin, None, vectoritkImageVF53)
vectoritkImageVF53.end = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_end, None, vectoritkImageVF53)
vectoritkImageVF53.rbegin = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_rbegin, None, vectoritkImageVF53)
vectoritkImageVF53.rend = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_rend, None, vectoritkImageVF53)
vectoritkImageVF53.clear = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_clear, None, vectoritkImageVF53)
vectoritkImageVF53.get_allocator = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_get_allocator, None, vectoritkImageVF53)
vectoritkImageVF53.pop_back = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_pop_back, None, vectoritkImageVF53)
vectoritkImageVF53.erase = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_erase, None, vectoritkImageVF53)
vectoritkImageVF53.push_back = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_push_back, None, vectoritkImageVF53)
vectoritkImageVF53.front = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_front, None, vectoritkImageVF53)
vectoritkImageVF53.back = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_back, None, vectoritkImageVF53)
vectoritkImageVF53.assign = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_assign, None, vectoritkImageVF53)
vectoritkImageVF53.resize = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_resize, None, vectoritkImageVF53)
vectoritkImageVF53.insert = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_insert, None, vectoritkImageVF53)
vectoritkImageVF53.reserve = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_reserve, None, vectoritkImageVF53)
vectoritkImageVF53.capacity = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_capacity, None, vectoritkImageVF53)
vectoritkImageVF53_swigregister = _itkReplaceFeatureMapNanInfImageFilterPython.vectoritkImageVF53_swigregister
vectoritkImageVF53_swigregister(vectoritkImageVF53)

class itkImageFileWriterIVF53(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ itkImageFileWriterIVF53 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageFileWriterIVF53_Pointer"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageFileWriterIVF53 self) -> itkImageFileWriterIVF53_Pointer"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_Clone(self)


    def SetInput(self, input):
        """SetInput(itkImageFileWriterIVF53 self, itkImageVF53 input)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetInput(self, input)


    def GetInput(self, *args):
        """
        GetInput(itkImageFileWriterIVF53 self) -> itkImageVF53
        GetInput(itkImageFileWriterIVF53 self, unsigned int idx) -> itkImageVF53
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetInput(self, *args)


    def SetFileName(self, *args):
        """
        SetFileName(itkImageFileWriterIVF53 self, char const * _arg)
        SetFileName(itkImageFileWriterIVF53 self, std::string const & _arg)
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetFileName(self, *args)


    def GetFileName(self):
        """GetFileName(itkImageFileWriterIVF53 self) -> char const *"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetFileName(self)


    def SetImageIO(self, io):
        """SetImageIO(itkImageFileWriterIVF53 self, itkImageIOBase io)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetImageIO(self, io)


    def GetModifiableImageIO(self):
        """GetModifiableImageIO(itkImageFileWriterIVF53 self) -> itkImageIOBase"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetModifiableImageIO(self)


    def GetImageIO(self, *args):
        """
        GetImageIO(itkImageFileWriterIVF53 self) -> itkImageIOBase
        GetImageIO(itkImageFileWriterIVF53 self) -> itkImageIOBase
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetImageIO(self, *args)


    def Write(self):
        """Write(itkImageFileWriterIVF53 self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_Write(self)


    def SetIORegion(self, region):
        """SetIORegion(itkImageFileWriterIVF53 self, itkImageIORegion region)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetIORegion(self, region)


    def GetIORegion(self):
        """GetIORegion(itkImageFileWriterIVF53 self) -> itkImageIORegion"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetIORegion(self)


    def SetNumberOfStreamDivisions(self, _arg):
        """SetNumberOfStreamDivisions(itkImageFileWriterIVF53 self, unsigned int const _arg)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetNumberOfStreamDivisions(self, _arg)


    def GetNumberOfStreamDivisions(self):
        """GetNumberOfStreamDivisions(itkImageFileWriterIVF53 self) -> unsigned int const &"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetNumberOfStreamDivisions(self)


    def SetUseCompression(self, _arg):
        """SetUseCompression(itkImageFileWriterIVF53 self, bool const _arg)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetUseCompression(self, _arg)


    def GetUseCompression(self):
        """GetUseCompression(itkImageFileWriterIVF53 self) -> bool const &"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetUseCompression(self)


    def UseCompressionOn(self):
        """UseCompressionOn(itkImageFileWriterIVF53 self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_UseCompressionOn(self)


    def UseCompressionOff(self):
        """UseCompressionOff(itkImageFileWriterIVF53 self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_UseCompressionOff(self)


    def SetCompressionLevel(self, _arg):
        """SetCompressionLevel(itkImageFileWriterIVF53 self, int const _arg)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetCompressionLevel(self, _arg)


    def GetCompressionLevel(self):
        """GetCompressionLevel(itkImageFileWriterIVF53 self) -> int const &"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetCompressionLevel(self)


    def SetUseInputMetaDataDictionary(self, _arg):
        """SetUseInputMetaDataDictionary(itkImageFileWriterIVF53 self, bool const _arg)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetUseInputMetaDataDictionary(self, _arg)


    def GetUseInputMetaDataDictionary(self):
        """GetUseInputMetaDataDictionary(itkImageFileWriterIVF53 self) -> bool const &"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetUseInputMetaDataDictionary(self)


    def UseInputMetaDataDictionaryOn(self):
        """UseInputMetaDataDictionaryOn(itkImageFileWriterIVF53 self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_UseInputMetaDataDictionaryOn(self)


    def UseInputMetaDataDictionaryOff(self):
        """UseInputMetaDataDictionaryOff(itkImageFileWriterIVF53 self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_UseInputMetaDataDictionaryOff(self)

    __swig_destroy__ = _itkReplaceFeatureMapNanInfImageFilterPython.delete_itkImageFileWriterIVF53

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFileWriterIVF53"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIVF53

        Create a new object of the class itkImageFileWriterIVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIVF53.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIVF53.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFileWriterIVF53.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFileWriterIVF53.Clone = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_Clone, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53.SetInput = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetInput, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53.GetInput = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetInput, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53.SetFileName = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetFileName, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53.GetFileName = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetFileName, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53.SetImageIO = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetImageIO, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53.GetModifiableImageIO = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetModifiableImageIO, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53.GetImageIO = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetImageIO, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53.Write = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_Write, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53.SetIORegion = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetIORegion, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53.GetIORegion = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetIORegion, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53.SetNumberOfStreamDivisions = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetNumberOfStreamDivisions, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53.GetNumberOfStreamDivisions = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetNumberOfStreamDivisions, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53.SetUseCompression = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetUseCompression, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53.GetUseCompression = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetUseCompression, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53.UseCompressionOn = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_UseCompressionOn, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53.UseCompressionOff = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_UseCompressionOff, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53.SetCompressionLevel = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetCompressionLevel, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53.GetCompressionLevel = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetCompressionLevel, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53.SetUseInputMetaDataDictionary = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_SetUseInputMetaDataDictionary, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53.GetUseInputMetaDataDictionary = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_GetUseInputMetaDataDictionary, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53.UseInputMetaDataDictionaryOn = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_UseInputMetaDataDictionaryOn, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53.UseInputMetaDataDictionaryOff = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_UseInputMetaDataDictionaryOff, None, itkImageFileWriterIVF53)
itkImageFileWriterIVF53_swigregister = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_swigregister
itkImageFileWriterIVF53_swigregister(itkImageFileWriterIVF53)

def itkImageFileWriterIVF53___New_orig__():
    """itkImageFileWriterIVF53___New_orig__() -> itkImageFileWriterIVF53_Pointer"""
    return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53___New_orig__()

def itkImageFileWriterIVF53_cast(obj):
    """itkImageFileWriterIVF53_cast(itkLightObject obj) -> itkImageFileWriterIVF53"""
    return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileWriterIVF53_cast(obj)

class itkImageIOBase(ITKCommonBasePython.itkLightProcessObject):
    """Proxy of C++ itkImageIOBase class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetFileName(self, *args):
        """
        SetFileName(itkImageIOBase self, char const * _arg)
        SetFileName(itkImageIOBase self, std::string const & _arg)
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetFileName(self, *args)


    def GetFileName(self):
        """GetFileName(itkImageIOBase self) -> char const *"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetFileName(self)

    UNKNOWNPIXELTYPE = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_UNKNOWNPIXELTYPE
    SCALAR = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SCALAR
    RGB = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_RGB
    RGBA = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_RGBA
    OFFSET = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_OFFSET
    VECTOR = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_VECTOR
    POINT = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_POINT
    COVARIANTVECTOR = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_COVARIANTVECTOR
    SYMMETRICSECONDRANKTENSOR = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SYMMETRICSECONDRANKTENSOR
    DIFFUSIONTENSOR3D = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_DIFFUSIONTENSOR3D
    COMPLEX = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_COMPLEX
    FIXEDARRAY = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_FIXEDARRAY
    MATRIX = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_MATRIX
    UNKNOWNCOMPONENTTYPE = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_UNKNOWNCOMPONENTTYPE
    UCHAR = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_UCHAR
    CHAR = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_CHAR
    USHORT = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_USHORT
    SHORT = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SHORT
    UINT = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_UINT
    INT = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_INT
    ULONG = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_ULONG
    LONG = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_LONG
    ULONGLONG = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_ULONGLONG
    LONGLONG = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_LONGLONG
    FLOAT = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_FLOAT
    DOUBLE = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_DOUBLE

    def SetNumberOfDimensions(self, arg0):
        """SetNumberOfDimensions(itkImageIOBase self, unsigned int arg0)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetNumberOfDimensions(self, arg0)


    def GetNumberOfDimensions(self):
        """GetNumberOfDimensions(itkImageIOBase self) -> unsigned int"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetNumberOfDimensions(self)


    def SetDimensions(self, i, dim):
        """SetDimensions(itkImageIOBase self, unsigned int i, unsigned long dim)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetDimensions(self, i, dim)


    def GetDimensions(self, i):
        """GetDimensions(itkImageIOBase self, unsigned int i) -> unsigned long"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetDimensions(self, i)


    def SetOrigin(self, i, origin):
        """SetOrigin(itkImageIOBase self, unsigned int i, double origin)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetOrigin(self, i, origin)


    def GetOrigin(self, i):
        """GetOrigin(itkImageIOBase self, unsigned int i) -> double"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetOrigin(self, i)


    def SetSpacing(self, i, spacing):
        """SetSpacing(itkImageIOBase self, unsigned int i, double spacing)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetSpacing(self, i, spacing)


    def GetSpacing(self, i):
        """GetSpacing(itkImageIOBase self, unsigned int i) -> double"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetSpacing(self, i)


    def SetDirection(self, *args):
        """
        SetDirection(itkImageIOBase self, unsigned int i, vectorD direction)
        SetDirection(itkImageIOBase self, unsigned int i, vnl_vectorD direction)
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetDirection(self, *args)


    def GetDirection(self, i):
        """GetDirection(itkImageIOBase self, unsigned int i) -> vectorD"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetDirection(self, i)


    def GetDefaultDirection(self, i):
        """GetDefaultDirection(itkImageIOBase self, unsigned int i) -> vectorD"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetDefaultDirection(self, i)


    def SetIORegion(self, _arg):
        """SetIORegion(itkImageIOBase self, itkImageIORegion _arg)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetIORegion(self, _arg)


    def GetIORegion(self):
        """GetIORegion(itkImageIOBase self) -> itkImageIORegion"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetIORegion(self)


    def SetPixelType(self, _arg):
        """SetPixelType(itkImageIOBase self, itkImageIOBase::IOPixelType const _arg)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetPixelType(self, _arg)


    def GetPixelType(self):
        """GetPixelType(itkImageIOBase self) -> itkImageIOBase::IOPixelType"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetPixelType(self)


    def SetComponentType(self, _arg):
        """SetComponentType(itkImageIOBase self, itkImageIOBase::IOComponentType const _arg)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetComponentType(self, _arg)


    def GetComponentType(self):
        """GetComponentType(itkImageIOBase self) -> itkImageIOBase::IOComponentType"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetComponentType(self)


    def GetComponentTypeInfo(self):
        """GetComponentTypeInfo(itkImageIOBase self) -> std::type_info const &"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetComponentTypeInfo(self)


    def SetNumberOfComponents(self, _arg):
        """SetNumberOfComponents(itkImageIOBase self, unsigned int const _arg)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetNumberOfComponents(self, _arg)


    def GetNumberOfComponents(self):
        """GetNumberOfComponents(itkImageIOBase self) -> unsigned int const &"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetNumberOfComponents(self)


    def SetUseCompression(self, _arg):
        """SetUseCompression(itkImageIOBase self, bool const _arg)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetUseCompression(self, _arg)


    def GetUseCompression(self):
        """GetUseCompression(itkImageIOBase self) -> bool"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetUseCompression(self)


    def UseCompressionOn(self):
        """UseCompressionOn(itkImageIOBase self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_UseCompressionOn(self)


    def UseCompressionOff(self):
        """UseCompressionOff(itkImageIOBase self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_UseCompressionOff(self)


    def SetCompressionLevel(self, _arg):
        """SetCompressionLevel(itkImageIOBase self, int _arg)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetCompressionLevel(self, _arg)


    def GetCompressionLevel(self):
        """GetCompressionLevel(itkImageIOBase self) -> int"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetCompressionLevel(self)


    def SetCompressor(self, _c):
        """SetCompressor(itkImageIOBase self, std::string _c)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetCompressor(self, _c)


    def GetCompressor(self):
        """GetCompressor(itkImageIOBase self) -> std::string const &"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetCompressor(self)


    def SetUseStreamedReading(self, _arg):
        """SetUseStreamedReading(itkImageIOBase self, bool const _arg)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetUseStreamedReading(self, _arg)


    def GetUseStreamedReading(self):
        """GetUseStreamedReading(itkImageIOBase self) -> bool"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetUseStreamedReading(self)


    def UseStreamedReadingOn(self):
        """UseStreamedReadingOn(itkImageIOBase self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_UseStreamedReadingOn(self)


    def UseStreamedReadingOff(self):
        """UseStreamedReadingOff(itkImageIOBase self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_UseStreamedReadingOff(self)


    def SetUseStreamedWriting(self, _arg):
        """SetUseStreamedWriting(itkImageIOBase self, bool const _arg)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetUseStreamedWriting(self, _arg)


    def GetUseStreamedWriting(self):
        """GetUseStreamedWriting(itkImageIOBase self) -> bool"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetUseStreamedWriting(self)


    def UseStreamedWritingOn(self):
        """UseStreamedWritingOn(itkImageIOBase self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_UseStreamedWritingOn(self)


    def UseStreamedWritingOff(self):
        """UseStreamedWritingOff(itkImageIOBase self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_UseStreamedWritingOff(self)


    def SetExpandRGBPalette(self, _arg):
        """SetExpandRGBPalette(itkImageIOBase self, bool const _arg)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetExpandRGBPalette(self, _arg)


    def GetExpandRGBPalette(self):
        """GetExpandRGBPalette(itkImageIOBase self) -> bool"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetExpandRGBPalette(self)


    def ExpandRGBPaletteOn(self):
        """ExpandRGBPaletteOn(itkImageIOBase self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_ExpandRGBPaletteOn(self)


    def ExpandRGBPaletteOff(self):
        """ExpandRGBPaletteOff(itkImageIOBase self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_ExpandRGBPaletteOff(self)


    def GetIsReadAsScalarPlusPalette(self):
        """GetIsReadAsScalarPlusPalette(itkImageIOBase self) -> bool"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetIsReadAsScalarPlusPalette(self)


    def GetComponentTypeAsString(arg0):
        """GetComponentTypeAsString(itkImageIOBase::IOComponentType arg0) -> std::string"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetComponentTypeAsString(arg0)

    GetComponentTypeAsString = staticmethod(GetComponentTypeAsString)

    def GetComponentTypeFromString(typeString):
        """GetComponentTypeFromString(std::string const & typeString) -> itkImageIOBase::IOComponentType"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetComponentTypeFromString(typeString)

    GetComponentTypeFromString = staticmethod(GetComponentTypeFromString)

    def GetPixelTypeAsString(arg0):
        """GetPixelTypeAsString(itkImageIOBase::IOPixelType arg0) -> std::string"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetPixelTypeAsString(arg0)

    GetPixelTypeAsString = staticmethod(GetPixelTypeAsString)

    def GetPixelTypeFromString(pixelString):
        """GetPixelTypeFromString(std::string const & pixelString) -> itkImageIOBase::IOPixelType"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetPixelTypeFromString(pixelString)

    GetPixelTypeFromString = staticmethod(GetPixelTypeFromString)
    ASCII = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_ASCII
    Binary = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_Binary
    TypeNotApplicable = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_TypeNotApplicable
    BigEndian = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_BigEndian
    LittleEndian = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_LittleEndian
    OrderNotApplicable = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_OrderNotApplicable

    def SetFileType(self, _arg):
        """SetFileType(itkImageIOBase self, itkImageIOBase::FileType const _arg)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetFileType(self, _arg)


    def GetFileType(self):
        """GetFileType(itkImageIOBase self) -> itkImageIOBase::FileType"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetFileType(self)


    def SetFileTypeToASCII(self):
        """SetFileTypeToASCII(itkImageIOBase self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetFileTypeToASCII(self)


    def SetFileTypeToBinary(self):
        """SetFileTypeToBinary(itkImageIOBase self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetFileTypeToBinary(self)


    def SetByteOrder(self, _arg):
        """SetByteOrder(itkImageIOBase self, itkImageIOBase::ByteOrder const _arg)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetByteOrder(self, _arg)


    def GetByteOrder(self):
        """GetByteOrder(itkImageIOBase self) -> itkImageIOBase::ByteOrder"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetByteOrder(self)


    def SetByteOrderToBigEndian(self):
        """SetByteOrderToBigEndian(itkImageIOBase self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetByteOrderToBigEndian(self)


    def SetByteOrderToLittleEndian(self):
        """SetByteOrderToLittleEndian(itkImageIOBase self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetByteOrderToLittleEndian(self)


    def GetFileTypeAsString(self, arg0):
        """GetFileTypeAsString(itkImageIOBase self, itkImageIOBase::FileType arg0) -> std::string"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetFileTypeAsString(self, arg0)


    def GetByteOrderAsString(self, arg0):
        """GetByteOrderAsString(itkImageIOBase self, itkImageIOBase::ByteOrder arg0) -> std::string"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetByteOrderAsString(self, arg0)


    def GetPixelStride(self):
        """GetPixelStride(itkImageIOBase self) -> long"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetPixelStride(self)


    def GetImageSizeInPixels(self):
        """GetImageSizeInPixels(itkImageIOBase self) -> long"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetImageSizeInPixels(self)


    def GetImageSizeInBytes(self):
        """GetImageSizeInBytes(itkImageIOBase self) -> long"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetImageSizeInBytes(self)


    def GetImageSizeInComponents(self):
        """GetImageSizeInComponents(itkImageIOBase self) -> long"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetImageSizeInComponents(self)


    def GetComponentSize(self):
        """GetComponentSize(itkImageIOBase self) -> unsigned int"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetComponentSize(self)


    def CanReadFile(self, arg0):
        """CanReadFile(itkImageIOBase self, char const * arg0) -> bool"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_CanReadFile(self, arg0)


    def CanStreamRead(self):
        """CanStreamRead(itkImageIOBase self) -> bool"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_CanStreamRead(self)


    def ReadImageInformation(self):
        """ReadImageInformation(itkImageIOBase self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_ReadImageInformation(self)


    def Read(self, buffer):
        """Read(itkImageIOBase self, void * buffer)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_Read(self, buffer)


    def CanWriteFile(self, arg0):
        """CanWriteFile(itkImageIOBase self, char const * arg0) -> bool"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_CanWriteFile(self, arg0)


    def CanStreamWrite(self):
        """CanStreamWrite(itkImageIOBase self) -> bool"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_CanStreamWrite(self)


    def WriteImageInformation(self):
        """WriteImageInformation(itkImageIOBase self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_WriteImageInformation(self)


    def Write(self, buffer):
        """Write(itkImageIOBase self, void const * buffer)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_Write(self, buffer)


    def SupportsDimension(self, dim):
        """SupportsDimension(itkImageIOBase self, unsigned long dim) -> bool"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SupportsDimension(self, dim)


    def GenerateStreamableReadRegionFromRequestedRegion(self, requested):
        """GenerateStreamableReadRegionFromRequestedRegion(itkImageIOBase self, itkImageIORegion requested) -> itkImageIORegion"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GenerateStreamableReadRegionFromRequestedRegion(self, requested)


    def GetActualNumberOfSplitsForWriting(self, numberOfRequestedSplits, pasteRegion, largestPossibleRegion):
        """GetActualNumberOfSplitsForWriting(itkImageIOBase self, unsigned int numberOfRequestedSplits, itkImageIORegion pasteRegion, itkImageIORegion largestPossibleRegion) -> unsigned int"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetActualNumberOfSplitsForWriting(self, numberOfRequestedSplits, pasteRegion, largestPossibleRegion)


    def GetSplitRegionForWriting(self, ithPiece, numberOfActualSplits, pasteRegion, largestPossibleRegion):
        """GetSplitRegionForWriting(itkImageIOBase self, unsigned int ithPiece, unsigned int numberOfActualSplits, itkImageIORegion pasteRegion, itkImageIORegion largestPossibleRegion) -> itkImageIORegion"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetSplitRegionForWriting(self, ithPiece, numberOfActualSplits, pasteRegion, largestPossibleRegion)


    def GetSupportedReadExtensions(self):
        """GetSupportedReadExtensions(itkImageIOBase self) -> vectorstring"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetSupportedReadExtensions(self)


    def GetSupportedWriteExtensions(self):
        """GetSupportedWriteExtensions(itkImageIOBase self) -> vectorstring"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetSupportedWriteExtensions(self)

itkImageIOBase.SetFileName = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetFileName, None, itkImageIOBase)
itkImageIOBase.GetFileName = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetFileName, None, itkImageIOBase)
itkImageIOBase.SetNumberOfDimensions = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetNumberOfDimensions, None, itkImageIOBase)
itkImageIOBase.GetNumberOfDimensions = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetNumberOfDimensions, None, itkImageIOBase)
itkImageIOBase.SetDimensions = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetDimensions, None, itkImageIOBase)
itkImageIOBase.GetDimensions = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetDimensions, None, itkImageIOBase)
itkImageIOBase.SetOrigin = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetOrigin, None, itkImageIOBase)
itkImageIOBase.GetOrigin = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetOrigin, None, itkImageIOBase)
itkImageIOBase.SetSpacing = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetSpacing, None, itkImageIOBase)
itkImageIOBase.GetSpacing = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetSpacing, None, itkImageIOBase)
itkImageIOBase.SetDirection = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetDirection, None, itkImageIOBase)
itkImageIOBase.GetDirection = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetDirection, None, itkImageIOBase)
itkImageIOBase.GetDefaultDirection = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetDefaultDirection, None, itkImageIOBase)
itkImageIOBase.SetIORegion = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetIORegion, None, itkImageIOBase)
itkImageIOBase.GetIORegion = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetIORegion, None, itkImageIOBase)
itkImageIOBase.SetPixelType = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetPixelType, None, itkImageIOBase)
itkImageIOBase.GetPixelType = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetPixelType, None, itkImageIOBase)
itkImageIOBase.SetComponentType = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetComponentType, None, itkImageIOBase)
itkImageIOBase.GetComponentType = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetComponentType, None, itkImageIOBase)
itkImageIOBase.GetComponentTypeInfo = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetComponentTypeInfo, None, itkImageIOBase)
itkImageIOBase.SetNumberOfComponents = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetNumberOfComponents, None, itkImageIOBase)
itkImageIOBase.GetNumberOfComponents = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetNumberOfComponents, None, itkImageIOBase)
itkImageIOBase.SetUseCompression = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetUseCompression, None, itkImageIOBase)
itkImageIOBase.GetUseCompression = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetUseCompression, None, itkImageIOBase)
itkImageIOBase.UseCompressionOn = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_UseCompressionOn, None, itkImageIOBase)
itkImageIOBase.UseCompressionOff = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_UseCompressionOff, None, itkImageIOBase)
itkImageIOBase.SetCompressionLevel = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetCompressionLevel, None, itkImageIOBase)
itkImageIOBase.GetCompressionLevel = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetCompressionLevel, None, itkImageIOBase)
itkImageIOBase.SetCompressor = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetCompressor, None, itkImageIOBase)
itkImageIOBase.GetCompressor = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetCompressor, None, itkImageIOBase)
itkImageIOBase.SetUseStreamedReading = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetUseStreamedReading, None, itkImageIOBase)
itkImageIOBase.GetUseStreamedReading = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetUseStreamedReading, None, itkImageIOBase)
itkImageIOBase.UseStreamedReadingOn = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_UseStreamedReadingOn, None, itkImageIOBase)
itkImageIOBase.UseStreamedReadingOff = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_UseStreamedReadingOff, None, itkImageIOBase)
itkImageIOBase.SetUseStreamedWriting = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetUseStreamedWriting, None, itkImageIOBase)
itkImageIOBase.GetUseStreamedWriting = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetUseStreamedWriting, None, itkImageIOBase)
itkImageIOBase.UseStreamedWritingOn = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_UseStreamedWritingOn, None, itkImageIOBase)
itkImageIOBase.UseStreamedWritingOff = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_UseStreamedWritingOff, None, itkImageIOBase)
itkImageIOBase.SetExpandRGBPalette = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetExpandRGBPalette, None, itkImageIOBase)
itkImageIOBase.GetExpandRGBPalette = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetExpandRGBPalette, None, itkImageIOBase)
itkImageIOBase.ExpandRGBPaletteOn = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_ExpandRGBPaletteOn, None, itkImageIOBase)
itkImageIOBase.ExpandRGBPaletteOff = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_ExpandRGBPaletteOff, None, itkImageIOBase)
itkImageIOBase.GetIsReadAsScalarPlusPalette = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetIsReadAsScalarPlusPalette, None, itkImageIOBase)
itkImageIOBase.SetFileType = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetFileType, None, itkImageIOBase)
itkImageIOBase.GetFileType = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetFileType, None, itkImageIOBase)
itkImageIOBase.SetFileTypeToASCII = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetFileTypeToASCII, None, itkImageIOBase)
itkImageIOBase.SetFileTypeToBinary = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetFileTypeToBinary, None, itkImageIOBase)
itkImageIOBase.SetByteOrder = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetByteOrder, None, itkImageIOBase)
itkImageIOBase.GetByteOrder = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetByteOrder, None, itkImageIOBase)
itkImageIOBase.SetByteOrderToBigEndian = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetByteOrderToBigEndian, None, itkImageIOBase)
itkImageIOBase.SetByteOrderToLittleEndian = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SetByteOrderToLittleEndian, None, itkImageIOBase)
itkImageIOBase.GetFileTypeAsString = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetFileTypeAsString, None, itkImageIOBase)
itkImageIOBase.GetByteOrderAsString = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetByteOrderAsString, None, itkImageIOBase)
itkImageIOBase.GetPixelStride = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetPixelStride, None, itkImageIOBase)
itkImageIOBase.GetImageSizeInPixels = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetImageSizeInPixels, None, itkImageIOBase)
itkImageIOBase.GetImageSizeInBytes = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetImageSizeInBytes, None, itkImageIOBase)
itkImageIOBase.GetImageSizeInComponents = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetImageSizeInComponents, None, itkImageIOBase)
itkImageIOBase.GetComponentSize = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetComponentSize, None, itkImageIOBase)
itkImageIOBase.CanReadFile = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_CanReadFile, None, itkImageIOBase)
itkImageIOBase.CanStreamRead = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_CanStreamRead, None, itkImageIOBase)
itkImageIOBase.ReadImageInformation = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_ReadImageInformation, None, itkImageIOBase)
itkImageIOBase.Read = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_Read, None, itkImageIOBase)
itkImageIOBase.CanWriteFile = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_CanWriteFile, None, itkImageIOBase)
itkImageIOBase.CanStreamWrite = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_CanStreamWrite, None, itkImageIOBase)
itkImageIOBase.WriteImageInformation = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_WriteImageInformation, None, itkImageIOBase)
itkImageIOBase.Write = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_Write, None, itkImageIOBase)
itkImageIOBase.SupportsDimension = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_SupportsDimension, None, itkImageIOBase)
itkImageIOBase.GenerateStreamableReadRegionFromRequestedRegion = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GenerateStreamableReadRegionFromRequestedRegion, None, itkImageIOBase)
itkImageIOBase.GetActualNumberOfSplitsForWriting = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetActualNumberOfSplitsForWriting, None, itkImageIOBase)
itkImageIOBase.GetSplitRegionForWriting = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetSplitRegionForWriting, None, itkImageIOBase)
itkImageIOBase.GetSupportedReadExtensions = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetSupportedReadExtensions, None, itkImageIOBase)
itkImageIOBase.GetSupportedWriteExtensions = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetSupportedWriteExtensions, None, itkImageIOBase)
itkImageIOBase_swigregister = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_swigregister
itkImageIOBase_swigregister(itkImageIOBase)

def itkImageIOBase_GetComponentTypeAsString(arg0):
    """itkImageIOBase_GetComponentTypeAsString(itkImageIOBase::IOComponentType arg0) -> std::string"""
    return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetComponentTypeAsString(arg0)

def itkImageIOBase_GetComponentTypeFromString(typeString):
    """itkImageIOBase_GetComponentTypeFromString(std::string const & typeString) -> itkImageIOBase::IOComponentType"""
    return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetComponentTypeFromString(typeString)

def itkImageIOBase_GetPixelTypeAsString(arg0):
    """itkImageIOBase_GetPixelTypeAsString(itkImageIOBase::IOPixelType arg0) -> std::string"""
    return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetPixelTypeAsString(arg0)

def itkImageIOBase_GetPixelTypeFromString(pixelString):
    """itkImageIOBase_GetPixelTypeFromString(std::string const & pixelString) -> itkImageIOBase::IOPixelType"""
    return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageIOBase_GetPixelTypeFromString(pixelString)

class itkImageSourceIVF53(ITKCommonBasePython.itkProcessObject):
    """Proxy of C++ itkImageSourceIVF53 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetOutput(self, *args):
        """
        GetOutput(itkImageSourceIVF53 self) -> itkImageVF53
        GetOutput(itkImageSourceIVF53 self) -> itkImageVF53
        GetOutput(itkImageSourceIVF53 self, unsigned int idx) -> itkImageVF53
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageSourceIVF53_GetOutput(self, *args)


    def GraftOutput(self, *args):
        """
        GraftOutput(itkImageSourceIVF53 self, itkDataObject output)
        GraftOutput(itkImageSourceIVF53 self, std::string const & key, itkDataObject output)
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageSourceIVF53_GraftOutput(self, *args)


    def GraftNthOutput(self, idx, output):
        """GraftNthOutput(itkImageSourceIVF53 self, unsigned int idx, itkDataObject output)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageSourceIVF53_GraftNthOutput(self, idx, output)


    def MakeOutput(self, *args):
        """
        MakeOutput(itkImageSourceIVF53 self, unsigned long idx) -> itkDataObject_Pointer
        MakeOutput(itkImageSourceIVF53 self, std::string const & arg0) -> itkDataObject_Pointer

        Make a DataObject of the
        correct type to used as the specified output.

        Every ProcessObject subclass must be able to create a DataObject that
        can be used as a specified output. This method is automatically called
        when DataObject::DisconnectPipeline() is called.
        DataObject::DisconnectPipeline, disconnects a data object from being
        an output of its current source. When the data object is disconnected,
        the ProcessObject needs to construct a replacement output data object
        so that the ProcessObject is in a valid state. So
        DataObject::DisconnectPipeline eventually calls
        ProcessObject::MakeOutput. Note that MakeOutput always returns a
        itkSmartPointer to a DataObject. ImageSource and MeshSource override
        this method to create the correct type of image and mesh respectively.
        If a filter has multiple outputs of different types, then that filter
        must provide an implementation of MakeOutput(). 
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageSourceIVF53_MakeOutput(self, *args)

    __swig_destroy__ = _itkReplaceFeatureMapNanInfImageFilterPython.delete_itkImageSourceIVF53

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageSourceIVF53"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageSourceIVF53_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageSourceIVF53

        Create a new object of the class itkImageSourceIVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageSourceIVF53.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageSourceIVF53.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageSourceIVF53.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageSourceIVF53.GetOutput = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageSourceIVF53_GetOutput, None, itkImageSourceIVF53)
itkImageSourceIVF53.GraftOutput = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageSourceIVF53_GraftOutput, None, itkImageSourceIVF53)
itkImageSourceIVF53.GraftNthOutput = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageSourceIVF53_GraftNthOutput, None, itkImageSourceIVF53)
itkImageSourceIVF53.MakeOutput = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageSourceIVF53_MakeOutput, None, itkImageSourceIVF53)
itkImageSourceIVF53_swigregister = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageSourceIVF53_swigregister
itkImageSourceIVF53_swigregister(itkImageSourceIVF53)

def itkImageSourceIVF53_cast(obj):
    """itkImageSourceIVF53_cast(itkLightObject obj) -> itkImageSourceIVF53"""
    return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageSourceIVF53_cast(obj)

class itkImageToImageFilterIVF53IVF53(itkImageSourceIVF53):
    """Proxy of C++ itkImageToImageFilterIVF53IVF53 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetInput(self, *args):
        """
        SetInput(itkImageToImageFilterIVF53IVF53 self, itkImageVF53 image)
        SetInput(itkImageToImageFilterIVF53IVF53 self, unsigned int arg0, itkImageVF53 image)
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_SetInput(self, *args)


    def GetInput(self, *args):
        """
        GetInput(itkImageToImageFilterIVF53IVF53 self) -> itkImageVF53
        GetInput(itkImageToImageFilterIVF53IVF53 self, unsigned int idx) -> itkImageVF53
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_GetInput(self, *args)


    def PushBackInput(self, image):
        """PushBackInput(itkImageToImageFilterIVF53IVF53 self, itkImageVF53 image)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_PushBackInput(self, image)


    def PopBackInput(self):
        """PopBackInput(itkImageToImageFilterIVF53IVF53 self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_PopBackInput(self)


    def PushFrontInput(self, image):
        """PushFrontInput(itkImageToImageFilterIVF53IVF53 self, itkImageVF53 image)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_PushFrontInput(self, image)


    def PopFrontInput(self):
        """PopFrontInput(itkImageToImageFilterIVF53IVF53 self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_PopFrontInput(self)


    def SetCoordinateTolerance(self, _arg):
        """SetCoordinateTolerance(itkImageToImageFilterIVF53IVF53 self, double const _arg)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_SetCoordinateTolerance(self, _arg)


    def GetCoordinateTolerance(self):
        """GetCoordinateTolerance(itkImageToImageFilterIVF53IVF53 self) -> double"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_GetCoordinateTolerance(self)


    def SetDirectionTolerance(self, _arg):
        """SetDirectionTolerance(itkImageToImageFilterIVF53IVF53 self, double const _arg)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_SetDirectionTolerance(self, _arg)


    def GetDirectionTolerance(self):
        """GetDirectionTolerance(itkImageToImageFilterIVF53IVF53 self) -> double"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_GetDirectionTolerance(self)

    __swig_destroy__ = _itkReplaceFeatureMapNanInfImageFilterPython.delete_itkImageToImageFilterIVF53IVF53

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageToImageFilterIVF53IVF53"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF53IVF53

        Create a new object of the class itkImageToImageFilterIVF53IVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF53IVF53.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF53IVF53.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF53IVF53.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF53IVF53

        Create a new object of the class itkImageToImageFilterIVF53IVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF53IVF53.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF53IVF53.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF53IVF53.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF53IVF53

        Create a new object of the class itkImageToImageFilterIVF53IVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF53IVF53.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF53IVF53.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF53IVF53.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


    def New(*args, **kargs):
        """New() -> itkImageToImageFilterIVF53IVF53

        Create a new object of the class itkImageToImageFilterIVF53IVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageToImageFilterIVF53IVF53.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageToImageFilterIVF53IVF53.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageToImageFilterIVF53IVF53.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageToImageFilterIVF53IVF53.SetInput = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_SetInput, None, itkImageToImageFilterIVF53IVF53)
itkImageToImageFilterIVF53IVF53.GetInput = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_GetInput, None, itkImageToImageFilterIVF53IVF53)
itkImageToImageFilterIVF53IVF53.PushBackInput = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_PushBackInput, None, itkImageToImageFilterIVF53IVF53)
itkImageToImageFilterIVF53IVF53.PopBackInput = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_PopBackInput, None, itkImageToImageFilterIVF53IVF53)
itkImageToImageFilterIVF53IVF53.PushFrontInput = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_PushFrontInput, None, itkImageToImageFilterIVF53IVF53)
itkImageToImageFilterIVF53IVF53.PopFrontInput = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_PopFrontInput, None, itkImageToImageFilterIVF53IVF53)
itkImageToImageFilterIVF53IVF53.SetCoordinateTolerance = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_SetCoordinateTolerance, None, itkImageToImageFilterIVF53IVF53)
itkImageToImageFilterIVF53IVF53.GetCoordinateTolerance = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_GetCoordinateTolerance, None, itkImageToImageFilterIVF53IVF53)
itkImageToImageFilterIVF53IVF53.SetDirectionTolerance = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_SetDirectionTolerance, None, itkImageToImageFilterIVF53IVF53)
itkImageToImageFilterIVF53IVF53.GetDirectionTolerance = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_GetDirectionTolerance, None, itkImageToImageFilterIVF53IVF53)
itkImageToImageFilterIVF53IVF53_swigregister = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_swigregister
itkImageToImageFilterIVF53IVF53_swigregister(itkImageToImageFilterIVF53IVF53)

def itkImageToImageFilterIVF53IVF53_cast(obj):
    """itkImageToImageFilterIVF53IVF53_cast(itkLightObject obj) -> itkImageToImageFilterIVF53IVF53"""
    return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageToImageFilterIVF53IVF53_cast(obj)

class itkImageVF53(itkImagePython.itkImageBase3):
    """Proxy of C++ itkImageVF53 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageVF53_Pointer"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageVF53 self) -> itkImageVF53_Pointer"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_Clone(self)


    def Allocate(self, initializePixels=False):
        """
        Allocate(itkImageVF53 self, bool initializePixels=False)
        Allocate(itkImageVF53 self)

        Allocate the image memory.
        The size of the image must already be set, e.g. by calling
        SetRegions() or SetBufferedRegion().

        This method should be pure virtual, if backwards compatibility was not
        required. 
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_Allocate(self, initializePixels)


    def FillBuffer(self, value):
        """FillBuffer(itkImageVF53 self, itkVectorF5 value)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_FillBuffer(self, value)


    def SetPixel(self, index, value):
        """SetPixel(itkImageVF53 self, itkIndex3 index, itkVectorF5 value)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_SetPixel(self, index, value)


    def GetPixel(self, *args):
        """
        GetPixel(itkImageVF53 self, itkIndex3 index) -> itkVectorF5
        GetPixel(itkImageVF53 self, itkIndex3 index) -> itkVectorF5
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_GetPixel(self, *args)


    def GetBufferPointer(self, *args):
        """
        GetBufferPointer(itkImageVF53 self) -> itkVectorF5
        GetBufferPointer(itkImageVF53 self) -> itkVectorF5
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_GetBufferPointer(self, *args)


    def GetPixelContainer(self, *args):
        """
        GetPixelContainer(itkImageVF53 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,5 > >
        GetPixelContainer(itkImageVF53 self) -> itk::ImportImageContainer< unsigned long,itk::Vector< float,5 > > const *
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_GetPixelContainer(self, *args)


    def SetPixelContainer(self, container):
        """SetPixelContainer(itkImageVF53 self, itk::ImportImageContainer< unsigned long,itk::Vector< float,5 > > * container)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_SetPixelContainer(self, container)


    def Graft(self, data):
        """
        Graft(itkImageVF53 self, itkImageVF53 data)

        Graft the data and
        information from one image to another. This is a convenience method to
        setup a second image with all the meta information of another image
        and use the same pixel container. Note that this method is different
        than just using two SmartPointers to the same image since separate
        DataObjects are still maintained. This method is similar to
        ImageSource::GraftOutput(). The implementation in ImageBase simply
        calls CopyInformation() and copies the region ivars. Subclasses of
        ImageBase are responsible for copying the pixel container. 
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_Graft(self, data)


    def GetPixelAccessor(self, *args):
        """
        GetPixelAccessor(itkImageVF53 self) -> itk::DefaultPixelAccessor< itk::Vector< float,5 > >
        GetPixelAccessor(itkImageVF53 self) -> itk::DefaultPixelAccessor< itk::Vector< float,5 > > const
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_GetPixelAccessor(self, *args)


    def GetNeighborhoodAccessor(self, *args):
        """
        GetNeighborhoodAccessor(itkImageVF53 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,5 >,3 > >
        GetNeighborhoodAccessor(itkImageVF53 self) -> itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float,5 >,3 > > const
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_GetNeighborhoodAccessor(self, *args)

    __swig_destroy__ = _itkReplaceFeatureMapNanInfImageFilterPython.delete_itkImageVF53

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageVF53"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageVF53

        Create a new object of the class itkImageVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF53.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageVF53.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageVF53.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageVF53.Clone = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_Clone, None, itkImageVF53)
itkImageVF53.Allocate = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_Allocate, None, itkImageVF53)
itkImageVF53.FillBuffer = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_FillBuffer, None, itkImageVF53)
itkImageVF53.SetPixel = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_SetPixel, None, itkImageVF53)
itkImageVF53.GetPixel = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_GetPixel, None, itkImageVF53)
itkImageVF53.GetBufferPointer = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_GetBufferPointer, None, itkImageVF53)
itkImageVF53.GetPixelContainer = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_GetPixelContainer, None, itkImageVF53)
itkImageVF53.SetPixelContainer = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_SetPixelContainer, None, itkImageVF53)
itkImageVF53.Graft = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_Graft, None, itkImageVF53)
itkImageVF53.GetPixelAccessor = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_GetPixelAccessor, None, itkImageVF53)
itkImageVF53.GetNeighborhoodAccessor = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_GetNeighborhoodAccessor, None, itkImageVF53)
itkImageVF53_swigregister = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_swigregister
itkImageVF53_swigregister(itkImageVF53)

def itkImageVF53___New_orig__():
    """itkImageVF53___New_orig__() -> itkImageVF53_Pointer"""
    return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53___New_orig__()

def itkImageVF53_cast(obj):
    """itkImageVF53_cast(itkLightObject obj) -> itkImageVF53"""
    return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageVF53_cast(obj)

class itkReplaceFeatureMapNanInfImageFilterIVF53(itkImageToImageFilterIVF53IVF53):
    """Proxy of C++ itkReplaceFeatureMapNanInfImageFilterIVF53 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkReplaceFeatureMapNanInfImageFilterIVF53_Pointer"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterIVF53___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkReplaceFeatureMapNanInfImageFilterIVF53 self) -> itkReplaceFeatureMapNanInfImageFilterIVF53_Pointer"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterIVF53_Clone(self)

    __swig_destroy__ = _itkReplaceFeatureMapNanInfImageFilterPython.delete_itkReplaceFeatureMapNanInfImageFilterIVF53

    def cast(obj):
        """cast(itkLightObject obj) -> itkReplaceFeatureMapNanInfImageFilterIVF53"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterIVF53_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkReplaceFeatureMapNanInfImageFilterIVF53

        Create a new object of the class itkReplaceFeatureMapNanInfImageFilterIVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReplaceFeatureMapNanInfImageFilterIVF53.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkReplaceFeatureMapNanInfImageFilterIVF53.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkReplaceFeatureMapNanInfImageFilterIVF53.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkReplaceFeatureMapNanInfImageFilterIVF53.Clone = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterIVF53_Clone, None, itkReplaceFeatureMapNanInfImageFilterIVF53)
itkReplaceFeatureMapNanInfImageFilterIVF53_swigregister = _itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterIVF53_swigregister
itkReplaceFeatureMapNanInfImageFilterIVF53_swigregister(itkReplaceFeatureMapNanInfImageFilterIVF53)

def itkReplaceFeatureMapNanInfImageFilterIVF53___New_orig__():
    """itkReplaceFeatureMapNanInfImageFilterIVF53___New_orig__() -> itkReplaceFeatureMapNanInfImageFilterIVF53_Pointer"""
    return _itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterIVF53___New_orig__()

def itkReplaceFeatureMapNanInfImageFilterIVF53_cast(obj):
    """itkReplaceFeatureMapNanInfImageFilterIVF53_cast(itkLightObject obj) -> itkReplaceFeatureMapNanInfImageFilterIVF53"""
    return _itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterIVF53_cast(obj)

class itkReplaceFeatureMapNanInfImageFilterVIF3(itkImageToImageFilterAPython.itkImageToImageFilterVIF3VIF3):
    """Proxy of C++ itkReplaceFeatureMapNanInfImageFilterVIF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkReplaceFeatureMapNanInfImageFilterVIF3_Pointer"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterVIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkReplaceFeatureMapNanInfImageFilterVIF3 self) -> itkReplaceFeatureMapNanInfImageFilterVIF3_Pointer"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterVIF3_Clone(self)

    __swig_destroy__ = _itkReplaceFeatureMapNanInfImageFilterPython.delete_itkReplaceFeatureMapNanInfImageFilterVIF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkReplaceFeatureMapNanInfImageFilterVIF3"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterVIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkReplaceFeatureMapNanInfImageFilterVIF3

        Create a new object of the class itkReplaceFeatureMapNanInfImageFilterVIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReplaceFeatureMapNanInfImageFilterVIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkReplaceFeatureMapNanInfImageFilterVIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkReplaceFeatureMapNanInfImageFilterVIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkReplaceFeatureMapNanInfImageFilterVIF3.Clone = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterVIF3_Clone, None, itkReplaceFeatureMapNanInfImageFilterVIF3)
itkReplaceFeatureMapNanInfImageFilterVIF3_swigregister = _itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterVIF3_swigregister
itkReplaceFeatureMapNanInfImageFilterVIF3_swigregister(itkReplaceFeatureMapNanInfImageFilterVIF3)

def itkReplaceFeatureMapNanInfImageFilterVIF3___New_orig__():
    """itkReplaceFeatureMapNanInfImageFilterVIF3___New_orig__() -> itkReplaceFeatureMapNanInfImageFilterVIF3_Pointer"""
    return _itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterVIF3___New_orig__()

def itkReplaceFeatureMapNanInfImageFilterVIF3_cast(obj):
    """itkReplaceFeatureMapNanInfImageFilterVIF3_cast(itkLightObject obj) -> itkReplaceFeatureMapNanInfImageFilterVIF3"""
    return _itkReplaceFeatureMapNanInfImageFilterPython.itkReplaceFeatureMapNanInfImageFilterVIF3_cast(obj)

class itkImageFileReaderIVF53(itkImageSourceIVF53):
    """Proxy of C++ itkImageFileReaderIVF53 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkImageFileReaderIVF53_Pointer"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkImageFileReaderIVF53 self) -> itkImageFileReaderIVF53_Pointer"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_Clone(self)


    def SetFileNameInput(self, _arg):
        """SetFileNameInput(itkImageFileReaderIVF53 self, itkSimpleDataObjectDecoratorstring _arg)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_SetFileNameInput(self, _arg)


    def SetFileName(self, *args):
        """
        SetFileName(itkImageFileReaderIVF53 self, itkSimpleDataObjectDecoratorstring _arg)
        SetFileName(itkImageFileReaderIVF53 self, std::string const & _arg)
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_SetFileName(self, *args)


    def GetFileNameInput(self):
        """GetFileNameInput(itkImageFileReaderIVF53 self) -> itkSimpleDataObjectDecoratorstring"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_GetFileNameInput(self)


    def GetFileName(self):
        """GetFileName(itkImageFileReaderIVF53 self) -> std::string const &"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_GetFileName(self)


    def SetImageIO(self, imageIO):
        """SetImageIO(itkImageFileReaderIVF53 self, itkImageIOBase imageIO)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_SetImageIO(self, imageIO)


    def GetModifiableImageIO(self):
        """GetModifiableImageIO(itkImageFileReaderIVF53 self) -> itkImageIOBase"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_GetModifiableImageIO(self)


    def GetImageIO(self, *args):
        """
        GetImageIO(itkImageFileReaderIVF53 self) -> itkImageIOBase
        GetImageIO(itkImageFileReaderIVF53 self) -> itkImageIOBase
        """
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_GetImageIO(self, *args)


    def SetUseStreaming(self, _arg):
        """SetUseStreaming(itkImageFileReaderIVF53 self, bool const _arg)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_SetUseStreaming(self, _arg)


    def GetUseStreaming(self):
        """GetUseStreaming(itkImageFileReaderIVF53 self) -> bool const &"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_GetUseStreaming(self)


    def UseStreamingOn(self):
        """UseStreamingOn(itkImageFileReaderIVF53 self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_UseStreamingOn(self)


    def UseStreamingOff(self):
        """UseStreamingOff(itkImageFileReaderIVF53 self)"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_UseStreamingOff(self)

    __swig_destroy__ = _itkReplaceFeatureMapNanInfImageFilterPython.delete_itkImageFileReaderIVF53

    def cast(obj):
        """cast(itkLightObject obj) -> itkImageFileReaderIVF53"""
        return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIVF53

        Create a new object of the class itkImageFileReaderIVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIVF53.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIVF53.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkImageFileReaderIVF53.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkImageFileReaderIVF53.Clone = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_Clone, None, itkImageFileReaderIVF53)
itkImageFileReaderIVF53.SetFileNameInput = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_SetFileNameInput, None, itkImageFileReaderIVF53)
itkImageFileReaderIVF53.SetFileName = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_SetFileName, None, itkImageFileReaderIVF53)
itkImageFileReaderIVF53.GetFileNameInput = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_GetFileNameInput, None, itkImageFileReaderIVF53)
itkImageFileReaderIVF53.GetFileName = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_GetFileName, None, itkImageFileReaderIVF53)
itkImageFileReaderIVF53.SetImageIO = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_SetImageIO, None, itkImageFileReaderIVF53)
itkImageFileReaderIVF53.GetModifiableImageIO = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_GetModifiableImageIO, None, itkImageFileReaderIVF53)
itkImageFileReaderIVF53.GetImageIO = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_GetImageIO, None, itkImageFileReaderIVF53)
itkImageFileReaderIVF53.SetUseStreaming = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_SetUseStreaming, None, itkImageFileReaderIVF53)
itkImageFileReaderIVF53.GetUseStreaming = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_GetUseStreaming, None, itkImageFileReaderIVF53)
itkImageFileReaderIVF53.UseStreamingOn = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_UseStreamingOn, None, itkImageFileReaderIVF53)
itkImageFileReaderIVF53.UseStreamingOff = new_instancemethod(_itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_UseStreamingOff, None, itkImageFileReaderIVF53)
itkImageFileReaderIVF53_swigregister = _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_swigregister
itkImageFileReaderIVF53_swigregister(itkImageFileReaderIVF53)

def itkImageFileReaderIVF53___New_orig__():
    """itkImageFileReaderIVF53___New_orig__() -> itkImageFileReaderIVF53_Pointer"""
    return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53___New_orig__()

def itkImageFileReaderIVF53_cast(obj):
    """itkImageFileReaderIVF53_cast(itkLightObject obj) -> itkImageFileReaderIVF53"""
    return _itkReplaceFeatureMapNanInfImageFilterPython.itkImageFileReaderIVF53_cast(obj)


def image_to_image_filter(*args, **kwargs):
    """Procedural interface for ImageToImageFilter"""
    import itk
    instance = itk.ImageToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_to_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.ImageToImageFilter, itkTemplate.itkTemplate):
        image_to_image_filter.__doc__ = itk.ImageToImageFilter.values()[0].__doc__
    else:
        image_to_image_filter.__doc__ = itk.ImageToImageFilter.__doc__

def image_source(*args, **kwargs):
    """Procedural interface for ImageSource"""
    import itk
    instance = itk.ImageSource.New(*args, **kwargs)
    return instance.__internal_call__()

def image_source_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.ImageSource, itkTemplate.itkTemplate):
        image_source.__doc__ = itk.ImageSource.values()[0].__doc__
    else:
        image_source.__doc__ = itk.ImageSource.__doc__

def image_file_writer(*args, **kwargs):
    """Procedural interface for ImageFileWriter"""
    import itk
    instance = itk.ImageFileWriter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_file_writer_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.ImageFileWriter, itkTemplate.itkTemplate):
        image_file_writer.__doc__ = itk.ImageFileWriter.values()[0].__doc__
    else:
        image_file_writer.__doc__ = itk.ImageFileWriter.__doc__

def image_file_reader(*args, **kwargs):
    """Procedural interface for ImageFileReader"""
    import itk
    instance = itk.ImageFileReader.New(*args, **kwargs)
    return instance.__internal_call__()

def image_file_reader_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.ImageFileReader, itkTemplate.itkTemplate):
        image_file_reader.__doc__ = itk.ImageFileReader.values()[0].__doc__
    else:
        image_file_reader.__doc__ = itk.ImageFileReader.__doc__

def replace_feature_map_nan_inf_image_filter(*args, **kwargs):
    """Procedural interface for ReplaceFeatureMapNanInfImageFilter"""
    import itk
    instance = itk.ReplaceFeatureMapNanInfImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def replace_feature_map_nan_inf_image_filter_init_docstring():
    import itk
    import itkTemplate
    if isinstance(itk.ReplaceFeatureMapNanInfImageFilter, itkTemplate.itkTemplate):
        replace_feature_map_nan_inf_image_filter.__doc__ = itk.ReplaceFeatureMapNanInfImageFilter.values()[0].__doc__
    else:
        replace_feature_map_nan_inf_image_filter.__doc__ = itk.ReplaceFeatureMapNanInfImageFilter.__doc__




