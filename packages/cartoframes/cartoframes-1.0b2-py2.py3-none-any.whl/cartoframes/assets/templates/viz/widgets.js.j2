{% include 'utils/format.js.j2' %}

function renderWidget(widget, value) {
  widget.element = widget.element || document.querySelector(`#${widget.id}-value`);
  
  if (value && widget.element) {
    widget.element.innerText = typeof value === 'number' ? format(value) : value;
  }
}

function renderBridge(bridge, widget) {
  widget.element = widget.element || document.querySelector(`#${widget.id}`);
  let options = { ...widget.options };

  switch (widget.type) {
    case 'histogram':
      bridge.histogram(widget.element, widget.value, options);
      break;
    case 'category':
      bridge.category(widget.element, widget.value, options);
      break;
    case 'animation':
      options['propertyName'] = widget.prop;
      bridge.animationControls(widget.element, widget.value, options);
      break;
    case 'time-series':
      options['propertyName'] = widget.prop;
      bridge.timeSeries(widget.element, widget.value, options);
      break;
  }
}

function bridgeLayerWidgets(carto, mapLayer, mapSource, map, widgets) {
  const bridge = new AsBridge.VL.Bridge({
    carto: carto,
    layer: mapLayer,
    source: mapSource,
    map: map
  });

  widgets
    .filter((widget) => widget.has_bridge)
    .forEach((widget) => renderBridge(bridge, widget));

  bridge.build();
}
