# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class ListEmployeeWagesRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, employee_id=None, limit=None, cursor=None):
        """
        ListEmployeeWagesRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'employee_id': 'str',
            'limit': 'int',
            'cursor': 'str'
        }

        self.attribute_map = {
            'employee_id': 'employee_id',
            'limit': 'limit',
            'cursor': 'cursor'
        }

        self._employee_id = employee_id
        self._limit = limit
        self._cursor = cursor

    @property
    def employee_id(self):
        """
        Gets the employee_id of this ListEmployeeWagesRequest.
        Filter wages returned to only those that are associated with the specified employee.

        :return: The employee_id of this ListEmployeeWagesRequest.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """
        Sets the employee_id of this ListEmployeeWagesRequest.
        Filter wages returned to only those that are associated with the specified employee.

        :param employee_id: The employee_id of this ListEmployeeWagesRequest.
        :type: str
        """

        self._employee_id = employee_id

    @property
    def limit(self):
        """
        Gets the limit of this ListEmployeeWagesRequest.
        Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.

        :return: The limit of this ListEmployeeWagesRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this ListEmployeeWagesRequest.
        Maximum number of Employee Wages to return per page. Can range between 1 and 200. The default is the maximum at 200.

        :param limit: The limit of this ListEmployeeWagesRequest.
        :type: int
        """

        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")
        if limit > 200:
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `200`")
        if limit < 1:
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")

        self._limit = limit

    @property
    def cursor(self):
        """
        Gets the cursor of this ListEmployeeWagesRequest.
        Pointer to the next page of Employee Wage results to fetch.

        :return: The cursor of this ListEmployeeWagesRequest.
        :rtype: str
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """
        Sets the cursor of this ListEmployeeWagesRequest.
        Pointer to the next page of Employee Wage results to fetch.

        :param cursor: The cursor of this ListEmployeeWagesRequest.
        :type: str
        """

        self._cursor = cursor

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
