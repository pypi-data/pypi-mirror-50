# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class StandardUnitDescriptionGroup(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, standard_unit_descriptions=None, language_code=None):
        """
        StandardUnitDescriptionGroup - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'standard_unit_descriptions': 'list[StandardUnitDescription]',
            'language_code': 'str'
        }

        self.attribute_map = {
            'standard_unit_descriptions': 'standard_unit_descriptions',
            'language_code': 'language_code'
        }

        self._standard_unit_descriptions = standard_unit_descriptions
        self._language_code = language_code

    @property
    def standard_unit_descriptions(self):
        """
        Gets the standard_unit_descriptions of this StandardUnitDescriptionGroup.
        List of measurement units in this description group.

        :return: The standard_unit_descriptions of this StandardUnitDescriptionGroup.
        :rtype: list[StandardUnitDescription]
        """
        return self._standard_unit_descriptions

    @standard_unit_descriptions.setter
    def standard_unit_descriptions(self, standard_unit_descriptions):
        """
        Sets the standard_unit_descriptions of this StandardUnitDescriptionGroup.
        List of measurement units in this description group.

        :param standard_unit_descriptions: The standard_unit_descriptions of this StandardUnitDescriptionGroup.
        :type: list[StandardUnitDescription]
        """

        self._standard_unit_descriptions = standard_unit_descriptions

    @property
    def language_code(self):
        """
        Gets the language_code of this StandardUnitDescriptionGroup.
        IETF language tag.

        :return: The language_code of this StandardUnitDescriptionGroup.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """
        Sets the language_code of this StandardUnitDescriptionGroup.
        IETF language tag.

        :param language_code: The language_code of this StandardUnitDescriptionGroup.
        :type: str
        """

        self._language_code = language_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
