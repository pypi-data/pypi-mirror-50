# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class EmployeeWage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, employee_id=None, title=None, hourly_rate=None):
        """
        EmployeeWage - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'employee_id': 'str',
            'title': 'str',
            'hourly_rate': 'Money'
        }

        self.attribute_map = {
            'id': 'id',
            'employee_id': 'employee_id',
            'title': 'title',
            'hourly_rate': 'hourly_rate'
        }

        self._id = id
        self._employee_id = employee_id
        self._title = title
        self._hourly_rate = hourly_rate

    @property
    def id(self):
        """
        Gets the id of this EmployeeWage.
        UUID for this object.

        :return: The id of this EmployeeWage.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this EmployeeWage.
        UUID for this object.

        :param id: The id of this EmployeeWage.
        :type: str
        """

        self._id = id

    @property
    def employee_id(self):
        """
        Gets the employee_id of this EmployeeWage.
        The `Employee` that this wage is assigned to.

        :return: The employee_id of this EmployeeWage.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """
        Sets the employee_id of this EmployeeWage.
        The `Employee` that this wage is assigned to.

        :param employee_id: The employee_id of this EmployeeWage.
        :type: str
        """

        if employee_id is None:
            raise ValueError("Invalid value for `employee_id`, must not be `None`")
        if len(employee_id) < 1:
            raise ValueError("Invalid value for `employee_id`, length must be greater than or equal to `1`")

        self._employee_id = employee_id

    @property
    def title(self):
        """
        Gets the title of this EmployeeWage.
        The job title that this wage relates to.

        :return: The title of this EmployeeWage.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this EmployeeWage.
        The job title that this wage relates to.

        :param title: The title of this EmployeeWage.
        :type: str
        """

        self._title = title

    @property
    def hourly_rate(self):
        """
        Gets the hourly_rate of this EmployeeWage.
        Can be a custom-set hourly wage or the calculated effective hourly wage based on annual wage and hours worked per week.

        :return: The hourly_rate of this EmployeeWage.
        :rtype: Money
        """
        return self._hourly_rate

    @hourly_rate.setter
    def hourly_rate(self, hourly_rate):
        """
        Sets the hourly_rate of this EmployeeWage.
        Can be a custom-set hourly wage or the calculated effective hourly wage based on annual wage and hours worked per week.

        :param hourly_rate: The hourly_rate of this EmployeeWage.
        :type: Money
        """

        self._hourly_rate = hourly_rate

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
