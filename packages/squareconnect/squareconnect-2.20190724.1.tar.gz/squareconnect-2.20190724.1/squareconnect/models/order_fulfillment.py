# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class OrderFulfillment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type=None, state=None, pickup_details=None):
        """
        OrderFulfillment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',
            'state': 'str',
            'pickup_details': 'OrderFulfillmentPickupDetails'
        }

        self.attribute_map = {
            'type': 'type',
            'state': 'state',
            'pickup_details': 'pickup_details'
        }

        self._type = type
        self._state = state
        self._pickup_details = pickup_details

    @property
    def type(self):
        """
        Gets the type of this OrderFulfillment.
        The type of the fulfillment. See [OrderFulfillmentType](#type-orderfulfillmenttype) for possible values

        :return: The type of this OrderFulfillment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this OrderFulfillment.
        The type of the fulfillment. See [OrderFulfillmentType](#type-orderfulfillmenttype) for possible values

        :param type: The type of this OrderFulfillment.
        :type: str
        """

        self._type = type

    @property
    def state(self):
        """
        Gets the state of this OrderFulfillment.
        The state of the fulfillment. See [OrderFulfillmentState](#type-orderfulfillmentstate) for possible values

        :return: The state of this OrderFulfillment.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this OrderFulfillment.
        The state of the fulfillment. See [OrderFulfillmentState](#type-orderfulfillmentstate) for possible values

        :param state: The state of this OrderFulfillment.
        :type: str
        """

        self._state = state

    @property
    def pickup_details(self):
        """
        Gets the pickup_details of this OrderFulfillment.
        Contains pickup-specific details. Required when fulfillment type is `PICKUP`.

        :return: The pickup_details of this OrderFulfillment.
        :rtype: OrderFulfillmentPickupDetails
        """
        return self._pickup_details

    @pickup_details.setter
    def pickup_details(self, pickup_details):
        """
        Sets the pickup_details of this OrderFulfillment.
        Contains pickup-specific details. Required when fulfillment type is `PICKUP`.

        :param pickup_details: The pickup_details of this OrderFulfillment.
        :type: OrderFulfillmentPickupDetails
        """

        self._pickup_details = pickup_details

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
