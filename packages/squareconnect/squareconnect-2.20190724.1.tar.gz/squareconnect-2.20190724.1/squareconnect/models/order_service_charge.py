# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class OrderServiceCharge(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, uid=None, name=None, catalog_object_id=None, percentage=None, amount_money=None, applied_money=None, total_money=None, total_tax_money=None, calculation_phase=None, taxable=None, taxes=None):
        """
        OrderServiceCharge - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'uid': 'str',
            'name': 'str',
            'catalog_object_id': 'str',
            'percentage': 'str',
            'amount_money': 'Money',
            'applied_money': 'Money',
            'total_money': 'Money',
            'total_tax_money': 'Money',
            'calculation_phase': 'str',
            'taxable': 'bool',
            'taxes': 'list[OrderLineItemTax]'
        }

        self.attribute_map = {
            'uid': 'uid',
            'name': 'name',
            'catalog_object_id': 'catalog_object_id',
            'percentage': 'percentage',
            'amount_money': 'amount_money',
            'applied_money': 'applied_money',
            'total_money': 'total_money',
            'total_tax_money': 'total_tax_money',
            'calculation_phase': 'calculation_phase',
            'taxable': 'taxable',
            'taxes': 'taxes'
        }

        self._uid = uid
        self._name = name
        self._catalog_object_id = catalog_object_id
        self._percentage = percentage
        self._amount_money = amount_money
        self._applied_money = applied_money
        self._total_money = total_money
        self._total_tax_money = total_tax_money
        self._calculation_phase = calculation_phase
        self._taxable = taxable
        self._taxes = taxes

    @property
    def uid(self):
        """
        Gets the uid of this OrderServiceCharge.
        Unique ID that identifies the service charge only within this order.  This field is read-only.

        :return: The uid of this OrderServiceCharge.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this OrderServiceCharge.
        Unique ID that identifies the service charge only within this order.  This field is read-only.

        :param uid: The uid of this OrderServiceCharge.
        :type: str
        """

        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")
        if len(uid) > 60:
            raise ValueError("Invalid value for `uid`, length must be less than `60`")

        self._uid = uid

    @property
    def name(self):
        """
        Gets the name of this OrderServiceCharge.
        The name of the service charge.

        :return: The name of this OrderServiceCharge.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this OrderServiceCharge.
        The name of the service charge.

        :param name: The name of this OrderServiceCharge.
        :type: str
        """

        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than `255`")

        self._name = name

    @property
    def catalog_object_id(self):
        """
        Gets the catalog_object_id of this OrderServiceCharge.
        The catalog object ID referencing the service charge [CatalogObject](#type-catalogobject).

        :return: The catalog_object_id of this OrderServiceCharge.
        :rtype: str
        """
        return self._catalog_object_id

    @catalog_object_id.setter
    def catalog_object_id(self, catalog_object_id):
        """
        Sets the catalog_object_id of this OrderServiceCharge.
        The catalog object ID referencing the service charge [CatalogObject](#type-catalogobject).

        :param catalog_object_id: The catalog_object_id of this OrderServiceCharge.
        :type: str
        """

        if catalog_object_id is None:
            raise ValueError("Invalid value for `catalog_object_id`, must not be `None`")
        if len(catalog_object_id) > 192:
            raise ValueError("Invalid value for `catalog_object_id`, length must be less than `192`")

        self._catalog_object_id = catalog_object_id

    @property
    def percentage(self):
        """
        Gets the percentage of this OrderServiceCharge.
        The service charge percentage, as a string representation of a decimal number.  For example, `7.25` indicates 7.25%  Exactly one of `percentage` or `amount_money` should be set.

        :return: The percentage of this OrderServiceCharge.
        :rtype: str
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """
        Sets the percentage of this OrderServiceCharge.
        The service charge percentage, as a string representation of a decimal number.  For example, `7.25` indicates 7.25%  Exactly one of `percentage` or `amount_money` should be set.

        :param percentage: The percentage of this OrderServiceCharge.
        :type: str
        """

        if percentage is None:
            raise ValueError("Invalid value for `percentage`, must not be `None`")
        if len(percentage) > 10:
            raise ValueError("Invalid value for `percentage`, length must be less than `10`")

        self._percentage = percentage

    @property
    def amount_money(self):
        """
        Gets the amount_money of this OrderServiceCharge.
        The amount of a non-percentage based service charge.  Exactly one of `percentage` or `amount_money` should be set.

        :return: The amount_money of this OrderServiceCharge.
        :rtype: Money
        """
        return self._amount_money

    @amount_money.setter
    def amount_money(self, amount_money):
        """
        Sets the amount_money of this OrderServiceCharge.
        The amount of a non-percentage based service charge.  Exactly one of `percentage` or `amount_money` should be set.

        :param amount_money: The amount_money of this OrderServiceCharge.
        :type: Money
        """

        self._amount_money = amount_money

    @property
    def applied_money(self):
        """
        Gets the applied_money of this OrderServiceCharge.
        The amount of money applied to the order by the service charge, as calculated by the server.  For fixed-amount service charges, `applied_money` is equal to `amount_money`.  For percentage-based service charges, `applied_money` is the money calculated using the percentage. The `applied_money` field will include any inclusive tax amounts as well.  This field is read-only.

        :return: The applied_money of this OrderServiceCharge.
        :rtype: Money
        """
        return self._applied_money

    @applied_money.setter
    def applied_money(self, applied_money):
        """
        Sets the applied_money of this OrderServiceCharge.
        The amount of money applied to the order by the service charge, as calculated by the server.  For fixed-amount service charges, `applied_money` is equal to `amount_money`.  For percentage-based service charges, `applied_money` is the money calculated using the percentage. The `applied_money` field will include any inclusive tax amounts as well.  This field is read-only.

        :param applied_money: The applied_money of this OrderServiceCharge.
        :type: Money
        """

        self._applied_money = applied_money

    @property
    def total_money(self):
        """
        Gets the total_money of this OrderServiceCharge.
        The total amount of money to collect for the service charge.  Note that `total_money` does not equal `applied_money` plus `total_tax_money` if an inclusive tax is applied to the service charge since the inclusive tax amount will be included in both `applied_money` and `total_tax_money`.  This field is read-only.

        :return: The total_money of this OrderServiceCharge.
        :rtype: Money
        """
        return self._total_money

    @total_money.setter
    def total_money(self, total_money):
        """
        Sets the total_money of this OrderServiceCharge.
        The total amount of money to collect for the service charge.  Note that `total_money` does not equal `applied_money` plus `total_tax_money` if an inclusive tax is applied to the service charge since the inclusive tax amount will be included in both `applied_money` and `total_tax_money`.  This field is read-only.

        :param total_money: The total_money of this OrderServiceCharge.
        :type: Money
        """

        self._total_money = total_money

    @property
    def total_tax_money(self):
        """
        Gets the total_tax_money of this OrderServiceCharge.
        The total amount of tax money to collect for the service charge.  This field is read-only.

        :return: The total_tax_money of this OrderServiceCharge.
        :rtype: Money
        """
        return self._total_tax_money

    @total_tax_money.setter
    def total_tax_money(self, total_tax_money):
        """
        Sets the total_tax_money of this OrderServiceCharge.
        The total amount of tax money to collect for the service charge.  This field is read-only.

        :param total_tax_money: The total_tax_money of this OrderServiceCharge.
        :type: Money
        """

        self._total_tax_money = total_tax_money

    @property
    def calculation_phase(self):
        """
        Gets the calculation_phase of this OrderServiceCharge.
        The calculation phase at which to apply the service charge. See [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase) for possible values

        :return: The calculation_phase of this OrderServiceCharge.
        :rtype: str
        """
        return self._calculation_phase

    @calculation_phase.setter
    def calculation_phase(self, calculation_phase):
        """
        Sets the calculation_phase of this OrderServiceCharge.
        The calculation phase at which to apply the service charge. See [OrderServiceChargeCalculationPhase](#type-orderservicechargecalculationphase) for possible values

        :param calculation_phase: The calculation_phase of this OrderServiceCharge.
        :type: str
        """

        self._calculation_phase = calculation_phase

    @property
    def taxable(self):
        """
        Gets the taxable of this OrderServiceCharge.
        Indicates whether the service charge can be taxed. If set to `true`, any order-level taxes will automatically apply to this service charge. Note that service charges calculated in the `TOTAL_PHASE` cannot be marked as taxable.

        :return: The taxable of this OrderServiceCharge.
        :rtype: bool
        """
        return self._taxable

    @taxable.setter
    def taxable(self, taxable):
        """
        Sets the taxable of this OrderServiceCharge.
        Indicates whether the service charge can be taxed. If set to `true`, any order-level taxes will automatically apply to this service charge. Note that service charges calculated in the `TOTAL_PHASE` cannot be marked as taxable.

        :param taxable: The taxable of this OrderServiceCharge.
        :type: bool
        """

        self._taxable = taxable

    @property
    def taxes(self):
        """
        Gets the taxes of this OrderServiceCharge.
        Taxes applied to the service charge. By default, order-level taxes apply to service charges calculated in the `SUBTOTAL_PHASE` if `taxable` is set to `true`.

        :return: The taxes of this OrderServiceCharge.
        :rtype: list[OrderLineItemTax]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """
        Sets the taxes of this OrderServiceCharge.
        Taxes applied to the service charge. By default, order-level taxes apply to service charges calculated in the `SUBTOTAL_PHASE` if `taxable` is set to `true`.

        :param taxes: The taxes of this OrderServiceCharge.
        :type: list[OrderLineItemTax]
        """

        self._taxes = taxes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
