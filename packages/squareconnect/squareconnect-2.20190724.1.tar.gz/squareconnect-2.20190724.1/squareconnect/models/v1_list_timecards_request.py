# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class V1ListTimecardsRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, order=None, employee_id=None, begin_clockin_time=None, end_clockin_time=None, begin_clockout_time=None, end_clockout_time=None, begin_updated_at=None, end_updated_at=None, deleted=None, limit=None, batch_token=None):
        """
        V1ListTimecardsRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'order': 'str',
            'employee_id': 'str',
            'begin_clockin_time': 'str',
            'end_clockin_time': 'str',
            'begin_clockout_time': 'str',
            'end_clockout_time': 'str',
            'begin_updated_at': 'str',
            'end_updated_at': 'str',
            'deleted': 'bool',
            'limit': 'int',
            'batch_token': 'str'
        }

        self.attribute_map = {
            'order': 'order',
            'employee_id': 'employee_id',
            'begin_clockin_time': 'begin_clockin_time',
            'end_clockin_time': 'end_clockin_time',
            'begin_clockout_time': 'begin_clockout_time',
            'end_clockout_time': 'end_clockout_time',
            'begin_updated_at': 'begin_updated_at',
            'end_updated_at': 'end_updated_at',
            'deleted': 'deleted',
            'limit': 'limit',
            'batch_token': 'batch_token'
        }

        self._order = order
        self._employee_id = employee_id
        self._begin_clockin_time = begin_clockin_time
        self._end_clockin_time = end_clockin_time
        self._begin_clockout_time = begin_clockout_time
        self._end_clockout_time = end_clockout_time
        self._begin_updated_at = begin_updated_at
        self._end_updated_at = end_updated_at
        self._deleted = deleted
        self._limit = limit
        self._batch_token = batch_token

    @property
    def order(self):
        """
        Gets the order of this V1ListTimecardsRequest.
        The order in which timecards are listed in the response, based on their created_at field. See [SortOrder](#type-sortorder) for possible values

        :return: The order of this V1ListTimecardsRequest.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this V1ListTimecardsRequest.
        The order in which timecards are listed in the response, based on their created_at field. See [SortOrder](#type-sortorder) for possible values

        :param order: The order of this V1ListTimecardsRequest.
        :type: str
        """

        self._order = order

    @property
    def employee_id(self):
        """
        Gets the employee_id of this V1ListTimecardsRequest.
        If provided, the endpoint returns only timecards for the employee with the specified ID.

        :return: The employee_id of this V1ListTimecardsRequest.
        :rtype: str
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """
        Sets the employee_id of this V1ListTimecardsRequest.
        If provided, the endpoint returns only timecards for the employee with the specified ID.

        :param employee_id: The employee_id of this V1ListTimecardsRequest.
        :type: str
        """

        self._employee_id = employee_id

    @property
    def begin_clockin_time(self):
        """
        Gets the begin_clockin_time of this V1ListTimecardsRequest.
        If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format.

        :return: The begin_clockin_time of this V1ListTimecardsRequest.
        :rtype: str
        """
        return self._begin_clockin_time

    @begin_clockin_time.setter
    def begin_clockin_time(self, begin_clockin_time):
        """
        Sets the begin_clockin_time of this V1ListTimecardsRequest.
        If filtering results by their clockin_time field, the beginning of the requested reporting period, in ISO 8601 format.

        :param begin_clockin_time: The begin_clockin_time of this V1ListTimecardsRequest.
        :type: str
        """

        self._begin_clockin_time = begin_clockin_time

    @property
    def end_clockin_time(self):
        """
        Gets the end_clockin_time of this V1ListTimecardsRequest.
        If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format.

        :return: The end_clockin_time of this V1ListTimecardsRequest.
        :rtype: str
        """
        return self._end_clockin_time

    @end_clockin_time.setter
    def end_clockin_time(self, end_clockin_time):
        """
        Sets the end_clockin_time of this V1ListTimecardsRequest.
        If filtering results by their clockin_time field, the end of the requested reporting period, in ISO 8601 format.

        :param end_clockin_time: The end_clockin_time of this V1ListTimecardsRequest.
        :type: str
        """

        self._end_clockin_time = end_clockin_time

    @property
    def begin_clockout_time(self):
        """
        Gets the begin_clockout_time of this V1ListTimecardsRequest.
        If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format.

        :return: The begin_clockout_time of this V1ListTimecardsRequest.
        :rtype: str
        """
        return self._begin_clockout_time

    @begin_clockout_time.setter
    def begin_clockout_time(self, begin_clockout_time):
        """
        Sets the begin_clockout_time of this V1ListTimecardsRequest.
        If filtering results by their clockout_time field, the beginning of the requested reporting period, in ISO 8601 format.

        :param begin_clockout_time: The begin_clockout_time of this V1ListTimecardsRequest.
        :type: str
        """

        self._begin_clockout_time = begin_clockout_time

    @property
    def end_clockout_time(self):
        """
        Gets the end_clockout_time of this V1ListTimecardsRequest.
        If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format.

        :return: The end_clockout_time of this V1ListTimecardsRequest.
        :rtype: str
        """
        return self._end_clockout_time

    @end_clockout_time.setter
    def end_clockout_time(self, end_clockout_time):
        """
        Sets the end_clockout_time of this V1ListTimecardsRequest.
        If filtering results by their clockout_time field, the end of the requested reporting period, in ISO 8601 format.

        :param end_clockout_time: The end_clockout_time of this V1ListTimecardsRequest.
        :type: str
        """

        self._end_clockout_time = end_clockout_time

    @property
    def begin_updated_at(self):
        """
        Gets the begin_updated_at of this V1ListTimecardsRequest.
        If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format.

        :return: The begin_updated_at of this V1ListTimecardsRequest.
        :rtype: str
        """
        return self._begin_updated_at

    @begin_updated_at.setter
    def begin_updated_at(self, begin_updated_at):
        """
        Sets the begin_updated_at of this V1ListTimecardsRequest.
        If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format.

        :param begin_updated_at: The begin_updated_at of this V1ListTimecardsRequest.
        :type: str
        """

        self._begin_updated_at = begin_updated_at

    @property
    def end_updated_at(self):
        """
        Gets the end_updated_at of this V1ListTimecardsRequest.
        If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format.

        :return: The end_updated_at of this V1ListTimecardsRequest.
        :rtype: str
        """
        return self._end_updated_at

    @end_updated_at.setter
    def end_updated_at(self, end_updated_at):
        """
        Sets the end_updated_at of this V1ListTimecardsRequest.
        If filtering results by their updated_at field, the end of the requested reporting period, in ISO 8601 format.

        :param end_updated_at: The end_updated_at of this V1ListTimecardsRequest.
        :type: str
        """

        self._end_updated_at = end_updated_at

    @property
    def deleted(self):
        """
        Gets the deleted of this V1ListTimecardsRequest.
        If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don't provide this parameter, both valid and deleted timecards are returned.

        :return: The deleted of this V1ListTimecardsRequest.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this V1ListTimecardsRequest.
        If true, only deleted timecards are returned. If false, only valid timecards are returned.If you don't provide this parameter, both valid and deleted timecards are returned.

        :param deleted: The deleted of this V1ListTimecardsRequest.
        :type: bool
        """

        self._deleted = deleted

    @property
    def limit(self):
        """
        Gets the limit of this V1ListTimecardsRequest.
        The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.

        :return: The limit of this V1ListTimecardsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this V1ListTimecardsRequest.
        The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.

        :param limit: The limit of this V1ListTimecardsRequest.
        :type: int
        """

        self._limit = limit

    @property
    def batch_token(self):
        """
        Gets the batch_token of this V1ListTimecardsRequest.
        A pagination cursor to retrieve the next set of results for your original query to the endpoint.

        :return: The batch_token of this V1ListTimecardsRequest.
        :rtype: str
        """
        return self._batch_token

    @batch_token.setter
    def batch_token(self, batch_token):
        """
        Sets the batch_token of this V1ListTimecardsRequest.
        A pagination cursor to retrieve the next set of results for your original query to the endpoint.

        :param batch_token: The batch_token of this V1ListTimecardsRequest.
        :type: str
        """

        self._batch_token = batch_token

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
