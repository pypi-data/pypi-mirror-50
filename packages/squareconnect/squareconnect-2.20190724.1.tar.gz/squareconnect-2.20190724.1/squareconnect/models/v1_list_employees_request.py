# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class V1ListEmployeesRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, order=None, begin_updated_at=None, end_updated_at=None, begin_created_at=None, end_created_at=None, status=None, external_id=None, limit=None, batch_token=None):
        """
        V1ListEmployeesRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'order': 'str',
            'begin_updated_at': 'str',
            'end_updated_at': 'str',
            'begin_created_at': 'str',
            'end_created_at': 'str',
            'status': 'str',
            'external_id': 'str',
            'limit': 'int',
            'batch_token': 'str'
        }

        self.attribute_map = {
            'order': 'order',
            'begin_updated_at': 'begin_updated_at',
            'end_updated_at': 'end_updated_at',
            'begin_created_at': 'begin_created_at',
            'end_created_at': 'end_created_at',
            'status': 'status',
            'external_id': 'external_id',
            'limit': 'limit',
            'batch_token': 'batch_token'
        }

        self._order = order
        self._begin_updated_at = begin_updated_at
        self._end_updated_at = end_updated_at
        self._begin_created_at = begin_created_at
        self._end_created_at = end_created_at
        self._status = status
        self._external_id = external_id
        self._limit = limit
        self._batch_token = batch_token

    @property
    def order(self):
        """
        Gets the order of this V1ListEmployeesRequest.
        The order in which employees are listed in the response, based on their created_at field.      Default value: ASC See [SortOrder](#type-sortorder) for possible values

        :return: The order of this V1ListEmployeesRequest.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this V1ListEmployeesRequest.
        The order in which employees are listed in the response, based on their created_at field.      Default value: ASC See [SortOrder](#type-sortorder) for possible values

        :param order: The order of this V1ListEmployeesRequest.
        :type: str
        """

        self._order = order

    @property
    def begin_updated_at(self):
        """
        Gets the begin_updated_at of this V1ListEmployeesRequest.
        If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format

        :return: The begin_updated_at of this V1ListEmployeesRequest.
        :rtype: str
        """
        return self._begin_updated_at

    @begin_updated_at.setter
    def begin_updated_at(self, begin_updated_at):
        """
        Sets the begin_updated_at of this V1ListEmployeesRequest.
        If filtering results by their updated_at field, the beginning of the requested reporting period, in ISO 8601 format

        :param begin_updated_at: The begin_updated_at of this V1ListEmployeesRequest.
        :type: str
        """

        self._begin_updated_at = begin_updated_at

    @property
    def end_updated_at(self):
        """
        Gets the end_updated_at of this V1ListEmployeesRequest.
        If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.

        :return: The end_updated_at of this V1ListEmployeesRequest.
        :rtype: str
        """
        return self._end_updated_at

    @end_updated_at.setter
    def end_updated_at(self, end_updated_at):
        """
        Sets the end_updated_at of this V1ListEmployeesRequest.
        If filtering results by there updated_at field, the end of the requested reporting period, in ISO 8601 format.

        :param end_updated_at: The end_updated_at of this V1ListEmployeesRequest.
        :type: str
        """

        self._end_updated_at = end_updated_at

    @property
    def begin_created_at(self):
        """
        Gets the begin_created_at of this V1ListEmployeesRequest.
        If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.

        :return: The begin_created_at of this V1ListEmployeesRequest.
        :rtype: str
        """
        return self._begin_created_at

    @begin_created_at.setter
    def begin_created_at(self, begin_created_at):
        """
        Sets the begin_created_at of this V1ListEmployeesRequest.
        If filtering results by their created_at field, the beginning of the requested reporting period, in ISO 8601 format.

        :param begin_created_at: The begin_created_at of this V1ListEmployeesRequest.
        :type: str
        """

        self._begin_created_at = begin_created_at

    @property
    def end_created_at(self):
        """
        Gets the end_created_at of this V1ListEmployeesRequest.
        If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.

        :return: The end_created_at of this V1ListEmployeesRequest.
        :rtype: str
        """
        return self._end_created_at

    @end_created_at.setter
    def end_created_at(self, end_created_at):
        """
        Sets the end_created_at of this V1ListEmployeesRequest.
        If filtering results by their created_at field, the end of the requested reporting period, in ISO 8601 format.

        :param end_created_at: The end_created_at of this V1ListEmployeesRequest.
        :type: str
        """

        self._end_created_at = end_created_at

    @property
    def status(self):
        """
        Gets the status of this V1ListEmployeesRequest.
        If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). See [V1ListEmployeesRequestStatus](#type-v1listemployeesrequeststatus) for possible values

        :return: The status of this V1ListEmployeesRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this V1ListEmployeesRequest.
        If provided, the endpoint returns only employee entities with the specified status (ACTIVE or INACTIVE). See [V1ListEmployeesRequestStatus](#type-v1listemployeesrequeststatus) for possible values

        :param status: The status of this V1ListEmployeesRequest.
        :type: str
        """

        self._status = status

    @property
    def external_id(self):
        """
        Gets the external_id of this V1ListEmployeesRequest.
        If provided, the endpoint returns only employee entities with the specified external_id.

        :return: The external_id of this V1ListEmployeesRequest.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """
        Sets the external_id of this V1ListEmployeesRequest.
        If provided, the endpoint returns only employee entities with the specified external_id.

        :param external_id: The external_id of this V1ListEmployeesRequest.
        :type: str
        """

        self._external_id = external_id

    @property
    def limit(self):
        """
        Gets the limit of this V1ListEmployeesRequest.
        The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.

        :return: The limit of this V1ListEmployeesRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this V1ListEmployeesRequest.
        The maximum integer number of employee entities to return in a single response. Default 100, maximum 200.

        :param limit: The limit of this V1ListEmployeesRequest.
        :type: int
        """

        self._limit = limit

    @property
    def batch_token(self):
        """
        Gets the batch_token of this V1ListEmployeesRequest.
        A pagination cursor to retrieve the next set of results for your original query to the endpoint.

        :return: The batch_token of this V1ListEmployeesRequest.
        :rtype: str
        """
        return self._batch_token

    @batch_token.setter
    def batch_token(self, batch_token):
        """
        Sets the batch_token of this V1ListEmployeesRequest.
        A pagination cursor to retrieve the next set of results for your original query to the endpoint.

        :param batch_token: The batch_token of this V1ListEmployeesRequest.
        :type: str
        """

        self._batch_token = batch_token

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
