# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class V1ListPaymentsRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, order=None, begin_time=None, end_time=None, limit=None, batch_token=None, include_partial=None):
        """
        V1ListPaymentsRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'order': 'str',
            'begin_time': 'str',
            'end_time': 'str',
            'limit': 'int',
            'batch_token': 'str',
            'include_partial': 'bool'
        }

        self.attribute_map = {
            'order': 'order',
            'begin_time': 'begin_time',
            'end_time': 'end_time',
            'limit': 'limit',
            'batch_token': 'batch_token',
            'include_partial': 'include_partial'
        }

        self._order = order
        self._begin_time = begin_time
        self._end_time = end_time
        self._limit = limit
        self._batch_token = batch_token
        self._include_partial = include_partial

    @property
    def order(self):
        """
        Gets the order of this V1ListPaymentsRequest.
        The order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values

        :return: The order of this V1ListPaymentsRequest.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """
        Sets the order of this V1ListPaymentsRequest.
        The order in which payments are listed in the response. See [SortOrder](#type-sortorder) for possible values

        :param order: The order of this V1ListPaymentsRequest.
        :type: str
        """

        self._order = order

    @property
    def begin_time(self):
        """
        Gets the begin_time of this V1ListPaymentsRequest.
        The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.

        :return: The begin_time of this V1ListPaymentsRequest.
        :rtype: str
        """
        return self._begin_time

    @begin_time.setter
    def begin_time(self, begin_time):
        """
        Sets the begin_time of this V1ListPaymentsRequest.
        The beginning of the requested reporting period, in ISO 8601 format. If this value is before January 1, 2013 (2013-01-01T00:00:00Z), this endpoint returns an error. Default value: The current time minus one year.

        :param begin_time: The begin_time of this V1ListPaymentsRequest.
        :type: str
        """

        self._begin_time = begin_time

    @property
    def end_time(self):
        """
        Gets the end_time of this V1ListPaymentsRequest.
        The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.

        :return: The end_time of this V1ListPaymentsRequest.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this V1ListPaymentsRequest.
        The end of the requested reporting period, in ISO 8601 format. If this value is more than one year greater than begin_time, this endpoint returns an error. Default value: The current time.

        :param end_time: The end_time of this V1ListPaymentsRequest.
        :type: str
        """

        self._end_time = end_time

    @property
    def limit(self):
        """
        Gets the limit of this V1ListPaymentsRequest.
        The maximum number of payments to return in a single response. This value cannot exceed 200.

        :return: The limit of this V1ListPaymentsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this V1ListPaymentsRequest.
        The maximum number of payments to return in a single response. This value cannot exceed 200.

        :param limit: The limit of this V1ListPaymentsRequest.
        :type: int
        """

        self._limit = limit

    @property
    def batch_token(self):
        """
        Gets the batch_token of this V1ListPaymentsRequest.
        A pagination cursor to retrieve the next set of results for your original query to the endpoint.

        :return: The batch_token of this V1ListPaymentsRequest.
        :rtype: str
        """
        return self._batch_token

    @batch_token.setter
    def batch_token(self, batch_token):
        """
        Sets the batch_token of this V1ListPaymentsRequest.
        A pagination cursor to retrieve the next set of results for your original query to the endpoint.

        :param batch_token: The batch_token of this V1ListPaymentsRequest.
        :type: str
        """

        self._batch_token = batch_token

    @property
    def include_partial(self):
        """
        Gets the include_partial of this V1ListPaymentsRequest.
        Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.

        :return: The include_partial of this V1ListPaymentsRequest.
        :rtype: bool
        """
        return self._include_partial

    @include_partial.setter
    def include_partial(self, include_partial):
        """
        Sets the include_partial of this V1ListPaymentsRequest.
        Indicates whether or not to include partial payments in the response. Partial payments will have the tenders collected so far, but the itemizations will be empty until the payment is completed.

        :param include_partial: The include_partial of this V1ListPaymentsRequest.
        :type: bool
        """

        self._include_partial = include_partial

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
