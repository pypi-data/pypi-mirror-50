# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class SearchOrdersDateTimeFilter(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created_at=None, updated_at=None, closed_at=None):
        """
        SearchOrdersDateTimeFilter - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created_at': 'TimeRange',
            'updated_at': 'TimeRange',
            'closed_at': 'TimeRange'
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'updated_at': 'updated_at',
            'closed_at': 'closed_at'
        }

        self._created_at = created_at
        self._updated_at = updated_at
        self._closed_at = closed_at

    @property
    def created_at(self):
        """
        Gets the created_at of this SearchOrdersDateTimeFilter.
        Time range for filtering on the `created_at` timestamp.

        :return: The created_at of this SearchOrdersDateTimeFilter.
        :rtype: TimeRange
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this SearchOrdersDateTimeFilter.
        Time range for filtering on the `created_at` timestamp.

        :param created_at: The created_at of this SearchOrdersDateTimeFilter.
        :type: TimeRange
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this SearchOrdersDateTimeFilter.
        Time range for filtering on the `updated_at` timestamp.

        :return: The updated_at of this SearchOrdersDateTimeFilter.
        :rtype: TimeRange
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this SearchOrdersDateTimeFilter.
        Time range for filtering on the `updated_at` timestamp.

        :param updated_at: The updated_at of this SearchOrdersDateTimeFilter.
        :type: TimeRange
        """

        self._updated_at = updated_at

    @property
    def closed_at(self):
        """
        Gets the closed_at of this SearchOrdersDateTimeFilter.
        Time range for filtering on the `closed_at` timestamp.

        :return: The closed_at of this SearchOrdersDateTimeFilter.
        :rtype: TimeRange
        """
        return self._closed_at

    @closed_at.setter
    def closed_at(self, closed_at):
        """
        Sets the closed_at of this SearchOrdersDateTimeFilter.
        Time range for filtering on the `closed_at` timestamp.

        :param closed_at: The closed_at of this SearchOrdersDateTimeFilter.
        :type: TimeRange
        """

        self._closed_at = closed_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
