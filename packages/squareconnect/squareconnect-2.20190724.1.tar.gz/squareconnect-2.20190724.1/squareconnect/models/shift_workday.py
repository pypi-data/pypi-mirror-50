# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class ShiftWorkday(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, date_range=None, match_shifts_by=None, default_timezone=None):
        """
        ShiftWorkday - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'date_range': 'DateRange',
            'match_shifts_by': 'str',
            'default_timezone': 'str'
        }

        self.attribute_map = {
            'date_range': 'date_range',
            'match_shifts_by': 'match_shifts_by',
            'default_timezone': 'default_timezone'
        }

        self._date_range = date_range
        self._match_shifts_by = match_shifts_by
        self._default_timezone = default_timezone

    @property
    def date_range(self):
        """
        Gets the date_range of this ShiftWorkday.
        Dates for fetching the shifts

        :return: The date_range of this ShiftWorkday.
        :rtype: DateRange
        """
        return self._date_range

    @date_range.setter
    def date_range(self, date_range):
        """
        Sets the date_range of this ShiftWorkday.
        Dates for fetching the shifts

        :param date_range: The date_range of this ShiftWorkday.
        :type: DateRange
        """

        self._date_range = date_range

    @property
    def match_shifts_by(self):
        """
        Gets the match_shifts_by of this ShiftWorkday.
        The strategy on which the dates are applied. See [ShiftWorkdayMatcher](#type-shiftworkdaymatcher) for possible values

        :return: The match_shifts_by of this ShiftWorkday.
        :rtype: str
        """
        return self._match_shifts_by

    @match_shifts_by.setter
    def match_shifts_by(self, match_shifts_by):
        """
        Sets the match_shifts_by of this ShiftWorkday.
        The strategy on which the dates are applied. See [ShiftWorkdayMatcher](#type-shiftworkdaymatcher) for possible values

        :param match_shifts_by: The match_shifts_by of this ShiftWorkday.
        :type: str
        """

        self._match_shifts_by = match_shifts_by

    @property
    def default_timezone(self):
        """
        Gets the default_timezone of this ShiftWorkday.
        Location-specific timezones convert workdays to datetime filters. Every location included in the query must have a timezone, or this field must be provided as a fallback. Format: the IANA timezone database identifier for the relevant timezone.

        :return: The default_timezone of this ShiftWorkday.
        :rtype: str
        """
        return self._default_timezone

    @default_timezone.setter
    def default_timezone(self, default_timezone):
        """
        Sets the default_timezone of this ShiftWorkday.
        Location-specific timezones convert workdays to datetime filters. Every location included in the query must have a timezone, or this field must be provided as a fallback. Format: the IANA timezone database identifier for the relevant timezone.

        :param default_timezone: The default_timezone of this ShiftWorkday.
        :type: str
        """

        self._default_timezone = default_timezone

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
