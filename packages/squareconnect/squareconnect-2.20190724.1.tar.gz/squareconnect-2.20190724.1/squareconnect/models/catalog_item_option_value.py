# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class CatalogItemOptionValue(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, item_option_id=None, name=None, description=None, color=None, ordinal=None, item_variation_count=None):
        """
        CatalogItemOptionValue - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'item_option_id': 'str',
            'name': 'str',
            'description': 'str',
            'color': 'str',
            'ordinal': 'int',
            'item_variation_count': 'int'
        }

        self.attribute_map = {
            'item_option_id': 'item_option_id',
            'name': 'name',
            'description': 'description',
            'color': 'color',
            'ordinal': 'ordinal',
            'item_variation_count': 'item_variation_count'
        }

        self._item_option_id = item_option_id
        self._name = name
        self._description = description
        self._color = color
        self._ordinal = ordinal
        self._item_variation_count = item_variation_count

    @property
    def item_option_id(self):
        """
        Gets the item_option_id of this CatalogItemOptionValue.
        Unique ID of the associated item option.

        :return: The item_option_id of this CatalogItemOptionValue.
        :rtype: str
        """
        return self._item_option_id

    @item_option_id.setter
    def item_option_id(self, item_option_id):
        """
        Sets the item_option_id of this CatalogItemOptionValue.
        Unique ID of the associated item option.

        :param item_option_id: The item_option_id of this CatalogItemOptionValue.
        :type: str
        """

        self._item_option_id = item_option_id

    @property
    def name(self):
        """
        Gets the name of this CatalogItemOptionValue.
        Name of this item option value. Searchable.

        :return: The name of this CatalogItemOptionValue.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CatalogItemOptionValue.
        Name of this item option value. Searchable.

        :param name: The name of this CatalogItemOptionValue.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this CatalogItemOptionValue.
        The option value's human-readable description.

        :return: The description of this CatalogItemOptionValue.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this CatalogItemOptionValue.
        The option value's human-readable description.

        :param description: The description of this CatalogItemOptionValue.
        :type: str
        """

        self._description = description

    @property
    def color(self):
        """
        Gets the color of this CatalogItemOptionValue.
        The HTML color for this value in the format #FFRRGGBB or #RRGGBB (e.g., \"#ff8d4e85\"). Only displayed if parent Item Option's `show_colors` flag is enabled. value.

        :return: The color of this CatalogItemOptionValue.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """
        Sets the color of this CatalogItemOptionValue.
        The HTML color for this value in the format #FFRRGGBB or #RRGGBB (e.g., \"#ff8d4e85\"). Only displayed if parent Item Option's `show_colors` flag is enabled. value.

        :param color: The color of this CatalogItemOptionValue.
        :type: str
        """

        self._color = color

    @property
    def ordinal(self):
        """
        Gets the ordinal of this CatalogItemOptionValue.
        Determines where this option value appears in a list of option values.

        :return: The ordinal of this CatalogItemOptionValue.
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """
        Sets the ordinal of this CatalogItemOptionValue.
        Determines where this option value appears in a list of option values.

        :param ordinal: The ordinal of this CatalogItemOptionValue.
        :type: int
        """

        self._ordinal = ordinal

    @property
    def item_variation_count(self):
        """
        Gets the item_variation_count of this CatalogItemOptionValue.
        The number of [CatalogItemVariation(#type-catalogitemvariation)s that currently make use of this Item Option value. Present only if `retrieve_counts` was specified on the request used to retrieve the parent Item Option of this value.  Maximum: 100 counts.

        :return: The item_variation_count of this CatalogItemOptionValue.
        :rtype: int
        """
        return self._item_variation_count

    @item_variation_count.setter
    def item_variation_count(self, item_variation_count):
        """
        Sets the item_variation_count of this CatalogItemOptionValue.
        The number of [CatalogItemVariation(#type-catalogitemvariation)s that currently make use of this Item Option value. Present only if `retrieve_counts` was specified on the request used to retrieve the parent Item Option of this value.  Maximum: 100 counts.

        :param item_variation_count: The item_variation_count of this CatalogItemOptionValue.
        :type: int
        """

        self._item_variation_count = item_variation_count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
