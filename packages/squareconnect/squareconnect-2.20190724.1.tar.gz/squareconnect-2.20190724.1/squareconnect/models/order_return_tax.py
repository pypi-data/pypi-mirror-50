# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class OrderReturnTax(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, uid=None, source_tax_uid=None, catalog_object_id=None, name=None, type=None, percentage=None, applied_money=None, scope=None):
        """
        OrderReturnTax - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'uid': 'str',
            'source_tax_uid': 'str',
            'catalog_object_id': 'str',
            'name': 'str',
            'type': 'str',
            'percentage': 'str',
            'applied_money': 'Money',
            'scope': 'str'
        }

        self.attribute_map = {
            'uid': 'uid',
            'source_tax_uid': 'source_tax_uid',
            'catalog_object_id': 'catalog_object_id',
            'name': 'name',
            'type': 'type',
            'percentage': 'percentage',
            'applied_money': 'applied_money',
            'scope': 'scope'
        }

        self._uid = uid
        self._source_tax_uid = source_tax_uid
        self._catalog_object_id = catalog_object_id
        self._name = name
        self._type = type
        self._percentage = percentage
        self._applied_money = applied_money
        self._scope = scope

    @property
    def uid(self):
        """
        Gets the uid of this OrderReturnTax.
        Unique ID that identifies the return tax only within this order.  This field is read-only.

        :return: The uid of this OrderReturnTax.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this OrderReturnTax.
        Unique ID that identifies the return tax only within this order.  This field is read-only.

        :param uid: The uid of this OrderReturnTax.
        :type: str
        """

        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")
        if len(uid) > 60:
            raise ValueError("Invalid value for `uid`, length must be less than `60`")

        self._uid = uid

    @property
    def source_tax_uid(self):
        """
        Gets the source_tax_uid of this OrderReturnTax.
        `uid` of the Tax from the Order which contains the original charge of this tax.

        :return: The source_tax_uid of this OrderReturnTax.
        :rtype: str
        """
        return self._source_tax_uid

    @source_tax_uid.setter
    def source_tax_uid(self, source_tax_uid):
        """
        Sets the source_tax_uid of this OrderReturnTax.
        `uid` of the Tax from the Order which contains the original charge of this tax.

        :param source_tax_uid: The source_tax_uid of this OrderReturnTax.
        :type: str
        """

        if source_tax_uid is None:
            raise ValueError("Invalid value for `source_tax_uid`, must not be `None`")
        if len(source_tax_uid) > 60:
            raise ValueError("Invalid value for `source_tax_uid`, length must be less than `60`")

        self._source_tax_uid = source_tax_uid

    @property
    def catalog_object_id(self):
        """
        Gets the catalog_object_id of this OrderReturnTax.
        The catalog object id referencing [CatalogTax](#type-catalogtax).

        :return: The catalog_object_id of this OrderReturnTax.
        :rtype: str
        """
        return self._catalog_object_id

    @catalog_object_id.setter
    def catalog_object_id(self, catalog_object_id):
        """
        Sets the catalog_object_id of this OrderReturnTax.
        The catalog object id referencing [CatalogTax](#type-catalogtax).

        :param catalog_object_id: The catalog_object_id of this OrderReturnTax.
        :type: str
        """

        if catalog_object_id is None:
            raise ValueError("Invalid value for `catalog_object_id`, must not be `None`")
        if len(catalog_object_id) > 192:
            raise ValueError("Invalid value for `catalog_object_id`, length must be less than `192`")

        self._catalog_object_id = catalog_object_id

    @property
    def name(self):
        """
        Gets the name of this OrderReturnTax.
        The tax's name.

        :return: The name of this OrderReturnTax.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this OrderReturnTax.
        The tax's name.

        :param name: The name of this OrderReturnTax.
        :type: str
        """

        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than `255`")

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this OrderReturnTax.
        Indicates the calculation method used to apply the tax. See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values

        :return: The type of this OrderReturnTax.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this OrderReturnTax.
        Indicates the calculation method used to apply the tax. See [OrderLineItemTaxType](#type-orderlineitemtaxtype) for possible values

        :param type: The type of this OrderReturnTax.
        :type: str
        """

        self._type = type

    @property
    def percentage(self):
        """
        Gets the percentage of this OrderReturnTax.
        The percentage of the tax, as a string representation of a decimal number.  A value of `7.25` corresponds to a percentage of 7.25%.

        :return: The percentage of this OrderReturnTax.
        :rtype: str
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """
        Sets the percentage of this OrderReturnTax.
        The percentage of the tax, as a string representation of a decimal number.  A value of `7.25` corresponds to a percentage of 7.25%.

        :param percentage: The percentage of this OrderReturnTax.
        :type: str
        """

        if percentage is None:
            raise ValueError("Invalid value for `percentage`, must not be `None`")
        if len(percentage) > 10:
            raise ValueError("Invalid value for `percentage`, length must be less than `10`")

        self._percentage = percentage

    @property
    def applied_money(self):
        """
        Gets the applied_money of this OrderReturnTax.
        The amount of the money applied by the tax in an order.

        :return: The applied_money of this OrderReturnTax.
        :rtype: Money
        """
        return self._applied_money

    @applied_money.setter
    def applied_money(self, applied_money):
        """
        Sets the applied_money of this OrderReturnTax.
        The amount of the money applied by the tax in an order.

        :param applied_money: The applied_money of this OrderReturnTax.
        :type: Money
        """

        self._applied_money = applied_money

    @property
    def scope(self):
        """
        Gets the scope of this OrderReturnTax.
        Indicates the level at which the tax applies. This field is set by the server. If set in a CreateOrder request, it will be ignored on write. See [OrderLineItemTaxScope](#type-orderlineitemtaxscope) for possible values

        :return: The scope of this OrderReturnTax.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """
        Sets the scope of this OrderReturnTax.
        Indicates the level at which the tax applies. This field is set by the server. If set in a CreateOrder request, it will be ignored on write. See [OrderLineItemTaxScope](#type-orderlineitemtaxscope) for possible values

        :param scope: The scope of this OrderReturnTax.
        :type: str
        """

        self._scope = scope

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
