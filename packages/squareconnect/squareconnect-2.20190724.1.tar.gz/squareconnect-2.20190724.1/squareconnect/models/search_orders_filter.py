# coding: utf-8

"""
Copyright 2017 Square, Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""


from pprint import pformat
from six import iteritems
import re


class SearchOrdersFilter(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, state_filter=None, date_time_filter=None, fulfillment_filter=None, source_filter=None, customer_filter=None):
        """
        SearchOrdersFilter - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'state_filter': 'SearchOrdersStateFilter',
            'date_time_filter': 'SearchOrdersDateTimeFilter',
            'fulfillment_filter': 'SearchOrdersFulfillmentFilter',
            'source_filter': 'SearchOrdersSourceFilter',
            'customer_filter': 'SearchOrdersCustomerFilter'
        }

        self.attribute_map = {
            'state_filter': 'state_filter',
            'date_time_filter': 'date_time_filter',
            'fulfillment_filter': 'fulfillment_filter',
            'source_filter': 'source_filter',
            'customer_filter': 'customer_filter'
        }

        self._state_filter = state_filter
        self._date_time_filter = date_time_filter
        self._fulfillment_filter = fulfillment_filter
        self._source_filter = source_filter
        self._customer_filter = customer_filter

    @property
    def state_filter(self):
        """
        Gets the state_filter of this SearchOrdersFilter.
        Filter by [`OrderState`](#type-orderstate).

        :return: The state_filter of this SearchOrdersFilter.
        :rtype: SearchOrdersStateFilter
        """
        return self._state_filter

    @state_filter.setter
    def state_filter(self, state_filter):
        """
        Sets the state_filter of this SearchOrdersFilter.
        Filter by [`OrderState`](#type-orderstate).

        :param state_filter: The state_filter of this SearchOrdersFilter.
        :type: SearchOrdersStateFilter
        """

        self._state_filter = state_filter

    @property
    def date_time_filter(self):
        """
        Gets the date_time_filter of this SearchOrdersFilter.
        Filter for results within a time range.

        :return: The date_time_filter of this SearchOrdersFilter.
        :rtype: SearchOrdersDateTimeFilter
        """
        return self._date_time_filter

    @date_time_filter.setter
    def date_time_filter(self, date_time_filter):
        """
        Sets the date_time_filter of this SearchOrdersFilter.
        Filter for results within a time range.

        :param date_time_filter: The date_time_filter of this SearchOrdersFilter.
        :type: SearchOrdersDateTimeFilter
        """

        self._date_time_filter = date_time_filter

    @property
    def fulfillment_filter(self):
        """
        Gets the fulfillment_filter of this SearchOrdersFilter.
        Filter by fulfillment type or state.

        :return: The fulfillment_filter of this SearchOrdersFilter.
        :rtype: SearchOrdersFulfillmentFilter
        """
        return self._fulfillment_filter

    @fulfillment_filter.setter
    def fulfillment_filter(self, fulfillment_filter):
        """
        Sets the fulfillment_filter of this SearchOrdersFilter.
        Filter by fulfillment type or state.

        :param fulfillment_filter: The fulfillment_filter of this SearchOrdersFilter.
        :type: SearchOrdersFulfillmentFilter
        """

        self._fulfillment_filter = fulfillment_filter

    @property
    def source_filter(self):
        """
        Gets the source_filter of this SearchOrdersFilter.
        Filter by source of order.

        :return: The source_filter of this SearchOrdersFilter.
        :rtype: SearchOrdersSourceFilter
        """
        return self._source_filter

    @source_filter.setter
    def source_filter(self, source_filter):
        """
        Sets the source_filter of this SearchOrdersFilter.
        Filter by source of order.

        :param source_filter: The source_filter of this SearchOrdersFilter.
        :type: SearchOrdersSourceFilter
        """

        self._source_filter = source_filter

    @property
    def customer_filter(self):
        """
        Gets the customer_filter of this SearchOrdersFilter.
        Filter by customers associated with the order.

        :return: The customer_filter of this SearchOrdersFilter.
        :rtype: SearchOrdersCustomerFilter
        """
        return self._customer_filter

    @customer_filter.setter
    def customer_filter(self, customer_filter):
        """
        Sets the customer_filter of this SearchOrdersFilter.
        Filter by customers associated with the order.

        :param customer_filter: The customer_filter of this SearchOrdersFilter.
        :type: SearchOrdersCustomerFilter
        """

        self._customer_filter = customer_filter

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
