Metadata-Version: 1.2
Name: django-storedqueries
Version: 0.1.4
Summary: A small package for Django to ease the creation of temporary tables, based on model definitions and querysets
Home-page: https://github.com/kezabelle/django-storedqueries
Author: Keryn Knight
Author-email: django-storedqueries@kerynknight.com
Maintainer: Keryn Knight
Maintainer-email: django-storedqueries@kerynknight.com
License: BSD License
Description: django-storedqueries
        ====================
        
        :author: Keryn Knight
        :version: 0.1.4
        
        A small package for `Django`_ to ease the creation of database temporary tables.
        
        It doesn't need to be in your ``INSTALLED_APPS``
        
        Usage
        -----
        
        Define a mostly normal Django model, like so::
        
            from django.db import models
        
            class MyCoolModel(models.Model):
                value = models.PositiveIntegerField(primary_key=True)
        
                class Meta:
                    abstract = True
                    managed = False
        
        Pay special attention to the ``Meta`` attributes. It'll complain otherwise.
        
        Provide a definition for the temporary table somewhere::
        
            from storedqueries import TemporaryTable
        
            class MyTemporaryTable(TemporaryTable):
                model = MyCoolModel
                queryset = Somedata.objects.order_by('?').annotate(value=models.F('key_name')).values_list('value').iterator()
        
        Make use of the temporary table::
        
            from django.http import JsonResponse
        
            def myview(request, *args, **kwargs):
                with MyTemporaryTable() as TemporaryModel:
                    keys = TemporaryModel.objects.all()
                    data = tuple(Somedata.objects.filter(key_name__in=keys))
                    return JsonResponse({'values': data})
        
        Using the ``with my_cls() as thing:`` syntax will create a uniquely named
        temporary table using the ``queryset`` connection and data to fill it,
        when the ``with`` scope closes, the temporary table is dropped. The
        ``TemporaryModel`` variable will be a **subclass** of ``MyCoolModel`` bound to
        the unique name for the temporary table.
        
        If you have a query which cannot be defined at module scope, you can do::
        
            class MyTemporaryTable(TemporaryTable):
                model = MyCoolModel
                def source_queryset(self):
                    return Somedata.objects.filter(created__lte=timezone.now()).annotate(value=models.F('key_name')).values_list('value').iterator()
        
        If you **still** cannot get the query correct, because it has a dependency
        on something like ``request.user`` etc, you can do::
        
            def myview(request, *args, **kwargs):
                qs = Somedata.objects.filter(user=request.user.pk)
                with MyTemporaryTable(queryset=qs) as TemporaryModel:
                    raise NotImplementedError("Dynamic queryset binding")
        
        or probably even::
        
            def myview(request, *args, **kwargs):
                qs = Somedata.objects.filter(user=request.user.pk)
                with TemporaryTable(model=MyCoolModel, queryset=qs) as TemporaryModel:
                    raise NotImplementedError("Dynamic model AND queryset binding")
        
        The license
        -----------
        
        It's `FreeBSD`_. There's should be a ``LICENSE`` file in the root of the repository, and in any archives.
        
        .. _FreeBSD: http://en.wikipedia.org/wiki/BSD_licenses#2-clause_license_.28.22Simplified_BSD_License.22_or_.22FreeBSD_License.22.29
        .. _Django: https://www.djangoproject.com/
        
        
        ----
        
        Copyright (c) 2019, Keryn Knight
        All rights reserved.
        
        Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
        
        1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
        
        2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        
        
        ----
        
        Change history for django-storedqueries
        -------------------------------------------------------------
        0.1.4
        ^^^^^^
        
        * Changed the ``open`` and ``close`` methods of ``TemporaryTableEditor`` to avoid using the cursor as a context manager for greater compatibility (ie: I have an old internal project where this could be useful)
        
        0.1.3
        ^^^^^^
        
        * Raise an exception at runtime if the temporary model being passed in delares ``ForeignKey`` etc without setting ``related_name="+"`` for each.
        * Add functionality for MySQL to detect if it can use the ``MEMORY`` engine.
        
        0.1.2
        ^^^^^^
        * Initial release
        
Keywords: django orm temporary tables queries
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Framework :: Django
Classifier: Framework :: Django :: 1.4
Classifier: Framework :: Django :: 1.5
Classifier: Framework :: Django :: 1.6
Classifier: Framework :: Django :: 1.7
Classifier: Framework :: Django :: 1.8
Classifier: Framework :: Django :: 1.9
Classifier: Framework :: Django :: 1.10
Classifier: Framework :: Django :: 1.11
