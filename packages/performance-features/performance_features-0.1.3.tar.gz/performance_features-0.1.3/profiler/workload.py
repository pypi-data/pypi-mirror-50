# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_workload')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_workload')
    _workload = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_workload', [dirname(__file__)])
        except ImportError:
            import _workload
            return _workload
        try:
            _mod = imp.load_module('_workload', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _workload = swig_import_helper()
    del swig_import_helper
else:
    import _workload
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _workload.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _workload.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _workload.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _workload.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _workload.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _workload.SwigPyIterator_equal(self, x)

    def copy(self):
        return _workload.SwigPyIterator_copy(self)

    def next(self):
        return _workload.SwigPyIterator_next(self)

    def __next__(self):
        return _workload.SwigPyIterator___next__(self)

    def previous(self):
        return _workload.SwigPyIterator_previous(self)

    def advance(self, n):
        return _workload.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _workload.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _workload.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _workload.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _workload.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _workload.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _workload.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _workload.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Workload(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Workload, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Workload, name)
    __repr__ = _swig_repr
    __swig_setmethods__["MAX_SIZE_GROUP"] = _workload.Workload_MAX_SIZE_GROUP_set
    __swig_getmethods__["MAX_SIZE_GROUP"] = _workload.Workload_MAX_SIZE_GROUP_get
    if _newclass:
        MAX_SIZE_GROUP = _swig_property(_workload.Workload_MAX_SIZE_GROUP_get, _workload.Workload_MAX_SIZE_GROUP_set)
    __swig_setmethods__["pid"] = _workload.Workload_pid_set
    __swig_getmethods__["pid"] = _workload.Workload_pid_get
    if _newclass:
        pid = _swig_property(_workload.Workload_pid_get, _workload.Workload_pid_set)
    __swig_setmethods__["ppid"] = _workload.Workload_ppid_set
    __swig_getmethods__["ppid"] = _workload.Workload_ppid_get
    if _newclass:
        ppid = _swig_property(_workload.Workload_ppid_get, _workload.Workload_ppid_set)
    __swig_setmethods__["isAlive"] = _workload.Workload_isAlive_set
    __swig_getmethods__["isAlive"] = _workload.Workload_isAlive_get
    if _newclass:
        isAlive = _swig_property(_workload.Workload_isAlive_get, _workload.Workload_isAlive_set)

    def __init__(self, args):
        this = _workload.new_Workload(args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def start(self):
        return _workload.Workload_start(self)

    def add_events(self, fds_):
        return _workload.Workload_add_events(self, fds_)

    def run(self, sample_perid, reset):
        return _workload.Workload_run(self, sample_perid, reset)
    if _newclass:
        handler = staticmethod(_workload.Workload_handler)
    else:
        handler = _workload.Workload_handler
    __swig_destroy__ = _workload.delete_Workload
    __del__ = lambda self: None
Workload_swigregister = _workload.Workload_swigregister
Workload_swigregister(Workload)

def Workload_handler(sig, si, ucontext):
    return _workload.Workload_handler(sig, si, ucontext)
Workload_handler = _workload.Workload_handler

class stringVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stringVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stringVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _workload.stringVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _workload.stringVec___nonzero__(self)

    def __bool__(self):
        return _workload.stringVec___bool__(self)

    def __len__(self):
        return _workload.stringVec___len__(self)

    def __getslice__(self, i, j):
        return _workload.stringVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _workload.stringVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _workload.stringVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _workload.stringVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _workload.stringVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _workload.stringVec___setitem__(self, *args)

    def pop(self):
        return _workload.stringVec_pop(self)

    def append(self, x):
        return _workload.stringVec_append(self, x)

    def empty(self):
        return _workload.stringVec_empty(self)

    def size(self):
        return _workload.stringVec_size(self)

    def swap(self, v):
        return _workload.stringVec_swap(self, v)

    def begin(self):
        return _workload.stringVec_begin(self)

    def end(self):
        return _workload.stringVec_end(self)

    def rbegin(self):
        return _workload.stringVec_rbegin(self)

    def rend(self):
        return _workload.stringVec_rend(self)

    def clear(self):
        return _workload.stringVec_clear(self)

    def get_allocator(self):
        return _workload.stringVec_get_allocator(self)

    def pop_back(self):
        return _workload.stringVec_pop_back(self)

    def erase(self, *args):
        return _workload.stringVec_erase(self, *args)

    def __init__(self, *args):
        this = _workload.new_stringVec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _workload.stringVec_push_back(self, x)

    def front(self):
        return _workload.stringVec_front(self)

    def back(self):
        return _workload.stringVec_back(self)

    def assign(self, n, x):
        return _workload.stringVec_assign(self, n, x)

    def resize(self, *args):
        return _workload.stringVec_resize(self, *args)

    def insert(self, *args):
        return _workload.stringVec_insert(self, *args)

    def reserve(self, n):
        return _workload.stringVec_reserve(self, n)

    def capacity(self):
        return _workload.stringVec_capacity(self)
    __swig_destroy__ = _workload.delete_stringVec
    __del__ = lambda self: None
stringVec_swigregister = _workload.stringVec_swigregister
stringVec_swigregister(stringVec)

class intVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _workload.intVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _workload.intVec___nonzero__(self)

    def __bool__(self):
        return _workload.intVec___bool__(self)

    def __len__(self):
        return _workload.intVec___len__(self)

    def __getslice__(self, i, j):
        return _workload.intVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _workload.intVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _workload.intVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _workload.intVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _workload.intVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _workload.intVec___setitem__(self, *args)

    def pop(self):
        return _workload.intVec_pop(self)

    def append(self, x):
        return _workload.intVec_append(self, x)

    def empty(self):
        return _workload.intVec_empty(self)

    def size(self):
        return _workload.intVec_size(self)

    def swap(self, v):
        return _workload.intVec_swap(self, v)

    def begin(self):
        return _workload.intVec_begin(self)

    def end(self):
        return _workload.intVec_end(self)

    def rbegin(self):
        return _workload.intVec_rbegin(self)

    def rend(self):
        return _workload.intVec_rend(self)

    def clear(self):
        return _workload.intVec_clear(self)

    def get_allocator(self):
        return _workload.intVec_get_allocator(self)

    def pop_back(self):
        return _workload.intVec_pop_back(self)

    def erase(self, *args):
        return _workload.intVec_erase(self, *args)

    def __init__(self, *args):
        this = _workload.new_intVec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _workload.intVec_push_back(self, x)

    def front(self):
        return _workload.intVec_front(self)

    def back(self):
        return _workload.intVec_back(self)

    def assign(self, n, x):
        return _workload.intVec_assign(self, n, x)

    def resize(self, *args):
        return _workload.intVec_resize(self, *args)

    def insert(self, *args):
        return _workload.intVec_insert(self, *args)

    def reserve(self, n):
        return _workload.intVec_reserve(self, n)

    def capacity(self):
        return _workload.intVec_capacity(self)
    __swig_destroy__ = _workload.delete_intVec
    __del__ = lambda self: None
intVec_swigregister = _workload.intVec_swigregister
intVec_swigregister(intVec)

class int64Vec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int64Vec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int64Vec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _workload.int64Vec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _workload.int64Vec___nonzero__(self)

    def __bool__(self):
        return _workload.int64Vec___bool__(self)

    def __len__(self):
        return _workload.int64Vec___len__(self)

    def __getslice__(self, i, j):
        return _workload.int64Vec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _workload.int64Vec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _workload.int64Vec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _workload.int64Vec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _workload.int64Vec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _workload.int64Vec___setitem__(self, *args)

    def pop(self):
        return _workload.int64Vec_pop(self)

    def append(self, x):
        return _workload.int64Vec_append(self, x)

    def empty(self):
        return _workload.int64Vec_empty(self)

    def size(self):
        return _workload.int64Vec_size(self)

    def swap(self, v):
        return _workload.int64Vec_swap(self, v)

    def begin(self):
        return _workload.int64Vec_begin(self)

    def end(self):
        return _workload.int64Vec_end(self)

    def rbegin(self):
        return _workload.int64Vec_rbegin(self)

    def rend(self):
        return _workload.int64Vec_rend(self)

    def clear(self):
        return _workload.int64Vec_clear(self)

    def get_allocator(self):
        return _workload.int64Vec_get_allocator(self)

    def pop_back(self):
        return _workload.int64Vec_pop_back(self)

    def erase(self, *args):
        return _workload.int64Vec_erase(self, *args)

    def __init__(self, *args):
        this = _workload.new_int64Vec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _workload.int64Vec_push_back(self, x)

    def front(self):
        return _workload.int64Vec_front(self)

    def back(self):
        return _workload.int64Vec_back(self)

    def assign(self, n, x):
        return _workload.int64Vec_assign(self, n, x)

    def resize(self, *args):
        return _workload.int64Vec_resize(self, *args)

    def insert(self, *args):
        return _workload.int64Vec_insert(self, *args)

    def reserve(self, n):
        return _workload.int64Vec_reserve(self, n)

    def capacity(self):
        return _workload.int64Vec_capacity(self)
    __swig_destroy__ = _workload.delete_int64Vec
    __del__ = lambda self: None
int64Vec_swigregister = _workload.int64Vec_swigregister
int64Vec_swigregister(int64Vec)

class int64VecVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int64VecVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int64VecVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _workload.int64VecVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _workload.int64VecVec___nonzero__(self)

    def __bool__(self):
        return _workload.int64VecVec___bool__(self)

    def __len__(self):
        return _workload.int64VecVec___len__(self)

    def __getslice__(self, i, j):
        return _workload.int64VecVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _workload.int64VecVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _workload.int64VecVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _workload.int64VecVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _workload.int64VecVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _workload.int64VecVec___setitem__(self, *args)

    def pop(self):
        return _workload.int64VecVec_pop(self)

    def append(self, x):
        return _workload.int64VecVec_append(self, x)

    def empty(self):
        return _workload.int64VecVec_empty(self)

    def size(self):
        return _workload.int64VecVec_size(self)

    def swap(self, v):
        return _workload.int64VecVec_swap(self, v)

    def begin(self):
        return _workload.int64VecVec_begin(self)

    def end(self):
        return _workload.int64VecVec_end(self)

    def rbegin(self):
        return _workload.int64VecVec_rbegin(self)

    def rend(self):
        return _workload.int64VecVec_rend(self)

    def clear(self):
        return _workload.int64VecVec_clear(self)

    def get_allocator(self):
        return _workload.int64VecVec_get_allocator(self)

    def pop_back(self):
        return _workload.int64VecVec_pop_back(self)

    def erase(self, *args):
        return _workload.int64VecVec_erase(self, *args)

    def __init__(self, *args):
        this = _workload.new_int64VecVec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _workload.int64VecVec_push_back(self, x)

    def front(self):
        return _workload.int64VecVec_front(self)

    def back(self):
        return _workload.int64VecVec_back(self)

    def assign(self, n, x):
        return _workload.int64VecVec_assign(self, n, x)

    def resize(self, *args):
        return _workload.int64VecVec_resize(self, *args)

    def insert(self, *args):
        return _workload.int64VecVec_insert(self, *args)

    def reserve(self, n):
        return _workload.int64VecVec_reserve(self, n)

    def capacity(self):
        return _workload.int64VecVec_capacity(self)
    __swig_destroy__ = _workload.delete_int64VecVec
    __del__ = lambda self: None
int64VecVec_swigregister = _workload.int64VecVec_swigregister
int64VecVec_swigregister(int64VecVec)

# This file is compatible with both classic and new-style classes.


