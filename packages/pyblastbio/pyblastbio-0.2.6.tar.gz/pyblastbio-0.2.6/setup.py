# -*- coding: utf-8 -*-
from distutils.core import setup

packages = \
['pyblast', 'pyblast.blast', 'pyblast.blast_bin', 'pyblast.utils']

package_data = \
{'': ['*']}

install_requires = \
['biopython>=1.73,<2.0',
 'fire>=0.1.3,<0.2.0',
 'networkx>=2.3,<3.0',
 'termcolor>=1.1,<2.0']

entry_points = \
{'console_scripts': ['pyblast = pyblast:cli.main']}

setup_kwargs = {
    'name': 'pyblastbio',
    'version': '0.2.6',
    'description': '',
    'long_description': '\n[![travis build](https://img.shields.io/travis/jvrana/pyblast.svg)](https://travis-ci.org/jvrana/pyblast)\n[![Coverage Status](https://coveralls.io/repos/github/jvrana/pyblast/badge.svg?branch=master)](https://coveralls.io/github/jvrana/pyblast?branch=master)\n[![PyPI version](https://badge.fury.io/py/REPO.svg)](https://badge.fury.io/py/REPO)\n\n![module_icon](images/module_icon.png?raw=true)\n\n#### Build/Coverage Status\nBranch | Build | Coverage\n:---: | :---: | :---:\n**master** | [![travis build](https://img.shields.io/travis/jvrana/pyblast/master.svg)](https://travis-ci.org/jvrana/pyblast/master) | [![Coverage Status](https://coveralls.io/repos/github/jvrana/pyblast/badge.svg?branch=master)](https://coveralls.io/github/jvrana/pyblast?branch=master)\n**development** | [![travis build](https://img.shields.io/travis/jvrana/pyblast/development.svg)](https://travis-ci.org/jvrana/pyblast/development) | [![Coverage Status](https://coveralls.io/repos/github/jvrana/pyblast/badge.svg?branch=development)](https://coveralls.io/github/jvrana/pyblast?branch=development)\n\n**this repo is not longer active**\n\n# pyblast\n\nThis is a wrapper for other applications to run blast searches\n\n# Installation\n\nYou can install BLAST to the pyblast directory using the following command:\n\n```\npyblast install\n```\n\nThis will install it to pyblast/blast_bin. If you want BLAST installed somewhere else, move the *ncbi-blast-X.X.X+* folder\nto your desired location and add *path/to/ncbi-blast-X.X.X+/bin* to you $PATH. **PyBlast** will prefer to use the blast stored\nin your executable path. If it cannot find a blast executable there, it looks for it in that paths in the pyblast/blast_bin/_paths.txt.\nfile. _paths.txt is automatically updated when you run install_blast.py so theres no need to manage the paths manually.\n\nAfter installing and verifying the `blastn` command works from the cmd line,\n\n```\npip install pyblastbio\n```\n\n## Status\n\nIn alpha, but let me know if you are interested in this repo.\n\n## Usage\n\nThis package is a python wrapper for the BLAST command line, intended to be run along with a microservice (e.g. Flask).\nThis package also includes a basic python-based installation script which is used in unit-testing.\n\n### Input options\n\nTo use blast...\n\n```python\nfrom pyblast import JSONBlast\n\n# load your DNA from where ever you keep it\nquery = json.load(...)\nsubjects = json.load(...)\n\n# BLAST cmd object\nmyblast = JSONBlast(subjects, query)\n\n# build the db, run the search, & parse the results\ncongig = {...}\nmyblast.quick_blastn(**config)\n\n# get the results object\nresults = myblast.results  # get the results object\n```\n\n### Input Format\n\nInput sequences have the following format:\n\n```JSON\n  {\n    "name": "attB-mCh-Dnmt3b1-Poly(A",\n    "sequence": "gatGCCAGCTCATTCCTCCCACTCATGATCTATAGATCCCCCGGGCTGCAGGAATTCTACCGGGTAGGGGAGGCGCTTTTCCCAAGGCAGTCTGGAGCATGCGCTTTAGCAGCCCCGCTGGGCACTTGGCGCTACACAAGTGGCCTCTGGCCTCGCACACATTCCACATCCACCGGTAGGCGCCAACCGGCTCCGTTCTTTGGTGGCCCCTTCGCGCCACCTTCTACTCCTCCCCTAGTCAGGAAGTTCCCCCCCGCCCCGCAGCTCGCGTCGTGCAGGACGTGACAAATGGAAGTAGCACGTCTCACTAGTCTCGTGCAGATGGACAGCACCGCTGAGCAATGGAAGCGGGTAGGCCTTTGGGGCAGCGGCCAATAGCAGCTTTGCTCCTTCGCTTTCTGGGCTCAGAGGCTGGGAAGGGGTGGGTCCGGGGGCGGGCTCAGGGGCGGGCTCAGGGGCGGGGCGGGCGCCCGAAGGTCCTCCGGAGGCCCGGCATTCTGCACGCTTCAAAAGCGCACGTCTGCCGCGCTGTTCTCCTCTTCCTCATCTCCGGGCCTTTCGACCGATCATCAAGCTTAATGATTGAACAAGATGGATTGCACGCAGGTTCTCCGGCCGCTTGGGTGGAGAGGCTATTCGGCTATGACTGGGCACAACAGACAATCGGCTGCTCTGATGCCGCCGTGTTCCGGCTGTCAGCGCAGGGGCGCCCGGTTCTTTTTGTCAAGACCGACCTGTCCGGTGCCCTGAATGAACTGCAAGACGAGGCAGCGCGGCTATCGTGGCTGGCCACGACGGGCGTTCCTTGCGCAGCTGTGCTCGACGTTGTCACTGAAGCGGGAAGGGACTGGCTGCTATTGGGCGAAGTGCCGGGGCAGGATCTCCTGTCATCTCACCTTGCTCCTGCCGAGAAAGTATCCATCATGGCTGATGCAATGCGGCGGCTGCATACGCTTGATCCGGCTACCTGCCCATTCGACCACCAAGCGAAACATCGCATCGAGCGAGCACGTACTCGGATGGAAGCCGGTCTTGTCGATCAGGATGATCTGGACGAAGAGCATCAGGGGCTCGCGCCAGCCGAACTGTTCGCCAGGCTCAAGGCGAGCATGCCCGACGGCGAGGATCTCGTCGTGACCCATGGCGATGCCTGCTTGCCGAATATCATGGTGGAAAATGGCCGCTTTTCTGGATTCATCGACTGTGGCCGGCTGGGTGTGGCGGACCGCTATCAGGACATAGCGTTGGCTACCCGTGATATTGCTGAAGAGCTTGGCGGCGAATGGGCTGACCGCTTCCTCGTGCTTTACGGTATCGCCGCTCCCGATTCGCAGCGCATCGCCTTCTATCGCCTTCTTGACGAGTTCTTCTGAGCGGGACTCTGGGGTTCGAAATGACCGACCAAGCGACGCCCAACCTGCCATCACGAGATTTCGATTCCACCGCCGCCTTCTATGAAAGGTTGGGCTTCGGAATCGTTTTCCGGGACGCCGGCTGGATGATCCTCCAGCGCGGGGATCTCATGCTGGAGTTCTTCGCCCACCCTAGGGGGAGGCTAACTGAAACACGGAAGGAGACAATACCGGAAGGAACCCGCGCTATGACGGCAATAAAAAGACAGAATAAAACGCACGGTGTTGGGTCGTTTGTTCATAAACGCGGGGTTCGGTCCCAGGGCTGGCACTCTGTCGATACCCCACCGAGACCCCATTGGGGCCAATACGCCCGCGTTTCTTCCTTTTCCCCACCCCACCCCCCAAGTTCGGGTGAAGGCCCAGGGCTCGCAGCCAACGTCGGGGCGGCAAGCTTACATCGAGatcCCGGCTTGTCGACGACGGCGgtCTCCGTCGTCAGGATCATCCGTGAGCAAGGGCGAGGAGGATAACATGGCCATCATCAAGGAGTTCATGCGCTTCAAGGTGCACATGGAGGGCTCCGTGAACGGCCACGAGTTCGAGATCGAGGGCGAGGGCGAGGGCCGCCCCTACGAGGGCACCCAGACCGCCAAGCTGAAGGTGACCAAGGGTGGCCCCCTGCCCTTCGCCTGGGACATCCTGTCCCCTCAGTTCATGTACGGCTCCAAGGCCTACGTGAAGCACCCCGCCGACATCCCCGACTACTTGAAGCTGTCCTTCCCCGAGGGCTTCAAGTGGGAGCGCGTGATGAACTTCGAGGACGGCGGCGTGGTGACCGTGACCCAGGACTCCTCCCTGCAGGACGGCGAGTTCATCTACAAGGTGAAGCTGCGCGGCACCAACTTCCCCTCCGACGGCCCCGTAATGCAGAAGAAGACCATGGGCTGGGAGGCCTCCTCCGAGCGGATGTACCCCGAGGACGGCGCCCTGAAGGGCGAGATCAAGCAGAGGCTGAAGCTGAAGGACGGCGGCCACTACGACGCTGAGGTCAAGACCACCTACAAGGCCAAGAAGCCCGTGCAGCTGCCCGGCGCCTACAACGTCAACATCAAGTTGGACATCACCTCCCACAACGAGGACTACACCATCGTGGAACAGTACGAACGCGCCGAGGGCCGCCACTCCACCGGCGGCATGGACGAGCTGTACAAGAGCGGCCTGAGGAGCAGAGCCCAGGCGAGCAACAGCGCCGTGGACGCCACCATGGGCGatCGCATGAAGGGAGACAGCAGACATCTGAATGAAGAAGAGGGTGCCAGCGGGTATGAGGAGTGCATTATCGTTAATGGGAACTTCAGTGACCAGTCCTCAGACACGAAGGATGCTCCCTCACCCCCAGTCTTGGAGGCAATCTGCACAGAGCCAGTCTGCACACCAGAGACCAGAGGCCGCAGGTCAAGCTCCCGGCTGTCTAAGAGGGAGGTCTCCAGCCTTCTGAATTACACGCAGGACATGACAGGAGATGGAGACAGAGATGATGAAGTAGATGATGGGAATGGCTCTGATATTCTAATGCCAAAGCTCACCCGTGAGACCAAGGACACCAGGACGCGCTCTGAAAGCCCGGCTGTCCGAACCCGACATAGCAATGGGACCTCCAGCTTGGAGAGGCAAAGAGCCTCCCCCAGAATCACCCGAGGTCGGCAGGGCCGCCACCATGTGCAGGAGTACCCTGTGGAGTTTCCGGCTACCAGGTCTCGGAGACGTCGAGCATCGTCTTCAGCAAGCACGCCATGGTCATCCCCTGCCAGCGTCGACTTCATGGAAGAAGTGACACCTAAGAGCGTCAGTACCCCATCAGTTGACTTGAGCCAGGATGGAGATCAGGAGGGTATGGATACCACACAGGTGGATGCAGAGAGCAGAGATGGAGACAGCACAGAGTATCAGGATGATAAAGAGTTTGGAATAGGTGACCTCGTGTGGGGAAAGATCAAGGGCTTCTCCTGGTGGCCTGCCATGGTGGTGTCCTGGAAAGCCACCTCCAAGCGACAGGCCATGCCCGGAATGCGCTGGGTACAGTGGTTTGGTGATGGCAAGTTTTCTGAGATCTCTGCTGACAAACTGGTGGCTCTGGGGCTGTTCAGCCAGCACTTTAATCTGGCTACCTTCAATAAGCTGGTTTCTTATAGGAAGGCCATGTACCACACTCTGGAGAAAGCCAGGGTTCGAGCTGGCAAGACCTTCTCCAGCAGTCCTGGAGAGTCACTGGAGGACCAGCTGAAGCCCATGCTGGAGTGGGCCCACGGTGGCTTCAAGCCTACTGGGATCGAGGGCCTCAAACCCAACAAGAAGCAACCAGTGGTTAATAAGTCGAAGGTGCGTCGTTCAGACAGTAGGAACTTAGAACCCAGGAGACGCGAGAACAAAAGTCGAAGACGCACAACCAATGACTCTGCTGCTTCTGAGTCCCCCCCACCCAAGCGCCTCAAGACAAATAGCTATGGCGGGAAGGACCGAGGGGAGGATGAGGAGAGCCGAGAACGGATGGCTTCTGAAGTCACCAACAACAAGGGCAATCTGGAAGACCGCTGTTTGTCCTGTGGAAAGAAGAACCCTGTGTCCTTCCACCCCCTCTTTGAGGGTGGGCTCTGTCAGAGTTGCCGGGATCGCTTCCTAGAGCTCTTCTACATGTATGATGAGGACGGCTATCAGTCCTACTGCACCGTGTGCTGTGAGGGCCGTGAACTGCTGCTGTGCAGTAACACAAGCTGCTGCAGATGCTTCTGTGTGGAGTGTCTGGAGGTGCTGGTGGGCGCAGGCACAGCTGAGGATGCCAAGCTGCAGGAACCCTGGAGCTGCTATATGTGCCTCCCTCAGCGCTGCCATGGGGTCCTCCGACGCAGGAAAGATTGGAACATGCGCCTGCAAGACTTCTTCACTACTGATCCTGACCTGGAAGAATTTGAGCCACCCAAGTTGTACCCAGCAATTCCTGCAGCCAAAAGGAGGCCCATTAGAGTCCTGTCTCTGTTTGATGGAATTGCAACGGGGTACTTGGTGCTCAAGGAGTTGGGTATTAAAGTGGAAAAGTACATTGCCTCCGAAGTCTGTGCAGAGTCCATCGCTGTGGGAACTGTTAAGCATGAAGGCCAGATCAAATATGTCAATGACGTCCGGAAAATCACCAAGAAAAATATTGAAGAGTGGGGCCCGTTCGACTTGGTGATTGGTGGAAGCCCATGCAATGATCTCTCTAACGTCAATCCTGCCCGCAAAGGTTTATATGAGGGCACAGGAAGGCTCTTCTTCGAGTTTTACCACTTGCTGAATTATACCCGCCCCAAGGAGGGCGACAACCGTCCATTCTTCTGGATGTTCGAGAATGTTGTGGCCATGAAAGTGAATGACAAGAAAGACATCTCAAGATTCCTGGCATGTAACCCAGTGATGATCGATGCCATCAAGGTGTCTGCTGCTCACAGGGCCCGGTACTTCTGGGGTAACCTACCCGGAATGAACAGGCCCGTGATGGCTTCAAAGAATGATAAGCTCGAGCTGCAGGACTGCCTGGAGTTCAGTAGGACAGCAAAGTTAAAGAAAGTGCAGACAATAACCACCAAGTCGAACTCCATCAGACAGGGCAAAAACCAGCTTTTCCCTGTAGTCATGAATGGCAAGGACGACGTTTTGTGGTGCACTGAGCTCGAAAGGATCTTCGGCTTCCCTGCTCACTACACGGACGTGTCCAACATGGGCCGCGGCGCCCGTCAGAAGCTGCTGGGCAGGTCCTGGAGTGTACCGGTCATCAGACACCTGTTTGCCCCCTTGAAGGACTACTTTGCCTGTGAATAGGCggccGCAGTTAACGAATTCtctagaggatccagacatgataagatacattgatgagtttggacaaaccacaactagaatgcagtgaaaaaaatgctttatttgtgaaatttgtgatgctattgctttatttgtaaccattataagctgcaataaacaagttaacaacaacaattgcattcattttatgtttcaggttcagggggaggtgtgggaggttttttaaagcaagtaaaacctctacaaatgtggtatggctgattatgatcctgcaagcctcgtcgccgcggtttATTCTGTTGACAATTAATCATCGGCATAGTATATCGGCATAGTATAATACGACAAGGTGAGGAACTAAACCATGGGATCGGCCATTGAACAAGATGGATTGCACGCAGGTTCTCCGGCCGCTTGGGTGGAGAGGCTATTCGGCTATGACTGGGCACAACAGACGATCGGCTGCTCTGATGCCGCCGTGTTCCGGCTGTCAGCGCAGGGGCGCCCGGTTCTTTTTGTCAAGACCGACCTGTCCGGTGCCCTGAATGAACTGCAGGACGAGGCAGCGCGGCTATCGTGGCTGGCCACGACGGGCGTTCCTTGCGCAGCTGTGCTCGACGTTGTCACTGAAGCGGGAAGGGACTGGCTGCTATTGGGCGAAGTGCCGGGGCAGGATCTCCTGTCATCTCACCTTGCTCCTGCCGAGAAAGTATCCATCATGGCTGATGCAATGCGGCGGCTGCATACGCTTGATCCGGCTACCTGCCCATTCGACCACCAAGCGAAACATCGCATCGAGCGAGCACGTACTCGGATGGAAGCCGGTCTTGTCGATCAGGATGATCTGGACGAAGAGCATCAGGGGCTCGCGCCAGCCGAACTGTTCGCCAGGCTCAAGGCGCGCATGCCCGACGGCGAGGATCTCGTCGTGACCCATGGCGATGCCTGCTTGCCGAATATCATGGTGGAAAATGGCCGCTTTTCTGGATTCATCGACTGTGGCCGGCTGGGTGTGGCGGACCGCTATCAGGACATAGCGTTGGCTACCCGTGATATTGCTGAAGAGCTTGGCGGCGAATGGGCTGACCGCTTCCTCGTGCTTTACGGTATCGCCGCCCCCGATTCGCAGCGCATCGCCTTCTATCGCCTTCTTGACGAGTTCTTCTGAGCGGGACTCTGGGGTTCGAATAAAGACCGACCAAGCGACGTCTGAGAGCTCCCTGGCGAATTCGGTACCAATAAAAGAGCTTTATTTTCATGATCTGTGTGTTGGTTTTTGGCCGCGTTGCTGGCGTTTTTCCATAGGCTCCGCCCCCCTGACGAGCATCACAAAAATCGACGCTCAAGTCAGAGGTGGCGAAACCCGACAGGACTATAAAGATACCAGGCGTTTCCCCCTGGAAGCTCCCTCGTGCGCTCTCCTGTTCCGACCCTGCCGCTTACCGGATACCTGTCCGCCTTTCTCCCTTCGGGAAGCGTGGCGCTTTCTCATAGCTCACGCTGTAGGTATCTCAGTTCGGTGTAGGTCGTTCGCTCCAAGCTGGGCTGTGTGCACGAACCCCCCGTTCAGCCCGACCGCTGCGCCTTATCCGGTAACTATCGTCTTGAGTCCAACCCGGTAAGACACGACTTATCGCCACTGGCAGCAGCCACTGGTAACAGGATTAGCAGAGCGAGGTATGTAGGCGGTGCTACAGAGTTCTTGAAGTGGTGGCCTAACTACGGCTACACTAGAAGAACAGTATTTGGTATCTGCGCTCTGCTGAAGCCAGTTACCTTCGGAAAAAGAGTTGGTAGCTCTTGATCCGGCAAACAAACCACCGCTGGTAGCGGTGGTTTTTTTGTTTGCAAGCAGCAGATTACGCGCAGAAAAAAAGGATCTCAAGAAGATCCTTTGATCTTTTCTAGTGTGCG",\n    "circular": true,\n    "description": null,\n    "features": [\n      {\n        "name": "END",\n        "type": "misc_feature",\n        "id": null,\n        "start": 5194,\n        "end": 5209,\n        "strand": 1\n      },\n      ...\n    }\n```\n\n### Output Format\n\nBLAST results returns an `AlignmentResults` object, which contains a list of alignments at `.alignments`\n\nAlignments have the following format:\n\n```JSON\n[\n  {\n    "meta": {\n      "gaps_open": 0,\n      "bit_score": 7792,\n      "gaps": 0,\n      "identical": 4219,\n      "score": 4219.0,\n      "evalue": 0.0,\n      "alignment_length": 4219\n    },\n    "query": {\n      "length": 18816,\n      "acc": "pMODKan-HO-pACT1-Z4-",\n      "sequence": "GGAGCAG...",\n      "start": 1,\n      "circular": null,\n      "end": 4219,\n      "name": null\n    },\n    "subject": {\n      "length": 7883,\n      "acc": "pMODKan-HO-pACT1-ZEV4",\n      "sequence": "TCAGT...",\n      "start": 1,\n      "circular": null,\n      "strand": "plus",\n      "end": 4219,\n      "name": null\n    }\n]]\n`````\n',
    'author': 'Justin Vrana',
    'author_email': 'justin.vrana@gmail.com',
    'url': 'https://www.github.com/jvrana/pyblast',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
