# coding: utf-8

"""
/*
 Copyright 2019 IBM Corp.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

"""

import pprint
import re  # noqa: F401

import six
from ibm_security_advisor_findings_api_client.models.api_note_kind import ApiNoteKind  # noqa: F401,E501
from ibm_security_advisor_findings_api_client.models.context import Context  # noqa: F401,E501
from ibm_security_advisor_findings_api_client.models.finding import Finding  # noqa: F401,E501
from ibm_security_advisor_findings_api_client.models.kpi import Kpi  # noqa: F401,E501


class ApiOccurrence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'resource_url': 'str',
        'note_name': 'str',
        'kind': 'ApiNoteKind',
        'remediation': 'str',
        'create_time': 'datetime',
        'update_time': 'datetime',
        'provider_id': 'str',
        'id': 'str',
        'context': 'Context',
        'finding': 'Finding',
        'kpi': 'Kpi'
    }

    attribute_map = {
        'name': 'name',
        'resource_url': 'resource_url',
        'note_name': 'note_name',
        'kind': 'kind',
        'remediation': 'remediation',
        'create_time': 'create_time',
        'update_time': 'update_time',
        'provider_id': 'provider_id',
        'id': 'id',
        'context': 'context',
        'finding': 'finding',
        'kpi': 'kpi'
    }

    def __init__(self, name=None, resource_url=None, note_name=None, kind=None, remediation=None, create_time=None, update_time=None, provider_id=None, id=None, context=None, finding=None, kpi=None):  # noqa: E501
        """ApiOccurrence - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._resource_url = None
        self._note_name = None
        self._kind = None
        self._remediation = None
        self._create_time = None
        self._update_time = None
        self._provider_id = None
        self._id = None
        self._context = None
        self._finding = None
        self._kpi = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if resource_url is not None:
            self.resource_url = resource_url
        self.note_name = note_name
        self.kind = kind
        if remediation is not None:
            self.remediation = remediation
        if create_time is not None:
            self.create_time = create_time
        if update_time is not None:
            self.update_time = update_time
        if provider_id is not None:
            self.provider_id = provider_id
        self.id = id
        if context is not None:
            self.context = context
        if finding is not None:
            self.finding = finding
        if kpi is not None:
            self.kpi = kpi

    @property
    def name(self):
        """Gets the name of this ApiOccurrence.  # noqa: E501

        Output only. The name of the `Occurrence` in the form \"providers/{provider_id}/occurrences/{occuurence_id}\"  # noqa: E501

        :return: The name of this ApiOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiOccurrence.

        Output only. The name of the `Occurrence` in the form \"providers/{provider_id}/occurrences/{occuurence_id}\"  # noqa: E501

        :param name: The name of this ApiOccurrence.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def resource_url(self):
        """Gets the resource_url of this ApiOccurrence.  # noqa: E501

        The unique URL of the resource, image or the container, for which the `Occurrence` applies. For example, https://gcr.io/provider/image@sha256:foo. This field can be used as a filter in list requests.  # noqa: E501

        :return: The resource_url of this ApiOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._resource_url

    @resource_url.setter
    def resource_url(self, resource_url):
        """Sets the resource_url of this ApiOccurrence.

        The unique URL of the resource, image or the container, for which the `Occurrence` applies. For example, https://gcr.io/provider/image@sha256:foo. This field can be used as a filter in list requests.  # noqa: E501

        :param resource_url: The resource_url of this ApiOccurrence.  # noqa: E501
        :type: str
        """

        self._resource_url = resource_url

    @property
    def note_name(self):
        """Gets the note_name of this ApiOccurrence.  # noqa: E501

        An analysis note associated with this image, in the form \"providers/{provider_id}/notes/{note_id}\" This field can be used as a filter in list requests.  # noqa: E501

        :return: The note_name of this ApiOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._note_name

    @note_name.setter
    def note_name(self, note_name):
        """Sets the note_name of this ApiOccurrence.

        An analysis note associated with this image, in the form \"providers/{provider_id}/notes/{note_id}\" This field can be used as a filter in list requests.  # noqa: E501

        :param note_name: The note_name of this ApiOccurrence.  # noqa: E501
        :type: str
        """
        if note_name is None:
            raise ValueError("Invalid value for `note_name`, must not be `None`")  # noqa: E501

        self._note_name = note_name

    @property
    def kind(self):
        """Gets the kind of this ApiOccurrence.  # noqa: E501


        :return: The kind of this ApiOccurrence.  # noqa: E501
        :rtype: ApiNoteKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ApiOccurrence.


        :param kind: The kind of this ApiOccurrence.  # noqa: E501
        :type: ApiNoteKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def remediation(self):
        """Gets the remediation of this ApiOccurrence.  # noqa: E501


        :return: The remediation of this ApiOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._remediation

    @remediation.setter
    def remediation(self, remediation):
        """Sets the remediation of this ApiOccurrence.


        :param remediation: The remediation of this ApiOccurrence.  # noqa: E501
        :type: str
        """

        self._remediation = remediation

    @property
    def create_time(self):
        """Gets the create_time of this ApiOccurrence.  # noqa: E501

        Output only. The time this `Occurrence` was created.  # noqa: E501

        :return: The create_time of this ApiOccurrence.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ApiOccurrence.

        Output only. The time this `Occurrence` was created.  # noqa: E501

        :param create_time: The create_time of this ApiOccurrence.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this ApiOccurrence.  # noqa: E501

        Output only. The time this `Occurrence` was last updated.  # noqa: E501

        :return: The update_time of this ApiOccurrence.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ApiOccurrence.

        Output only. The time this `Occurrence` was last updated.  # noqa: E501

        :param update_time: The update_time of this ApiOccurrence.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    @property
    def provider_id(self):
        """Gets the provider_id of this ApiOccurrence.  # noqa: E501


        :return: The provider_id of this ApiOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this ApiOccurrence.


        :param provider_id: The provider_id of this ApiOccurrence.  # noqa: E501
        :type: str
        """

        self._provider_id = provider_id

    @property
    def id(self):
        """Gets the id of this ApiOccurrence.  # noqa: E501


        :return: The id of this ApiOccurrence.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiOccurrence.


        :param id: The id of this ApiOccurrence.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def context(self):
        """Gets the context of this ApiOccurrence.  # noqa: E501


        :return: The context of this ApiOccurrence.  # noqa: E501
        :rtype: Context
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ApiOccurrence.


        :param context: The context of this ApiOccurrence.  # noqa: E501
        :type: Context
        """

        self._context = context

    @property
    def finding(self):
        """Gets the finding of this ApiOccurrence.  # noqa: E501


        :return: The finding of this ApiOccurrence.  # noqa: E501
        :rtype: Finding
        """
        return self._finding

    @finding.setter
    def finding(self, finding):
        """Sets the finding of this ApiOccurrence.


        :param finding: The finding of this ApiOccurrence.  # noqa: E501
        :type: Finding
        """

        self._finding = finding

    @property
    def kpi(self):
        """Gets the kpi of this ApiOccurrence.  # noqa: E501


        :return: The kpi of this ApiOccurrence.  # noqa: E501
        :rtype: Kpi
        """
        return self._kpi

    @kpi.setter
    def kpi(self, kpi):
        """Sets the kpi of this ApiOccurrence.


        :param kpi: The kpi of this ApiOccurrence.  # noqa: E501
        :type: Kpi
        """

        self._kpi = kpi

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiOccurrence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiOccurrence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
