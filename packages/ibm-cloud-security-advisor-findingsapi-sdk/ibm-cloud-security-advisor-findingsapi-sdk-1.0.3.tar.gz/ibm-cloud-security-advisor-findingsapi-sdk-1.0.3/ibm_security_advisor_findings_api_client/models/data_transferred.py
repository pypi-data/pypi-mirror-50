# coding: utf-8

"""
/*
 Copyright 2019 IBM Corp.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

"""

import pprint
import re  # noqa: F401

import six


class DataTransferred(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_bytes': 'int',
        'server_bytes': 'int',
        'client_packets': 'int',
        'server_packets': 'int'
    }

    attribute_map = {
        'client_bytes': 'client_bytes',
        'server_bytes': 'server_bytes',
        'client_packets': 'client_packets',
        'server_packets': 'server_packets'
    }

    def __init__(self, client_bytes=None, server_bytes=None, client_packets=None, server_packets=None):  # noqa: E501
        """DataTransferred - a model defined in Swagger"""  # noqa: E501
        self._client_bytes = None
        self._server_bytes = None
        self._client_packets = None
        self._server_packets = None
        self.discriminator = None
        if client_bytes is not None:
            self.client_bytes = client_bytes
        if server_bytes is not None:
            self.server_bytes = server_bytes
        if client_packets is not None:
            self.client_packets = client_packets
        if server_packets is not None:
            self.server_packets = server_packets

    @property
    def client_bytes(self):
        """Gets the client_bytes of this DataTransferred.  # noqa: E501

        The number of client bytes transferred  # noqa: E501

        :return: The client_bytes of this DataTransferred.  # noqa: E501
        :rtype: int
        """
        return self._client_bytes

    @client_bytes.setter
    def client_bytes(self, client_bytes):
        """Sets the client_bytes of this DataTransferred.

        The number of client bytes transferred  # noqa: E501

        :param client_bytes: The client_bytes of this DataTransferred.  # noqa: E501
        :type: int
        """

        self._client_bytes = client_bytes

    @property
    def server_bytes(self):
        """Gets the server_bytes of this DataTransferred.  # noqa: E501

        The number of server bytes transferred  # noqa: E501

        :return: The server_bytes of this DataTransferred.  # noqa: E501
        :rtype: int
        """
        return self._server_bytes

    @server_bytes.setter
    def server_bytes(self, server_bytes):
        """Sets the server_bytes of this DataTransferred.

        The number of server bytes transferred  # noqa: E501

        :param server_bytes: The server_bytes of this DataTransferred.  # noqa: E501
        :type: int
        """

        self._server_bytes = server_bytes

    @property
    def client_packets(self):
        """Gets the client_packets of this DataTransferred.  # noqa: E501

        The number of client packets transferred  # noqa: E501

        :return: The client_packets of this DataTransferred.  # noqa: E501
        :rtype: int
        """
        return self._client_packets

    @client_packets.setter
    def client_packets(self, client_packets):
        """Sets the client_packets of this DataTransferred.

        The number of client packets transferred  # noqa: E501

        :param client_packets: The client_packets of this DataTransferred.  # noqa: E501
        :type: int
        """

        self._client_packets = client_packets

    @property
    def server_packets(self):
        """Gets the server_packets of this DataTransferred.  # noqa: E501

        The number of server packets transferred  # noqa: E501

        :return: The server_packets of this DataTransferred.  # noqa: E501
        :rtype: int
        """
        return self._server_packets

    @server_packets.setter
    def server_packets(self, server_packets):
        """Sets the server_packets of this DataTransferred.

        The number of server packets transferred  # noqa: E501

        :param server_packets: The server_packets of this DataTransferred.  # noqa: E501
        :type: int
        """

        self._server_packets = server_packets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataTransferred, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataTransferred):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
