# coding: utf-8

"""
/*
 Copyright 2019 IBM Corp.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

"""

import pprint
import re  # noqa: F401

import six
from ibm_security_advisor_findings_api_client.models.api_note_kind import ApiNoteKind  # noqa: F401,E501
from ibm_security_advisor_findings_api_client.models.api_note_related_url import ApiNoteRelatedUrl  # noqa: F401,E501
from ibm_security_advisor_findings_api_client.models.card import Card  # noqa: F401,E501
from ibm_security_advisor_findings_api_client.models.finding_type import FindingType  # noqa: F401,E501
from ibm_security_advisor_findings_api_client.models.kpi_type import KpiType  # noqa: F401,E501
from ibm_security_advisor_findings_api_client.models.reporter import Reporter  # noqa: F401,E501
from ibm_security_advisor_findings_api_client.models.section import Section  # noqa: F401,E501


class ApiNote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'short_description': 'str',
        'long_description': 'str',
        'kind': 'ApiNoteKind',
        'related_url': 'list[ApiNoteRelatedUrl]',
        'expiration_time': 'datetime',
        'create_time': 'datetime',
        'update_time': 'datetime',
        'provider_id': 'str',
        'id': 'str',
        'shared': 'bool',
        'reported_by': 'Reporter',
        'finding': 'FindingType',
        'kpi': 'KpiType',
        'card': 'Card',
        'section': 'Section'
    }

    attribute_map = {
        'name': 'name',
        'short_description': 'short_description',
        'long_description': 'long_description',
        'kind': 'kind',
        'related_url': 'related_url',
        'expiration_time': 'expiration_time',
        'create_time': 'create_time',
        'update_time': 'update_time',
        'provider_id': 'provider_id',
        'id': 'id',
        'shared': 'shared',
        'reported_by': 'reported_by',
        'finding': 'finding',
        'kpi': 'kpi',
        'card': 'card',
        'section': 'section'
    }

    def __init__(self, name=None, short_description=None, long_description=None, kind=None, related_url=None, expiration_time=None, create_time=None, update_time=None, provider_id=None, id=None, shared=True, reported_by=None, finding=None, kpi=None, card=None, section=None):  # noqa: E501
        """ApiNote - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._short_description = None
        self._long_description = None
        self._kind = None
        self._related_url = None
        self._expiration_time = None
        self._create_time = None
        self._update_time = None
        self._provider_id = None
        self._id = None
        self._shared = None
        self._reported_by = None
        self._finding = None
        self._kpi = None
        self._card = None
        self._section = None
        self.discriminator = None
        if name is not None:
            self.name = name
        self.short_description = short_description
        self.long_description = long_description
        self.kind = kind
        if related_url is not None:
            self.related_url = related_url
        if expiration_time is not None:
            self.expiration_time = expiration_time
        if create_time is not None:
            self.create_time = create_time
        if update_time is not None:
            self.update_time = update_time
        if provider_id is not None:
            self.provider_id = provider_id
        self.id = id
        if shared is not None:
            self.shared = shared
        self.reported_by = reported_by
        if finding is not None:
            self.finding = finding
        if kpi is not None:
            self.kpi = kpi
        if card is not None:
            self.card = card
        if section is not None:
            self.section = section

    @property
    def name(self):
        """Gets the name of this ApiNote.  # noqa: E501


        :return: The name of this ApiNote.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiNote.


        :param name: The name of this ApiNote.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def short_description(self):
        """Gets the short_description of this ApiNote.  # noqa: E501

        A one sentence description of this `Note`.  # noqa: E501

        :return: The short_description of this ApiNote.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this ApiNote.

        A one sentence description of this `Note`.  # noqa: E501

        :param short_description: The short_description of this ApiNote.  # noqa: E501
        :type: str
        """
        if short_description is None:
            raise ValueError("Invalid value for `short_description`, must not be `None`")  # noqa: E501

        self._short_description = short_description

    @property
    def long_description(self):
        """Gets the long_description of this ApiNote.  # noqa: E501

        A detailed description of this `Note`.  # noqa: E501

        :return: The long_description of this ApiNote.  # noqa: E501
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this ApiNote.

        A detailed description of this `Note`.  # noqa: E501

        :param long_description: The long_description of this ApiNote.  # noqa: E501
        :type: str
        """
        if long_description is None:
            raise ValueError("Invalid value for `long_description`, must not be `None`")  # noqa: E501

        self._long_description = long_description

    @property
    def kind(self):
        """Gets the kind of this ApiNote.  # noqa: E501


        :return: The kind of this ApiNote.  # noqa: E501
        :rtype: ApiNoteKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ApiNote.


        :param kind: The kind of this ApiNote.  # noqa: E501
        :type: ApiNoteKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def related_url(self):
        """Gets the related_url of this ApiNote.  # noqa: E501


        :return: The related_url of this ApiNote.  # noqa: E501
        :rtype: list[ApiNoteRelatedUrl]
        """
        return self._related_url

    @related_url.setter
    def related_url(self, related_url):
        """Sets the related_url of this ApiNote.


        :param related_url: The related_url of this ApiNote.  # noqa: E501
        :type: list[ApiNoteRelatedUrl]
        """

        self._related_url = related_url

    @property
    def expiration_time(self):
        """Gets the expiration_time of this ApiNote.  # noqa: E501

        Time of expiration for this note, null if note does not expire.  # noqa: E501

        :return: The expiration_time of this ApiNote.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this ApiNote.

        Time of expiration for this note, null if note does not expire.  # noqa: E501

        :param expiration_time: The expiration_time of this ApiNote.  # noqa: E501
        :type: datetime
        """

        self._expiration_time = expiration_time

    @property
    def create_time(self):
        """Gets the create_time of this ApiNote.  # noqa: E501

        Output only. The time this note was created. This field can be used as a filter in list requests.  # noqa: E501

        :return: The create_time of this ApiNote.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ApiNote.

        Output only. The time this note was created. This field can be used as a filter in list requests.  # noqa: E501

        :param create_time: The create_time of this ApiNote.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this ApiNote.  # noqa: E501

        Output only. The time this note was last updated. This field can be used as a filter in list requests.  # noqa: E501

        :return: The update_time of this ApiNote.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ApiNote.

        Output only. The time this note was last updated. This field can be used as a filter in list requests.  # noqa: E501

        :param update_time: The update_time of this ApiNote.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    @property
    def provider_id(self):
        """Gets the provider_id of this ApiNote.  # noqa: E501


        :return: The provider_id of this ApiNote.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this ApiNote.


        :param provider_id: The provider_id of this ApiNote.  # noqa: E501
        :type: str
        """

        self._provider_id = provider_id

    @property
    def id(self):
        """Gets the id of this ApiNote.  # noqa: E501


        :return: The id of this ApiNote.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiNote.


        :param id: The id of this ApiNote.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def shared(self):
        """Gets the shared of this ApiNote.  # noqa: E501

        True if this `Note` can be shared by multiple accounts.  # noqa: E501

        :return: The shared of this ApiNote.  # noqa: E501
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this ApiNote.

        True if this `Note` can be shared by multiple accounts.  # noqa: E501

        :param shared: The shared of this ApiNote.  # noqa: E501
        :type: bool
        """

        self._shared = shared

    @property
    def reported_by(self):
        """Gets the reported_by of this ApiNote.  # noqa: E501


        :return: The reported_by of this ApiNote.  # noqa: E501
        :rtype: Reporter
        """
        return self._reported_by

    @reported_by.setter
    def reported_by(self, reported_by):
        """Sets the reported_by of this ApiNote.


        :param reported_by: The reported_by of this ApiNote.  # noqa: E501
        :type: Reporter
        """
        if reported_by is None:
            raise ValueError("Invalid value for `reported_by`, must not be `None`")  # noqa: E501

        self._reported_by = reported_by

    @property
    def finding(self):
        """Gets the finding of this ApiNote.  # noqa: E501


        :return: The finding of this ApiNote.  # noqa: E501
        :rtype: FindingType
        """
        return self._finding

    @finding.setter
    def finding(self, finding):
        """Sets the finding of this ApiNote.


        :param finding: The finding of this ApiNote.  # noqa: E501
        :type: FindingType
        """

        self._finding = finding

    @property
    def kpi(self):
        """Gets the kpi of this ApiNote.  # noqa: E501


        :return: The kpi of this ApiNote.  # noqa: E501
        :rtype: KpiType
        """
        return self._kpi

    @kpi.setter
    def kpi(self, kpi):
        """Sets the kpi of this ApiNote.


        :param kpi: The kpi of this ApiNote.  # noqa: E501
        :type: KpiType
        """

        self._kpi = kpi

    @property
    def card(self):
        """Gets the card of this ApiNote.  # noqa: E501


        :return: The card of this ApiNote.  # noqa: E501
        :rtype: Card
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this ApiNote.


        :param card: The card of this ApiNote.  # noqa: E501
        :type: Card
        """

        self._card = card

    @property
    def section(self):
        """Gets the section of this ApiNote.  # noqa: E501


        :return: The section of this ApiNote.  # noqa: E501
        :rtype: Section
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this ApiNote.


        :param section: The section of this ApiNote.  # noqa: E501
        :type: Section
        """

        self._section = section

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiNote, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiNote):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
