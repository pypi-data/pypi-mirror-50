# coding: utf-8

"""
/*
 Copyright 2019 IBM Corp.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

"""

import pprint
import re  # noqa: F401

import six
from ibm_security_advisor_findings_api_client.models.certainty import Certainty  # noqa: F401,E501
from ibm_security_advisor_findings_api_client.models.data_transferred import DataTransferred  # noqa: F401,E501
from ibm_security_advisor_findings_api_client.models.network_connection import NetworkConnection  # noqa: F401,E501
from ibm_security_advisor_findings_api_client.models.remediation_step import RemediationStep  # noqa: F401,E501
from ibm_security_advisor_findings_api_client.models.severity import Severity  # noqa: F401,E501


class Finding(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'severity': 'Severity',
        'certainty': 'Certainty',
        'next_steps': 'list[RemediationStep]',
        'network_connection': 'NetworkConnection',
        'data_transferred': 'DataTransferred'
    }

    attribute_map = {
        'severity': 'severity',
        'certainty': 'certainty',
        'next_steps': 'next_steps',
        'network_connection': 'network_connection',
        'data_transferred': 'data_transferred'
    }

    def __init__(self, severity=None, certainty=None, next_steps=None, network_connection=None, data_transferred=None):  # noqa: E501
        """Finding - a model defined in Swagger"""  # noqa: E501
        self._severity = None
        self._certainty = None
        self._next_steps = None
        self._network_connection = None
        self._data_transferred = None
        self.discriminator = None
        if severity is not None:
            self.severity = severity
        if certainty is not None:
            self.certainty = certainty
        if next_steps is not None:
            self.next_steps = next_steps
        if network_connection is not None:
            self.network_connection = network_connection
        if data_transferred is not None:
            self.data_transferred = data_transferred

    @property
    def severity(self):
        """Gets the severity of this Finding.  # noqa: E501


        :return: The severity of this Finding.  # noqa: E501
        :rtype: Severity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Finding.


        :param severity: The severity of this Finding.  # noqa: E501
        :type: Severity
        """

        self._severity = severity

    @property
    def certainty(self):
        """Gets the certainty of this Finding.  # noqa: E501


        :return: The certainty of this Finding.  # noqa: E501
        :rtype: Certainty
        """
        return self._certainty

    @certainty.setter
    def certainty(self, certainty):
        """Sets the certainty of this Finding.


        :param certainty: The certainty of this Finding.  # noqa: E501
        :type: Certainty
        """

        self._certainty = certainty

    @property
    def next_steps(self):
        """Gets the next_steps of this Finding.  # noqa: E501

        Remediation steps for the issues reported in this finding. They override the note's next steps.  # noqa: E501

        :return: The next_steps of this Finding.  # noqa: E501
        :rtype: list[RemediationStep]
        """
        return self._next_steps

    @next_steps.setter
    def next_steps(self, next_steps):
        """Sets the next_steps of this Finding.

        Remediation steps for the issues reported in this finding. They override the note's next steps.  # noqa: E501

        :param next_steps: The next_steps of this Finding.  # noqa: E501
        :type: list[RemediationStep]
        """

        self._next_steps = next_steps

    @property
    def network_connection(self):
        """Gets the network_connection of this Finding.  # noqa: E501


        :return: The network_connection of this Finding.  # noqa: E501
        :rtype: NetworkConnection
        """
        return self._network_connection

    @network_connection.setter
    def network_connection(self, network_connection):
        """Sets the network_connection of this Finding.


        :param network_connection: The network_connection of this Finding.  # noqa: E501
        :type: NetworkConnection
        """

        self._network_connection = network_connection

    @property
    def data_transferred(self):
        """Gets the data_transferred of this Finding.  # noqa: E501


        :return: The data_transferred of this Finding.  # noqa: E501
        :rtype: DataTransferred
        """
        return self._data_transferred

    @data_transferred.setter
    def data_transferred(self, data_transferred):
        """Sets the data_transferred of this Finding.


        :param data_transferred: The data_transferred of this Finding.  # noqa: E501
        :type: DataTransferred
        """

        self._data_transferred = data_transferred

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Finding, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Finding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
