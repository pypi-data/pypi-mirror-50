# coding: utf-8

"""
/*
 Copyright 2019 IBM Corp.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

"""

import pprint
import re  # noqa: F401

import six
from ibm_security_advisor_findings_api_client.models.card_element import CardElement  # noqa: F401,E501
from ibm_security_advisor_findings_api_client.models.value_type import ValueType  # noqa: F401,E501


class TimeSeriesCardElement(CardElement):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'str',
        'default_interval': 'str',
        'value_types': 'list[ValueType]'
    }
    if hasattr(CardElement, "swagger_types"):
        swagger_types.update(CardElement.swagger_types)

    attribute_map = {
        'text': 'text',
        'default_interval': 'default_interval',
        'value_types': 'value_types'
    }
    if hasattr(CardElement, "attribute_map"):
        attribute_map.update(CardElement.attribute_map)

    def __init__(self, text=None, default_interval='d', value_types=None, *args, **kwargs):  # noqa: E501
        """TimeSeriesCardElement - a model defined in Swagger"""  # noqa: E501
        self._text = None
        self._default_interval = None
        self._value_types = None
        self.discriminator = None
        self.text = text
        if default_interval is not None:
            self.default_interval = default_interval
        self.value_types = value_types
        CardElement.__init__(self, *args, **kwargs)

    @property
    def text(self):
        """Gets the text of this TimeSeriesCardElement.  # noqa: E501

        The text of this card element  # noqa: E501

        :return: The text of this TimeSeriesCardElement.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this TimeSeriesCardElement.

        The text of this card element  # noqa: E501

        :param text: The text of this TimeSeriesCardElement.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def default_interval(self):
        """Gets the default_interval of this TimeSeriesCardElement.  # noqa: E501

        The default interval of the time series  # noqa: E501

        :return: The default_interval of this TimeSeriesCardElement.  # noqa: E501
        :rtype: str
        """
        return self._default_interval

    @default_interval.setter
    def default_interval(self, default_interval):
        """Sets the default_interval of this TimeSeriesCardElement.

        The default interval of the time series  # noqa: E501

        :param default_interval: The default_interval of this TimeSeriesCardElement.  # noqa: E501
        :type: str
        """

        self._default_interval = default_interval

    @property
    def value_types(self):
        """Gets the value_types of this TimeSeriesCardElement.  # noqa: E501

        the value types associated to this card element  # noqa: E501

        :return: The value_types of this TimeSeriesCardElement.  # noqa: E501
        :rtype: list[ValueType]
        """
        return self._value_types

    @value_types.setter
    def value_types(self, value_types):
        """Sets the value_types of this TimeSeriesCardElement.

        the value types associated to this card element  # noqa: E501

        :param value_types: The value_types of this TimeSeriesCardElement.  # noqa: E501
        :type: list[ValueType]
        """
        if value_types is None:
            raise ValueError("Invalid value for `value_types`, must not be `None`")  # noqa: E501

        self._value_types = value_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeSeriesCardElement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeSeriesCardElement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
