# coding: utf-8

"""
/*
 Copyright 2019 IBM Corp.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

"""

import pprint
import re  # noqa: F401

import six


class CardElement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kind': 'str',
        'default_time_range': 'str'
    }

    attribute_map = {
        'kind': 'kind',
        'default_time_range': 'default_time_range'
    }

    discriminator_value_class_map = {

          'TimeSeriesCardElement': 'TimeSeriesCardElement',
'BreakdownCardElement': 'BreakdownCardElement',
'NumericCardElement': 'NumericCardElement'    }

    def __init__(self, kind=None, default_time_range='4d'):  # noqa: E501
        """CardElement - a model defined in Swagger"""  # noqa: E501
        self._kind = None
        self._default_time_range = None
        self.discriminator = 'kind'
        self.kind = kind
        if default_time_range is not None:
            self.default_time_range = default_time_range

    @property
    def kind(self):
        """Gets the kind of this CardElement.  # noqa: E501

        Kind of element - NUMERIC&#58; Single numeric value - BREAKDOWN&#58; Breakdown of numeric values - TIME_SERIES&#58; Time-series of numeric values  # noqa: E501

        :return: The kind of this CardElement.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this CardElement.

        Kind of element - NUMERIC&#58; Single numeric value - BREAKDOWN&#58; Breakdown of numeric values - TIME_SERIES&#58; Time-series of numeric values  # noqa: E501

        :param kind: The kind of this CardElement.  # noqa: E501
        :type: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501
        allowed_values = ["NUMERIC", "BREAKDOWN", "TIME_SERIES"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def default_time_range(self):
        """Gets the default_time_range of this CardElement.  # noqa: E501

        The default time range of this card element  # noqa: E501

        :return: The default_time_range of this CardElement.  # noqa: E501
        :rtype: str
        """
        return self._default_time_range

    @default_time_range.setter
    def default_time_range(self, default_time_range):
        """Sets the default_time_range of this CardElement.

        The default time range of this card element  # noqa: E501

        :param default_time_range: The default_time_range of this CardElement.  # noqa: E501
        :type: str
        """
        allowed_values = ["1d", "2d", "3d", "4d"]  # noqa: E501
        if default_time_range not in allowed_values:
            raise ValueError(
                "Invalid value for `default_time_range` ({0}), must be one of {1}"  # noqa: E501
                .format(default_time_range, allowed_values)
            )

        self._default_time_range = default_time_range

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CardElement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CardElement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
