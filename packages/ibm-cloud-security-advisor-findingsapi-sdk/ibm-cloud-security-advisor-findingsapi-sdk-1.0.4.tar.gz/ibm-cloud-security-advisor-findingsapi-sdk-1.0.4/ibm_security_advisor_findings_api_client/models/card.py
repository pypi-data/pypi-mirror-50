# coding: utf-8

"""
/*
 Copyright 2019 IBM Corp.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

"""

import pprint
import re  # noqa: F401

import six
from ibm_security_advisor_findings_api_client.models.card_element import CardElement  # noqa: F401,E501


class Card(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'section': 'str',
        'title': 'str',
        'subtitle': 'str',
        'order': 'int',
        'finding_note_names': 'list[str]',
        'requires_configuration': 'bool',
        'badge_text': 'str',
        'badge_image': 'str',
        'elements': 'list[CardElement]'
    }

    attribute_map = {
        'section': 'section',
        'title': 'title',
        'subtitle': 'subtitle',
        'order': 'order',
        'finding_note_names': 'finding_note_names',
        'requires_configuration': 'requires_configuration',
        'badge_text': 'badge_text',
        'badge_image': 'badge_image',
        'elements': 'elements'
    }

    def __init__(self, section=None, title=None, subtitle=None, order=None, finding_note_names=None, requires_configuration=False, badge_text=None, badge_image=None, elements=None):  # noqa: E501
        """Card - a model defined in Swagger"""  # noqa: E501
        self._section = None
        self._title = None
        self._subtitle = None
        self._order = None
        self._finding_note_names = None
        self._requires_configuration = None
        self._badge_text = None
        self._badge_image = None
        self._elements = None
        self.discriminator = None
        self.section = section
        self.title = title
        self.subtitle = subtitle
        if order is not None:
            self.order = order
        self.finding_note_names = finding_note_names
        if requires_configuration is not None:
            self.requires_configuration = requires_configuration
        if badge_text is not None:
            self.badge_text = badge_text
        if badge_image is not None:
            self.badge_image = badge_image
        self.elements = elements

    @property
    def section(self):
        """Gets the section of this Card.  # noqa: E501

        The section this card belongs to  # noqa: E501

        :return: The section of this Card.  # noqa: E501
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this Card.

        The section this card belongs to  # noqa: E501

        :param section: The section of this Card.  # noqa: E501
        :type: str
        """
        if section is None:
            raise ValueError("Invalid value for `section`, must not be `None`")  # noqa: E501

        self._section = section

    @property
    def title(self):
        """Gets the title of this Card.  # noqa: E501

        The title of this card  # noqa: E501

        :return: The title of this Card.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Card.

        The title of this card  # noqa: E501

        :param title: The title of this Card.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def subtitle(self):
        """Gets the subtitle of this Card.  # noqa: E501

        The subtitle of this card  # noqa: E501

        :return: The subtitle of this Card.  # noqa: E501
        :rtype: str
        """
        return self._subtitle

    @subtitle.setter
    def subtitle(self, subtitle):
        """Sets the subtitle of this Card.

        The subtitle of this card  # noqa: E501

        :param subtitle: The subtitle of this Card.  # noqa: E501
        :type: str
        """
        if subtitle is None:
            raise ValueError("Invalid value for `subtitle`, must not be `None`")  # noqa: E501

        self._subtitle = subtitle

    @property
    def order(self):
        """Gets the order of this Card.  # noqa: E501

        The order of the card in which it will appear on SA dashboard in the mentioned section  # noqa: E501

        :return: The order of this Card.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Card.

        The order of the card in which it will appear on SA dashboard in the mentioned section  # noqa: E501

        :param order: The order of this Card.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def finding_note_names(self):
        """Gets the finding_note_names of this Card.  # noqa: E501

        The finding note names associated to this card  # noqa: E501

        :return: The finding_note_names of this Card.  # noqa: E501
        :rtype: list[str]
        """
        return self._finding_note_names

    @finding_note_names.setter
    def finding_note_names(self, finding_note_names):
        """Sets the finding_note_names of this Card.

        The finding note names associated to this card  # noqa: E501

        :param finding_note_names: The finding_note_names of this Card.  # noqa: E501
        :type: list[str]
        """
        if finding_note_names is None:
            raise ValueError("Invalid value for `finding_note_names`, must not be `None`")  # noqa: E501

        self._finding_note_names = finding_note_names

    @property
    def requires_configuration(self):
        """Gets the requires_configuration of this Card.  # noqa: E501


        :return: The requires_configuration of this Card.  # noqa: E501
        :rtype: bool
        """
        return self._requires_configuration

    @requires_configuration.setter
    def requires_configuration(self, requires_configuration):
        """Sets the requires_configuration of this Card.


        :param requires_configuration: The requires_configuration of this Card.  # noqa: E501
        :type: bool
        """

        self._requires_configuration = requires_configuration

    @property
    def badge_text(self):
        """Gets the badge_text of this Card.  # noqa: E501

        The text associated to the card's badge  # noqa: E501

        :return: The badge_text of this Card.  # noqa: E501
        :rtype: str
        """
        return self._badge_text

    @badge_text.setter
    def badge_text(self, badge_text):
        """Sets the badge_text of this Card.

        The text associated to the card's badge  # noqa: E501

        :param badge_text: The badge_text of this Card.  # noqa: E501
        :type: str
        """

        self._badge_text = badge_text

    @property
    def badge_image(self):
        """Gets the badge_image of this Card.  # noqa: E501

        The base64 content of the image associated to the card's badge  # noqa: E501

        :return: The badge_image of this Card.  # noqa: E501
        :rtype: str
        """
        return self._badge_image

    @badge_image.setter
    def badge_image(self, badge_image):
        """Sets the badge_image of this Card.

        The base64 content of the image associated to the card's badge  # noqa: E501

        :param badge_image: The badge_image of this Card.  # noqa: E501
        :type: str
        """

        self._badge_image = badge_image

    @property
    def elements(self):
        """Gets the elements of this Card.  # noqa: E501

        The elements of this card  # noqa: E501

        :return: The elements of this Card.  # noqa: E501
        :rtype: list[CardElement]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this Card.

        The elements of this card  # noqa: E501

        :param elements: The elements of this Card.  # noqa: E501
        :type: list[CardElement]
        """
        if elements is None:
            raise ValueError("Invalid value for `elements`, must not be `None`")  # noqa: E501

        self._elements = elements

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Card, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Card):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
