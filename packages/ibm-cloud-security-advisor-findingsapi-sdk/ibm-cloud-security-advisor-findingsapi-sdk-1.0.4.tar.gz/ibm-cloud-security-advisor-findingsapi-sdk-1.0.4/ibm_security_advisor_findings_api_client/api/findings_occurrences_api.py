# coding: utf-8

"""
/*
 Copyright 2019 IBM Corp.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ibm_security_advisor_findings_api_client.api_client import ApiClient


class FindingsOccurrencesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_occurrence(self, body, authorization, account_id, provider_id, **kwargs):  # noqa: E501
        """Creates a new `Occurrence`. Use this method to create `Occurrences` for a resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_occurrence(body, authorization, account_id, provider_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiOccurrence body: Body for Occurence creation (required)
        :param str authorization: The Identity & Access Management (IAM) Bearer token. (required)
        :param str account_id: Account ID (required)
        :param str provider_id: Part of `parent`. This contains the provider_id for example: providers/{provider_id} (required)
        :param bool replace_if_exists: It allows replacing an existing occurrence when set to true.
        :return: ApiOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_occurrence_with_http_info(body, authorization, account_id, provider_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_occurrence_with_http_info(body, authorization, account_id, provider_id, **kwargs)  # noqa: E501
            return data

    def create_occurrence_with_http_info(self, body, authorization, account_id, provider_id, **kwargs):  # noqa: E501
        """Creates a new `Occurrence`. Use this method to create `Occurrences` for a resource.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_occurrence_with_http_info(body, authorization, account_id, provider_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiOccurrence body: Body for Occurence creation (required)
        :param str authorization: The Identity & Access Management (IAM) Bearer token. (required)
        :param str account_id: Account ID (required)
        :param str provider_id: Part of `parent`. This contains the provider_id for example: providers/{provider_id} (required)
        :param bool replace_if_exists: It allows replacing an existing occurrence when set to true.
        :return: ApiOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'account_id', 'provider_id', 'replace_if_exists']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_occurrence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_occurrence`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_occurrence`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `create_occurrence`")  # noqa: E501
        # verify the required parameter 'provider_id' is set
        if ('provider_id' not in params or
                params['provider_id'] is None):
            raise ValueError("Missing the required parameter `provider_id` when calling `create_occurrence`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'provider_id' in params:
            path_params['provider_id'] = params['provider_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'replace_if_exists' in params:
            header_params['Replace-If-Exists'] = params['replace_if_exists']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['UserMin']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{account_id}/providers/{provider_id}/occurrences', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiOccurrence',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_occurrence(self, account_id, authorization, provider_id, occurrence_id, **kwargs):  # noqa: E501
        """Deletes the given `Occurrence` from the system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_occurrence(account_id, authorization, provider_id, occurrence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Account ID (required)
        :param str authorization: The Identity & Access Management (IAM) Bearer token. (required)
        :param str provider_id: First part of occurrence `name`: providers/{provider_id}/notes/{occurrence_id} (required)
        :param str occurrence_id: Second part of occurrence `name`: providers/{provider_id}/notes/{occurrence_id} (required)
        :return: ApiEmpty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_occurrence_with_http_info(account_id, authorization, provider_id, occurrence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_occurrence_with_http_info(account_id, authorization, provider_id, occurrence_id, **kwargs)  # noqa: E501
            return data

    def delete_occurrence_with_http_info(self, account_id, authorization, provider_id, occurrence_id, **kwargs):  # noqa: E501
        """Deletes the given `Occurrence` from the system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_occurrence_with_http_info(account_id, authorization, provider_id, occurrence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Account ID (required)
        :param str authorization: The Identity & Access Management (IAM) Bearer token. (required)
        :param str provider_id: First part of occurrence `name`: providers/{provider_id}/notes/{occurrence_id} (required)
        :param str occurrence_id: Second part of occurrence `name`: providers/{provider_id}/notes/{occurrence_id} (required)
        :return: ApiEmpty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'authorization', 'provider_id', 'occurrence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_occurrence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `delete_occurrence`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `delete_occurrence`")  # noqa: E501
        # verify the required parameter 'provider_id' is set
        if ('provider_id' not in params or
                params['provider_id'] is None):
            raise ValueError("Missing the required parameter `provider_id` when calling `delete_occurrence`")  # noqa: E501
        # verify the required parameter 'occurrence_id' is set
        if ('occurrence_id' not in params or
                params['occurrence_id'] is None):
            raise ValueError("Missing the required parameter `occurrence_id` when calling `delete_occurrence`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'provider_id' in params:
            path_params['provider_id'] = params['provider_id']  # noqa: E501
        if 'occurrence_id' in params:
            path_params['occurrence_id'] = params['occurrence_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['UserMin']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{account_id}/providers/{provider_id}/occurrences/{occurrence_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiEmpty',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_occurrence(self, account_id, authorization, provider_id, occurrence_id, **kwargs):  # noqa: E501
        """Returns the requested `Occurrence`.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_occurrence(account_id, authorization, provider_id, occurrence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Account ID (required)
        :param str authorization: The Identity & Access Management (IAM) Bearer token. (required)
        :param str provider_id: First part of occurrence `name`: providers/{provider_id}/occurrences/{occurrence_id} (required)
        :param str occurrence_id: Second part of occurrence `name`: providers/{provider_id}/occurrences/{occurrence_id} (required)
        :return: ApiListOccurrencesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_occurrence_with_http_info(account_id, authorization, provider_id, occurrence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_occurrence_with_http_info(account_id, authorization, provider_id, occurrence_id, **kwargs)  # noqa: E501
            return data

    def get_occurrence_with_http_info(self, account_id, authorization, provider_id, occurrence_id, **kwargs):  # noqa: E501
        """Returns the requested `Occurrence`.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_occurrence_with_http_info(account_id, authorization, provider_id, occurrence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Account ID (required)
        :param str authorization: The Identity & Access Management (IAM) Bearer token. (required)
        :param str provider_id: First part of occurrence `name`: providers/{provider_id}/occurrences/{occurrence_id} (required)
        :param str occurrence_id: Second part of occurrence `name`: providers/{provider_id}/occurrences/{occurrence_id} (required)
        :return: ApiListOccurrencesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'authorization', 'provider_id', 'occurrence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_occurrence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `get_occurrence`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_occurrence`")  # noqa: E501
        # verify the required parameter 'provider_id' is set
        if ('provider_id' not in params or
                params['provider_id'] is None):
            raise ValueError("Missing the required parameter `provider_id` when calling `get_occurrence`")  # noqa: E501
        # verify the required parameter 'occurrence_id' is set
        if ('occurrence_id' not in params or
                params['occurrence_id'] is None):
            raise ValueError("Missing the required parameter `occurrence_id` when calling `get_occurrence`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'provider_id' in params:
            path_params['provider_id'] = params['provider_id']  # noqa: E501
        if 'occurrence_id' in params:
            path_params['occurrence_id'] = params['occurrence_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['UserMin']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{account_id}/providers/{provider_id}/occurrences/{occurrence_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiListOccurrencesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_note_occurrences(self, account_id, authorization, provider_id, note_id, **kwargs):  # noqa: E501
        """Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences referencing your `Note` across all your customer providers.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_note_occurrences(account_id, authorization, provider_id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Account ID (required)
        :param str authorization: The Identity & Access Management (IAM) Bearer token. (required)
        :param str provider_id: First part of note `name`: providers/{provider_id}/notes/{note_id} (required)
        :param str note_id: Second part of note `name`: providers/{provider_id}/notes/{note_id} (required)
        :param int page_size: Number of notes to return in the list.
        :param str page_token: Token to provide to skip to a particular spot in the list.
        :return: ApiListNoteOccurrencesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_note_occurrences_with_http_info(account_id, authorization, provider_id, note_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_note_occurrences_with_http_info(account_id, authorization, provider_id, note_id, **kwargs)  # noqa: E501
            return data

    def list_note_occurrences_with_http_info(self, account_id, authorization, provider_id, note_id, **kwargs):  # noqa: E501
        """Lists `Occurrences` referencing the specified `Note`. Use this method to get all occurrences referencing your `Note` across all your customer providers.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_note_occurrences_with_http_info(account_id, authorization, provider_id, note_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Account ID (required)
        :param str authorization: The Identity & Access Management (IAM) Bearer token. (required)
        :param str provider_id: First part of note `name`: providers/{provider_id}/notes/{note_id} (required)
        :param str note_id: Second part of note `name`: providers/{provider_id}/notes/{note_id} (required)
        :param int page_size: Number of notes to return in the list.
        :param str page_token: Token to provide to skip to a particular spot in the list.
        :return: ApiListNoteOccurrencesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'authorization', 'provider_id', 'note_id', 'page_size', 'page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_note_occurrences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `list_note_occurrences`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_note_occurrences`")  # noqa: E501
        # verify the required parameter 'provider_id' is set
        if ('provider_id' not in params or
                params['provider_id'] is None):
            raise ValueError("Missing the required parameter `provider_id` when calling `list_note_occurrences`")  # noqa: E501
        # verify the required parameter 'note_id' is set
        if ('note_id' not in params or
                params['note_id'] is None):
            raise ValueError("Missing the required parameter `note_id` when calling `list_note_occurrences`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'provider_id' in params:
            path_params['provider_id'] = params['provider_id']  # noqa: E501
        if 'note_id' in params:
            path_params['note_id'] = params['note_id']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['UserMin']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{account_id}/providers/{provider_id}/notes/{note_id}/occurrences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiListNoteOccurrencesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_occurrences(self, account_id, authorization, provider_id, **kwargs):  # noqa: E501
        """Lists active `Occurrences` for a given provider matching the filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_occurrences(account_id, authorization, provider_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Account ID (required)
        :param str authorization: The Identity & Access Management (IAM) Bearer token. (required)
        :param str provider_id: Part of `parent`. This contains the provider_id for example: providers/{provider_id} (required)
        :param int page_size: Number of occurrences to return in the list.
        :param str page_token: Token to provide to skip to a particular spot in the list.
        :return: ApiListOccurrencesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_occurrences_with_http_info(account_id, authorization, provider_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_occurrences_with_http_info(account_id, authorization, provider_id, **kwargs)  # noqa: E501
            return data

    def list_occurrences_with_http_info(self, account_id, authorization, provider_id, **kwargs):  # noqa: E501
        """Lists active `Occurrences` for a given provider matching the filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_occurrences_with_http_info(account_id, authorization, provider_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: Account ID (required)
        :param str authorization: The Identity & Access Management (IAM) Bearer token. (required)
        :param str provider_id: Part of `parent`. This contains the provider_id for example: providers/{provider_id} (required)
        :param int page_size: Number of occurrences to return in the list.
        :param str page_token: Token to provide to skip to a particular spot in the list.
        :return: ApiListOccurrencesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'authorization', 'provider_id', 'page_size', 'page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_occurrences" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `list_occurrences`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `list_occurrences`")  # noqa: E501
        # verify the required parameter 'provider_id' is set
        if ('provider_id' not in params or
                params['provider_id'] is None):
            raise ValueError("Missing the required parameter `provider_id` when calling `list_occurrences`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'provider_id' in params:
            path_params['provider_id'] = params['provider_id']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('page_token', params['page_token']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['UserMin']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{account_id}/providers/{provider_id}/occurrences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiListOccurrencesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_occurrence(self, body, authorization, account_id, provider_id, occurrence_id, **kwargs):  # noqa: E501
        """Updates an existing `Occurrence`.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_occurrence(body, authorization, account_id, provider_id, occurrence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiOccurrence body: Body for Occurence updation (required)
        :param str authorization: The Identity & Access Management (IAM) Bearer token. (required)
        :param str account_id: Account ID (required)
        :param str provider_id: First part of occurrence `name`: providers/{provider_id}/occurrences/{occurrence_id} (required)
        :param str occurrence_id: Second part of occurrence `name`: providers/{provider_id}/occurrences/{occurrence_id} (required)
        :return: ApiOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_occurrence_with_http_info(body, authorization, account_id, provider_id, occurrence_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_occurrence_with_http_info(body, authorization, account_id, provider_id, occurrence_id, **kwargs)  # noqa: E501
            return data

    def update_occurrence_with_http_info(self, body, authorization, account_id, provider_id, occurrence_id, **kwargs):  # noqa: E501
        """Updates an existing `Occurrence`.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_occurrence_with_http_info(body, authorization, account_id, provider_id, occurrence_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiOccurrence body: Body for Occurence updation (required)
        :param str authorization: The Identity & Access Management (IAM) Bearer token. (required)
        :param str account_id: Account ID (required)
        :param str provider_id: First part of occurrence `name`: providers/{provider_id}/occurrences/{occurrence_id} (required)
        :param str occurrence_id: Second part of occurrence `name`: providers/{provider_id}/occurrences/{occurrence_id} (required)
        :return: ApiOccurrence
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'authorization', 'account_id', 'provider_id', 'occurrence_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_occurrence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_occurrence`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `update_occurrence`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `update_occurrence`")  # noqa: E501
        # verify the required parameter 'provider_id' is set
        if ('provider_id' not in params or
                params['provider_id'] is None):
            raise ValueError("Missing the required parameter `provider_id` when calling `update_occurrence`")  # noqa: E501
        # verify the required parameter 'occurrence_id' is set
        if ('occurrence_id' not in params or
                params['occurrence_id'] is None):
            raise ValueError("Missing the required parameter `occurrence_id` when calling `update_occurrence`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'provider_id' in params:
            path_params['provider_id'] = params['provider_id']  # noqa: E501
        if 'occurrence_id' in params:
            path_params['occurrence_id'] = params['occurrence_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['UserMin']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{account_id}/providers/{provider_id}/occurrences/{occurrence_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiOccurrence',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
