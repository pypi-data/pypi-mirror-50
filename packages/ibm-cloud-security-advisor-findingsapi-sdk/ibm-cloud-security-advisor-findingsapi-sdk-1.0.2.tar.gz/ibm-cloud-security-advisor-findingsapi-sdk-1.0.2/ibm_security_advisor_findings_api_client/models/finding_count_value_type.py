# coding: utf-8

"""
/*
 Copyright 2019 IBM Corp.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

"""

import pprint
import re  # noqa: F401

import six
from ibm_security_advisor_findings_api_client.models.value_type import ValueType  # noqa: F401,E501


class FindingCountValueType(ValueType):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'finding_note_names': 'list[str]'
    }
    if hasattr(ValueType, "swagger_types"):
        swagger_types.update(ValueType.swagger_types)

    attribute_map = {
        'finding_note_names': 'finding_note_names'
    }
    if hasattr(ValueType, "attribute_map"):
        attribute_map.update(ValueType.attribute_map)

    def __init__(self, finding_note_names=None, *args, **kwargs):  # noqa: E501
        """FindingCountValueType - a model defined in Swagger"""  # noqa: E501
        self._finding_note_names = None
        self.discriminator = None
        self.finding_note_names = finding_note_names
        ValueType.__init__(self, *args, **kwargs)

    @property
    def finding_note_names(self):
        """Gets the finding_note_names of this FindingCountValueType.  # noqa: E501

        the names of the finding note associated that act as filters for counting the occurrences  # noqa: E501

        :return: The finding_note_names of this FindingCountValueType.  # noqa: E501
        :rtype: list[str]
        """
        return self._finding_note_names

    @finding_note_names.setter
    def finding_note_names(self, finding_note_names):
        """Sets the finding_note_names of this FindingCountValueType.

        the names of the finding note associated that act as filters for counting the occurrences  # noqa: E501

        :param finding_note_names: The finding_note_names of this FindingCountValueType.  # noqa: E501
        :type: list[str]
        """
        if finding_note_names is None:
            raise ValueError("Invalid value for `finding_note_names`, must not be `None`")  # noqa: E501

        self._finding_note_names = finding_note_names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FindingCountValueType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FindingCountValueType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
