# coding: utf-8

"""
/*
 Copyright 2019 IBM Corp.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

"""

import pprint
import re  # noqa: F401

import six
from ibm_security_advisor_findings_api_client.models.socket_address import SocketAddress  # noqa: F401,E501


class NetworkConnection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'direction': 'str',
        'protocol': 'str',
        'client': 'SocketAddress',
        'server': 'SocketAddress'
    }

    attribute_map = {
        'direction': 'direction',
        'protocol': 'protocol',
        'client': 'client',
        'server': 'server'
    }

    def __init__(self, direction=None, protocol=None, client=None, server=None):  # noqa: E501
        """NetworkConnection - a model defined in Swagger"""  # noqa: E501
        self._direction = None
        self._protocol = None
        self._client = None
        self._server = None
        self.discriminator = None
        if direction is not None:
            self.direction = direction
        if protocol is not None:
            self.protocol = protocol
        if client is not None:
            self.client = client
        if server is not None:
            self.server = server

    @property
    def direction(self):
        """Gets the direction of this NetworkConnection.  # noqa: E501

        The direction of this network connection  # noqa: E501

        :return: The direction of this NetworkConnection.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this NetworkConnection.

        The direction of this network connection  # noqa: E501

        :param direction: The direction of this NetworkConnection.  # noqa: E501
        :type: str
        """

        self._direction = direction

    @property
    def protocol(self):
        """Gets the protocol of this NetworkConnection.  # noqa: E501

        The protocol of this network connection  # noqa: E501

        :return: The protocol of this NetworkConnection.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this NetworkConnection.

        The protocol of this network connection  # noqa: E501

        :param protocol: The protocol of this NetworkConnection.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def client(self):
        """Gets the client of this NetworkConnection.  # noqa: E501


        :return: The client of this NetworkConnection.  # noqa: E501
        :rtype: SocketAddress
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this NetworkConnection.


        :param client: The client of this NetworkConnection.  # noqa: E501
        :type: SocketAddress
        """

        self._client = client

    @property
    def server(self):
        """Gets the server of this NetworkConnection.  # noqa: E501


        :return: The server of this NetworkConnection.  # noqa: E501
        :rtype: SocketAddress
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this NetworkConnection.


        :param server: The server of this NetworkConnection.  # noqa: E501
        :type: SocketAddress
        """

        self._server = server

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkConnection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkConnection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
