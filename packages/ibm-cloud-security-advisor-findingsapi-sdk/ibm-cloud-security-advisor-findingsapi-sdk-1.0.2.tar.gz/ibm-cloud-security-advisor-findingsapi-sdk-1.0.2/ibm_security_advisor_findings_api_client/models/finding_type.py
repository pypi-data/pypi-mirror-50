# coding: utf-8

"""
/*
 Copyright 2019 IBM Corp.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

"""

import pprint
import re  # noqa: F401

import six
from ibm_security_advisor_findings_api_client.models.remediation_step import RemediationStep  # noqa: F401,E501
from ibm_security_advisor_findings_api_client.models.severity import Severity  # noqa: F401,E501


class FindingType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'severity': 'Severity',
        'next_steps': 'list[RemediationStep]'
    }

    attribute_map = {
        'severity': 'severity',
        'next_steps': 'next_steps'
    }

    def __init__(self, severity=None, next_steps=None):  # noqa: E501
        """FindingType - a model defined in Swagger"""  # noqa: E501
        self._severity = None
        self._next_steps = None
        self.discriminator = None
        self.severity = severity
        if next_steps is not None:
            self.next_steps = next_steps

    @property
    def severity(self):
        """Gets the severity of this FindingType.  # noqa: E501


        :return: The severity of this FindingType.  # noqa: E501
        :rtype: Severity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this FindingType.


        :param severity: The severity of this FindingType.  # noqa: E501
        :type: Severity
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501

        self._severity = severity

    @property
    def next_steps(self):
        """Gets the next_steps of this FindingType.  # noqa: E501

        Common remediation steps for the finding of this type  # noqa: E501

        :return: The next_steps of this FindingType.  # noqa: E501
        :rtype: list[RemediationStep]
        """
        return self._next_steps

    @next_steps.setter
    def next_steps(self, next_steps):
        """Sets the next_steps of this FindingType.

        Common remediation steps for the finding of this type  # noqa: E501

        :param next_steps: The next_steps of this FindingType.  # noqa: E501
        :type: list[RemediationStep]
        """

        self._next_steps = next_steps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FindingType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FindingType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
