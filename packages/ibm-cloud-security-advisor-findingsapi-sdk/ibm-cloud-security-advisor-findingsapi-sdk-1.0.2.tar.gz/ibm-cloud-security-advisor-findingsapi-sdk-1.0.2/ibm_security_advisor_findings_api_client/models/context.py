# coding: utf-8

"""
/*
 Copyright 2019 IBM Corp.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

"""

import pprint
import re  # noqa: F401

import six


class Context(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'region': 'str',
        'resource_crn': 'str',
        'resource_id': 'str',
        'resource_name': 'str',
        'resource_type': 'str',
        'service_crn': 'str',
        'service_name': 'str',
        'environment_name': 'str',
        'component_name': 'str',
        'toolchain_id': 'str'
    }

    attribute_map = {
        'region': 'region',
        'resource_crn': 'resource_crn',
        'resource_id': 'resource_id',
        'resource_name': 'resource_name',
        'resource_type': 'resource_type',
        'service_crn': 'service_crn',
        'service_name': 'service_name',
        'environment_name': 'environment_name',
        'component_name': 'component_name',
        'toolchain_id': 'toolchain_id'
    }

    def __init__(self, region=None, resource_crn=None, resource_id=None, resource_name=None, resource_type=None, service_crn=None, service_name=None, environment_name=None, component_name=None, toolchain_id=None):  # noqa: E501
        """Context - a model defined in Swagger"""  # noqa: E501
        self._region = None
        self._resource_crn = None
        self._resource_id = None
        self._resource_name = None
        self._resource_type = None
        self._service_crn = None
        self._service_name = None
        self._environment_name = None
        self._component_name = None
        self._toolchain_id = None
        self.discriminator = None
        if region is not None:
            self.region = region
        if resource_crn is not None:
            self.resource_crn = resource_crn
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_name is not None:
            self.resource_name = resource_name
        if resource_type is not None:
            self.resource_type = resource_type
        if service_crn is not None:
            self.service_crn = service_crn
        if service_name is not None:
            self.service_name = service_name
        if environment_name is not None:
            self.environment_name = environment_name
        if component_name is not None:
            self.component_name = component_name
        if toolchain_id is not None:
            self.toolchain_id = toolchain_id

    @property
    def region(self):
        """Gets the region of this Context.  # noqa: E501

        The IBM Cloud region  # noqa: E501

        :return: The region of this Context.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Context.

        The IBM Cloud region  # noqa: E501

        :param region: The region of this Context.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def resource_crn(self):
        """Gets the resource_crn of this Context.  # noqa: E501

        The resource CRN (e.g. certificate CRN, image CRN)  # noqa: E501

        :return: The resource_crn of this Context.  # noqa: E501
        :rtype: str
        """
        return self._resource_crn

    @resource_crn.setter
    def resource_crn(self, resource_crn):
        """Sets the resource_crn of this Context.

        The resource CRN (e.g. certificate CRN, image CRN)  # noqa: E501

        :param resource_crn: The resource_crn of this Context.  # noqa: E501
        :type: str
        """

        self._resource_crn = resource_crn

    @property
    def resource_id(self):
        """Gets the resource_id of this Context.  # noqa: E501

        The resource ID, in case the CRN is not available  # noqa: E501

        :return: The resource_id of this Context.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this Context.

        The resource ID, in case the CRN is not available  # noqa: E501

        :param resource_id: The resource_id of this Context.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def resource_name(self):
        """Gets the resource_name of this Context.  # noqa: E501

        The user-friendly resource name  # noqa: E501

        :return: The resource_name of this Context.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this Context.

        The user-friendly resource name  # noqa: E501

        :param resource_name: The resource_name of this Context.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def resource_type(self):
        """Gets the resource_type of this Context.  # noqa: E501

        The resource type name (e.g. Pod, Cluster, Certificate, Image)  # noqa: E501

        :return: The resource_type of this Context.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this Context.

        The resource type name (e.g. Pod, Cluster, Certificate, Image)  # noqa: E501

        :param resource_type: The resource_type of this Context.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def service_crn(self):
        """Gets the service_crn of this Context.  # noqa: E501

        The service CRN (e.g. CertMgr Instance CRN)  # noqa: E501

        :return: The service_crn of this Context.  # noqa: E501
        :rtype: str
        """
        return self._service_crn

    @service_crn.setter
    def service_crn(self, service_crn):
        """Sets the service_crn of this Context.

        The service CRN (e.g. CertMgr Instance CRN)  # noqa: E501

        :param service_crn: The service_crn of this Context.  # noqa: E501
        :type: str
        """

        self._service_crn = service_crn

    @property
    def service_name(self):
        """Gets the service_name of this Context.  # noqa: E501

        The service name (e.g. CertMgr)  # noqa: E501

        :return: The service_name of this Context.  # noqa: E501
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this Context.

        The service name (e.g. CertMgr)  # noqa: E501

        :param service_name: The service_name of this Context.  # noqa: E501
        :type: str
        """

        self._service_name = service_name

    @property
    def environment_name(self):
        """Gets the environment_name of this Context.  # noqa: E501

        The name of the environment the occurrence applies to  # noqa: E501

        :return: The environment_name of this Context.  # noqa: E501
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this Context.

        The name of the environment the occurrence applies to  # noqa: E501

        :param environment_name: The environment_name of this Context.  # noqa: E501
        :type: str
        """

        self._environment_name = environment_name

    @property
    def component_name(self):
        """Gets the component_name of this Context.  # noqa: E501

        The name of the component the occurrence applies to  # noqa: E501

        :return: The component_name of this Context.  # noqa: E501
        :rtype: str
        """
        return self._component_name

    @component_name.setter
    def component_name(self, component_name):
        """Sets the component_name of this Context.

        The name of the component the occurrence applies to  # noqa: E501

        :param component_name: The component_name of this Context.  # noqa: E501
        :type: str
        """

        self._component_name = component_name

    @property
    def toolchain_id(self):
        """Gets the toolchain_id of this Context.  # noqa: E501

        The id of the toolchain the occurrence applies to  # noqa: E501

        :return: The toolchain_id of this Context.  # noqa: E501
        :rtype: str
        """
        return self._toolchain_id

    @toolchain_id.setter
    def toolchain_id(self, toolchain_id):
        """Sets the toolchain_id of this Context.

        The id of the toolchain the occurrence applies to  # noqa: E501

        :param toolchain_id: The toolchain_id of this Context.  # noqa: E501
        :type: str
        """

        self._toolchain_id = toolchain_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Context, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Context):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
