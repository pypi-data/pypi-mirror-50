[
  {
    "name": "Search repositories",
    "enabledForApps": true,
    "githubCloudOnly": false,
    "method": "GET",
    "path": "/search/repositories",
    "previews": [
      {
        "name": "mercy",
        "description": "**Note:** The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.mercy-preview+json\n\n```",
        "required": false
      }
    ],
    "params": [
      {
        "name": "q",
        "type": "string",
        "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching for repositories](https://help.github.com/articles/searching-for-repositories/)\" for a detailed list of qualifiers.",
        "required": true,
        "location": "query"
      },
      {
        "name": "sort",
        "type": "string",
        "description": "Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`.",
        "default": "[best match](https://developer.github.com/v3/search/#ranking-search-results)",
        "required": false,
        "enum": [
          "stars",
          "forks",
          "help-wanted-issues",
          "updated"
        ],
        "location": "query"
      },
      {
        "name": "order",
        "type": "string",
        "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
        "default": "desc",
        "required": false,
        "enum": [
          "desc",
          "asc"
        ],
        "location": "query"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "Find repositories via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nWhen searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).\n\nSuppose you want to search for popular Tetris repositories written in Assembly. Your query might look like this.\n\nYou can search for multiple topics by adding more `topic:` instances, and including the `mercy-preview` header. For example:\n\nIn this request, we're searching for repositories with the word `tetris` in the name, the description, or the README. We're limiting the results to only find repositories where the primary language is Assembly. We're sorting by stars in descending order, so that the most popular repositories appear first in the search results.",
    "idName": "repos",
    "documentationUrl": "https://developer.github.com/v3/search/#search-repositories"
  },
  {
    "name": "Search commits",
    "enabledForApps": true,
    "githubCloudOnly": false,
    "method": "GET",
    "path": "/search/commits",
    "previews": [
      {
        "name": "cloak",
        "description": "The Commit Search API is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the [blog post](https://developer.github.com/changes/2017-01-05-commit-search-api/) for full details.\n\nTo access the API you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\n  application/vnd.github.cloak-preview\n\n```",
        "required": true
      }
    ],
    "params": [
      {
        "name": "q",
        "type": "string",
        "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching commits](https://help.github.com/articles/searching-commits/)\" for a detailed list of qualifiers.",
        "required": true,
        "location": "query"
      },
      {
        "name": "sort",
        "type": "string",
        "description": "Sorts the results of your query by `author-date` or `committer-date`.",
        "default": "[best match](https://developer.github.com/v3/search/#ranking-search-results)",
        "required": false,
        "enum": [
          "author-date",
          "committer-date"
        ],
        "location": "query"
      },
      {
        "name": "order",
        "type": "string",
        "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
        "default": "desc",
        "required": false,
        "enum": [
          "desc",
          "asc"
        ],
        "location": "query"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "Find commits via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nWhen searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).\n\n**Considerations for commit search**\n\nOnly the _default branch_ is considered. In most cases, this will be the `master` branch.\n\nSuppose you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:",
    "idName": "commits",
    "documentationUrl": "https://developer.github.com/v3/search/#search-commits"
  },
  {
    "name": "Search code",
    "enabledForApps": true,
    "githubCloudOnly": false,
    "method": "GET",
    "path": "/search/code",
    "previews": [],
    "params": [
      {
        "name": "q",
        "type": "string",
        "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching code](https://help.github.com/articles/searching-code/)\" for a detailed list of qualifiers.",
        "required": true,
        "location": "query"
      },
      {
        "name": "sort",
        "type": "string",
        "description": "Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure.",
        "default": "[best match](https://developer.github.com/v3/search/#ranking-search-results)",
        "required": false,
        "enum": [
          "indexed"
        ],
        "location": "query"
      },
      {
        "name": "order",
        "type": "string",
        "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
        "default": "desc",
        "required": false,
        "enum": [
          "desc",
          "asc"
        ],
        "location": "query"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "Find file contents via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nWhen searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).\n\n**Note:** You must [authenticate](https://developer.github.com/v3/#authentication) to search for code across all public repositories.\n\n**Considerations for code search**\n\nDue to the complexity of searching code, there are a few restrictions on how searches are performed:\n\n*   Only the _default branch_ is considered. In most cases, this will be the `master` branch.\n*   Only files smaller than 384 KB are searchable.\n*   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.\n\nSuppose you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery). Your query would look something like this:\n\nHere, we're searching for the keyword `addClass` within a file's contents. We're making sure that we're only looking in files where the language is JavaScript. And we're scoping the search to the `repo:jquery/jquery` repository.",
    "idName": "code",
    "documentationUrl": "https://developer.github.com/v3/search/#search-code"
  },
  {
    "name": "Search issues and pull requests",
    "enabledForApps": true,
    "githubCloudOnly": false,
    "method": "GET",
    "path": "/search/issues",
    "previews": [
      {
        "name": "symmetra",
        "description": "**Note:** You can now use emoji in label names, add descriptions to labels, and search for labels in a repository. See the [blog post](https://developer.github.com/changes/2018-02-22-label-description-search-preview) for full details. To access these features and receive payloads with this data during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.symmetra-preview+json\n\n```",
        "required": false
      }
    ],
    "params": [
      {
        "name": "q",
        "type": "string",
        "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching issues and pull requests](https://help.github.com/articles/searching-issues-and-pull-requests/)\" for a detailed list of qualifiers.",
        "required": true,
        "location": "query"
      },
      {
        "name": "sort",
        "type": "string",
        "description": "Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`,",
        "default": "[best match](https://developer.github.com/v3/search/#ranking-search-results)",
        "required": false,
        "enum": [
          "comments",
          "reactions",
          "reactions-+1",
          "reactions--1",
          "reactions-smile",
          "reactions-thinking_face",
          "reactions-heart",
          "reactions-tada",
          "interactions",
          "created",
          "updated"
        ],
        "location": "query"
      },
      {
        "name": "order",
        "type": "string",
        "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
        "default": "desc",
        "required": false,
        "enum": [
          "desc",
          "asc"
        ],
        "location": "query"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "Find issues by state and keyword. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nWhen searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).\n\nLet's say you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.\n\nIn this query, we're searching for the keyword `windows`, within any open issue that's labeled as `bug`. The search runs across repositories whose primary language is Python. We’re sorting by creation date in ascending order, so that the oldest issues appear first in the search results.",
    "idName": "issues-and-pull-requests",
    "documentationUrl": "https://developer.github.com/v3/search/#search-issues-and-pull-requests"
  },
  {
    "name": "Search issues",
    "enabledForApps": true,
    "githubCloudOnly": false,
    "method": "GET",
    "path": "/search/issues",
    "previews": [
      {
        "name": "symmetra",
        "description": "**Note:** You can now use emoji in label names, add descriptions to labels, and search for labels in a repository. See the [blog post](https://developer.github.com/changes/2018-02-22-label-description-search-preview) for full details. To access these features and receive payloads with this data during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.symmetra-preview+json\n\n```",
        "required": false
      }
    ],
    "params": [
      {
        "name": "q",
        "type": "string",
        "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching issues and pull requests](https://help.github.com/articles/searching-issues-and-pull-requests/)\" for a detailed list of qualifiers.",
        "required": true,
        "location": "query"
      },
      {
        "name": "sort",
        "type": "string",
        "description": "Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`,",
        "default": "[best match](https://developer.github.com/v3/search/#ranking-search-results)",
        "required": false,
        "enum": [
          "comments",
          "reactions",
          "reactions-+1",
          "reactions--1",
          "reactions-smile",
          "reactions-thinking_face",
          "reactions-heart",
          "reactions-tada",
          "interactions",
          "created",
          "updated"
        ],
        "location": "query"
      },
      {
        "name": "order",
        "type": "string",
        "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
        "default": "desc",
        "required": false,
        "enum": [
          "desc",
          "asc"
        ],
        "location": "query"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "Find issues by state and keyword. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nWhen searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).\n\nLet's say you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.\n\nIn this query, we're searching for the keyword `windows`, within any open issue that's labeled as `bug`. The search runs across repositories whose primary language is Python. We’re sorting by creation date in ascending order, so that the oldest issues appear first in the search results.",
    "idName": "issues",
    "documentationUrl": "https://developer.github.com/v3/search/#search-issues-and-pull-requests",
    "deprecated": {
      "date": "2018-12-27",
      "message": "\"Search issues\" has been renamed to \"Search issues and pull requests\"",
      "before": {
        "idName": "issues"
      },
      "after": {
        "idName": "issues-and-pull-requests"
      }
    }
  },
  {
    "name": "Search users",
    "enabledForApps": true,
    "githubCloudOnly": false,
    "method": "GET",
    "path": "/search/users",
    "previews": [],
    "params": [
      {
        "name": "q",
        "type": "string",
        "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query). See \"[Searching users](https://help.github.com/articles/searching-users/)\" for a detailed list of qualifiers.",
        "required": true,
        "location": "query"
      },
      {
        "name": "sort",
        "type": "string",
        "description": "Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub.",
        "default": "[best match](https://developer.github.com/v3/search/#ranking-search-results)",
        "required": false,
        "enum": [
          "followers",
          "repositories",
          "joined"
        ],
        "location": "query"
      },
      {
        "name": "order",
        "type": "string",
        "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
        "default": "desc",
        "required": false,
        "enum": [
          "desc",
          "asc"
        ],
        "location": "query"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "Find users via various criteria. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nWhen searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).\n\nImagine you're looking for a list of popular users. You might try out this query:\n\nHere, we're looking at users with the name Tom. We're only interested in those with more than 42 repositories, and only if they have over 1,000 followers.",
    "idName": "users",
    "documentationUrl": "https://developer.github.com/v3/search/#search-users"
  },
  {
    "name": "Search topics",
    "enabledForApps": true,
    "githubCloudOnly": false,
    "method": "GET",
    "path": "/search/topics",
    "previews": [
      {
        "name": "mercy",
        "description": "**Note:** The `topics` property for repositories on GitHub is currently available for developers to preview. To view the `topics` property in calls that return repository results, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.mercy-preview+json\n\n```",
        "required": false
      }
    ],
    "params": [
      {
        "name": "q",
        "type": "string",
        "description": "The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query).",
        "required": true,
        "location": "query"
      }
    ],
    "description": "Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nWhen searching for topics, you can get text match metadata for the topic's **short\\_description**, **description**, **name**, or **display\\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).\n\nSee \"[Searching topics](https://help.github.com/articles/searching-topics/)\" for a detailed list of qualifiers.\n\nSuppose you want to search for topics related to Ruby that are featured on [https://github.com/topics](https://github.com/topics). Your query might look like this:\n\nIn this request, we're searching for topics with the keyword `ruby`, and we're limiting the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.\n\n**Note:** A search for featured Ruby topics only has 6 total results, so a [Link header](https://developer.github.com/v3/#link-header) indicating pagination is not included in the response.",
    "idName": "topics",
    "documentationUrl": "https://developer.github.com/v3/search/#search-topics"
  },
  {
    "name": "Search labels",
    "enabledForApps": true,
    "githubCloudOnly": false,
    "method": "GET",
    "path": "/search/labels",
    "previews": [
      {
        "name": "symmetra",
        "description": "**Note:** You can now use emoji in label names, add descriptions to labels, and search for labels in a repository. See the [blog post](https://developer.github.com/changes/2018-02-22-label-description-search-preview) for full details. To access these features and receive payloads with this data during the preview period, you must provide a custom [media type](https://developer.github.com/v3/media) in the `Accept` header:\n\n```\napplication/vnd.github.symmetra-preview+json\n\n```",
        "required": false
      }
    ],
    "params": [
      {
        "name": "repository_id",
        "type": "integer",
        "description": "The id of the repository.",
        "required": true,
        "location": "query"
      },
      {
        "name": "q",
        "type": "string",
        "description": "The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://developer.github.com/v3/search/#constructing-a-search-query).",
        "required": true,
        "location": "query"
      },
      {
        "name": "sort",
        "type": "string",
        "description": "Sorts the results of your query by when the label was `created` or `updated`.",
        "default": "[best match](https://developer.github.com/v3/search/#ranking-search-results)",
        "required": false,
        "enum": [
          "created",
          "updated"
        ],
        "location": "query"
      },
      {
        "name": "order",
        "type": "string",
        "description": "Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`.",
        "default": "desc",
        "required": false,
        "enum": [
          "desc",
          "asc"
        ],
        "location": "query"
      }
    ],
    "description": "Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://developer.github.com/v3/#pagination).\n\nWhen searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://developer.github.com/v3/search/#text-match-metadata).\n\nSuppose you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:\n\nThe labels that best match for the query appear first in the search results.",
    "idName": "labels",
    "documentationUrl": "https://developer.github.com/v3/search/#search-labels"
  },
  {
    "name": "Search issues",
    "enabledForApps": false,
    "githubCloudOnly": false,
    "method": "GET",
    "path": "/legacy/issues/search/:owner/:repository/:state/:keyword",
    "previews": [],
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repository",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "state",
        "type": "string",
        "description": "Indicates the state of the issues to return. Can be either `open` or `closed`.",
        "required": true,
        "enum": [
          "open",
          "closed"
        ],
        "location": "url"
      },
      {
        "name": "keyword",
        "type": "string",
        "description": "The search term.",
        "required": true,
        "location": "url"
      }
    ],
    "description": "Find issues by state and keyword.",
    "idName": "issues-legacy",
    "documentationUrl": "https://developer.github.com/v3/search/legacy/#search-issues"
  },
  {
    "name": "Search repositories",
    "enabledForApps": false,
    "githubCloudOnly": false,
    "method": "GET",
    "path": "/legacy/repos/search/:keyword",
    "previews": [],
    "params": [
      {
        "name": "keyword",
        "type": "string",
        "description": "The search term.",
        "required": true,
        "location": "url"
      },
      {
        "name": "language",
        "type": "string",
        "description": "Filter results by language.",
        "required": false,
        "location": "query"
      },
      {
        "name": "start_page",
        "type": "string",
        "description": "The page number to fetch.",
        "required": false,
        "location": "query"
      },
      {
        "name": "sort",
        "type": "string",
        "description": "The sort field. One of `stars`, `forks`, or `updated`.",
        "default": "results are sorted by best match.",
        "required": false,
        "enum": [
          "stars",
          "forks",
          "updated"
        ],
        "location": "query"
      },
      {
        "name": "order",
        "type": "string",
        "description": "The sort field. if `sort` param is provided. Can be either `asc` or `desc`.",
        "required": false,
        "enum": [
          "asc",
          "desc"
        ],
        "location": "query"
      }
    ],
    "description": "Find repositories by keyword. Note, this legacy method does not follow the v3 pagination pattern. This method returns up to 100 results per page and pages can be fetched using the `start_page` parameter.",
    "idName": "repos-legacy",
    "documentationUrl": "https://developer.github.com/v3/search/legacy/#search-repositories"
  },
  {
    "name": "Search users",
    "enabledForApps": false,
    "githubCloudOnly": false,
    "method": "GET",
    "path": "/legacy/user/search/:keyword",
    "previews": [],
    "params": [
      {
        "name": "keyword",
        "type": "string",
        "description": "The search term.",
        "required": true,
        "location": "url"
      },
      {
        "name": "start_page",
        "type": "string",
        "description": "The page number to fetch.",
        "required": false,
        "location": "query"
      },
      {
        "name": "sort",
        "type": "string",
        "description": "The sort field. One of `stars`, `forks`, or `updated`.",
        "default": "results are sorted by best match.",
        "required": false,
        "enum": [
          "stars",
          "forks",
          "updated"
        ],
        "location": "query"
      },
      {
        "name": "order",
        "type": "string",
        "description": "The sort field. if `sort` param is provided. Can be either `asc` or `desc`.",
        "required": false,
        "enum": [
          "asc",
          "desc"
        ],
        "location": "query"
      }
    ],
    "description": "Find users by keyword.",
    "idName": "users-legacy",
    "documentationUrl": "https://developer.github.com/v3/search/legacy/#search-users"
  },
  {
    "name": "Email search",
    "enabledForApps": false,
    "githubCloudOnly": false,
    "method": "GET",
    "path": "/legacy/user/email/:email",
    "previews": [],
    "params": [
      {
        "name": "email",
        "type": "string",
        "description": "The email address.",
        "required": true,
        "location": "url"
      }
    ],
    "description": "This API call is added for compatibility reasons only. There's no guarantee that full email searches will always be available. The `@` character in the address must be left unencoded. Searches only against public email addresses (as configured on the user's GitHub profile).",
    "idName": "email-legacy",
    "documentationUrl": "https://developer.github.com/v3/search/legacy/#email-search"
  }
]
