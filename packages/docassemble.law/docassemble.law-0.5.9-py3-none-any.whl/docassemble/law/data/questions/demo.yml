# Prepared by Community.lawyer on 7/17/2019
# Compatible with Docassemble version 0.3.11
---
modules:
  - docassemble.base.util
---
mandatory: True
code: |
  from docassemble.base.functions import get_uid
  if not defined("___answers_session_id"):
    define("___answers_session_id", get_uid())
---
mandatory: True
code: |
  define("Today", today())
---
initial: True
code: |
  import datetime
  import types

  def empty_string():
    return ""

  def ternary(condition, true_value, false_value):
    if is_undefined(condition):
      return Undefined()
    elif is_true(augment(condition)):
      return primitive_value(true_value)
    else:
      return primitive_value(false_value)

  def cl_array_access(array, _index):
    index = _index - 1
    return (array[index] if index < len(array) else None)

  def primitive_value(something):
    return augment(something).wrapped

  def Undefined():
    return augment(None)

  def is_true(arg):
    return primitive_value(arg) == True

  def is_false(arg):
    return primitive_value(arg) == False

  def is_falsy(arg):
    wrapped = primitive_value(arg)
    return wrapped == False or wrapped == None

  def is_truthy(arg):
    wrapped = primitive_value(arg)
    return not is_falsy(wrapped)

  def is_augmented(something):
    return something.__class__.__name__ == 'Augmented'

  def augment(something=None):
    if is_augmented(something):
      return something
    return Augmented(something)

  def is_undefined(something):
    return augment(something).wrapped == None

  def is_not_undefined(something):
    return not is_undefined(something)

  class Augmented(object):
    def __init__(self, something):
      self.wrapped = something
    def __str__(self):
      return unicode(self.wrapped)
    # array
    def array_index(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(cl_array_access(self.wrapped, int(arg.wrapped)))
    def array_size(self):
      if is_undefined(self):
        return self
      return augment(len(self.wrapped))
    def array_leading(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped[:int(arg.wrapped)])
    def array_trailing(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped[int(-(arg.wrapped)):])
    def array_excluding_leading(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped[int(arg.wrapped):])
    def array_excluding_trailing(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped[:int(-(arg.wrapped))])
    # boolean
    def boolean_and(self, _arg):
      arg = augment(_arg)
      if is_false(self.wrapped) or is_false(arg.wrapped):
        return augment(False)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped and arg.wrapped)
    def boolean_or(self, _arg):
      arg = augment(_arg)
      if is_true(self.wrapped) or is_true(arg.wrapped):
        return augment(True)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped or arg.wrapped)
    def boolean_not(self):
      if is_undefined(self):
        return self
      return augment(not self.wrapped)
    def boolean_eq(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped == arg.wrapped)
    def boolean_ne(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped != arg.wrapped)
    # number
    def number_add(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped + arg.wrapped)
    def number_subtract(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped - arg.wrapped)
    def number_multiply(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped * arg.wrapped)
    def number_divide(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      if arg.wrapped == 0:
        return Undefined()
      return augment(self.wrapped / arg.wrapped)
    def number_eq(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped == arg.wrapped)
    def number_ne(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped != arg.wrapped)
    def number_gt(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped > arg.wrapped)
    def number_gte(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped >= arg.wrapped)
    def number_lt(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped < arg.wrapped)
    def number_lte(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped <= arg.wrapped)
    # string
    def string_join_with_space(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped + ' ' + arg.wrapped)
    def string_join_without_space(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped + arg.wrapped)
    def string_eq(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped == arg.wrapped)
    def string_ne(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped != arg.wrapped)
    def string_length(self):
      if is_undefined(self):
        return Undefined()
      return augment(len(self.wrapped))
    # time
    def time_eq(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped == arg.wrapped)
    def time_ne(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped != arg.wrapped)
    def time_gt(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped > arg.wrapped)
    def time_gte(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped >= arg.wrapped)
    def time_lt(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped < arg.wrapped)
    def time_lte(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped <= arg.wrapped)
    # date
    def date_eq(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped == arg.wrapped)
    def date_ne(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped != arg.wrapped)
    def date_gt(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped > arg.wrapped)
    def date_gte(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped >= arg.wrapped)
    def date_lt(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped < arg.wrapped)
    def date_lte(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(self.wrapped <= arg.wrapped)
    # dictionary
    def dictionary_all_false(self):
      if is_undefined(self):
        return self
      return augment(self.wrapped.all_false())
    def dictionary_all_true(self):
      if is_undefined(self):
        return self
      return augment(self.wrapped.all_true())
    def dictionary_any_false(self):
      if is_undefined(self):
        return self
      return augment(self.wrapped.any_false())
    def dictionary_any_true(self):
      if is_undefined(self):
        return self
      return augment(self.wrapped.any_true())
    def dictionary_access(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return self
      return augment(self.wrapped.get(arg.wrapped))
    # date math
    def days_after(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(arg.wrapped.plus(days=self.wrapped))
    def months_after(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(arg.wrapped.plus(months=self.wrapped))
    def years_after(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(arg.wrapped.plus(years=self.wrapped))
    def days_before(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(arg.wrapped.minus(days=self.wrapped))
    def months_before(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(arg.wrapped.minus(months=self.wrapped))
    def years_before(self, _arg):
      arg = augment(_arg)
      if is_undefined(self) or is_undefined(arg):
        return Undefined()
      return augment(arg.wrapped.minus(years=self.wrapped))
    # date formatting
    def date_format_ddmmyyyy(self):
      if is_undefined(self):
        return self
      return augment(format_date(self.wrapped, format='d/M/yyyy'))
    def date_format_mmddyyyy(self):
      if is_undefined(self):
        return self
      return augment(format_date(self.wrapped, format='M/d/yyyy'))
    def date_format_yyyymmdd(self):
      if is_undefined(self):
        return self
      return augment(format_date(self.wrapped, format='yyyy/M/d'))
    def date_format_mdy_month_name(self):
      if is_undefined(self):
        return self
      return augment(format_date(self.wrapped, format='long'))
    def date_format_mdy_month_name_day_name(self):
      if is_undefined(self):
        return self
      return augment(format_date(self.wrapped, format='full'))

  # typecasting
  def typecast_as_date(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return augment(as_datetime(arg.wrapped))
  def typecast_as_number(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return augment(float(arg.wrapped))
  def typecast_as_boolean(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    wrapped = arg.wrapped
    if wrapped == 'True':
      return augment(True)
    if wrapped == 'False':
      return augment(False)
    return Undefined()
  def typecast_as_string(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return augment(str(arg.wrapped))
  def as_url_param_value(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return ''
    return augment(typecast_as_string(arg.wrapped))

  # array reducers

  def number_add_array_reducer(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return reduce(lambda x, y: augment(x).number_add(augment(y)), arg.wrapped)

  def number_multiply_array_reducer(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return reduce(lambda x, y: augment(x).number_multiply(augment(y)), arg.wrapped)

  def number_mean_array_reducer(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    size = arg.array_size()
    total = number_add_array_reducer(arg)
    return total.number_divide(size)

  def number_maximum_array_reducer(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return max(map(primitive_value, arg.wrapped))

  def number_minimum_array_reducer(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return min(map(primitive_value, arg.wrapped))

  def boolean_all_true_array_reducer(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return reduce(lambda x, y: augment(x).boolean_and(augment(y)), arg.wrapped)

  def boolean_any_true_array_reducer(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return reduce(lambda x, y: augment(x).boolean_or(augment(y)), arg.wrapped)

  def boolean_all_false_array_reducer(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return augment(boolean_any_true_array_reducer(arg)).boolean_not()

  def boolean_any_false_array_reducer(_arg):
    arg = augment(_arg)
    if is_undefined(arg):
      return arg
    return augment(boolean_all_true_array_reducer(arg)).boolean_not()

  def cl_array_map(myfunc, _myiterable):
    myiterable = augment(_myiterable)
    if is_undefined(myiterable):
      return myiterable
    return map(myfunc, myiterable.wrapped)

  def is_list(arg):
    return type(augment(arg).wrapped) == type([])

  def is_dict(arg):
    return type(augment(arg).wrapped) == type({})

  def as_url_param_kv_pair(key, _value):
    value = augment(_value)
    if is_list(value):
      if is_dict(cl_array_access(value.wrapped, 1)):
        return list_of_dicts_as_url_param_kv_pairs(key, value)
      else:
        pass
        # no primitive arrays yet
    elif len(str(primitive_value(value))) == 0:
      return ''
    else:
      return '&' + primitive_value(key) + "=" + primitive_value(as_url_param_value(value))

  def list_of_dicts_as_url_param_kv_pairs(key, value):
    pairs = []
    for i, mydict in enumerate(primitive_value(value)):
      for k in primitive_value(mydict).keys():
        key_for_pair = key + '[' + str(i) + ']' + '[' + str(k) + ']'
        value_for_pair = mydict[k]
        pair = '&' + str(key_for_pair) + '=' + str(value_for_pair)
        pairs.append(pair)
    return ''.join(pairs)

  def should_show_markdown_variable(var_name):
    return (defined(var_name) and value(var_name) != "")

  def string_as_bool(something):
    return something == 'True'

  def merge_two_dicts(x, y):
    z = x.copy()
    z.update(y)
    return z
---
initial: True
code: |
  import re
  from bs4 import BeautifulSoup
  from markdown import markdown

  def markdown_to_plaintext(markdown_string):
    try:
      html_list = list(map(lambda str: markdown(str), markdown_string.split("\n")))
      html_list = list(map(lambda html: re.sub(r'<pre>(.*?)</pre>', ' ', html), html_list))
      html_list = list(map(lambda html: re.sub(r'<code>(.*?)</code >', ' ', html), html_list))
      soup_list = list(map(lambda html: BeautifulSoup(html, "html.parser"), html_list))
      text_list = list(map(lambda soup: ''.join(soup.findAll(text=True)), soup_list))
      text_list = list(map(lambda text: re.sub(r'\n', '\n\n', text), text_list))
      return "\n".join(text_list)
    except:
      return markdown_string
---
mandatory: True
code: |
	import json

	def ___pdf_template_1519_to_json():
	  import json
	  vars = all_variables()
	  return {"template_data": {"url": "https://community.lawyer/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBaEkxIiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--37b1cfdc9ce08bf1f3c2ea0e99db2e45c8a51a87/sr1.pdf?disposition=attachment", "height": 1188, "width": 918, "page_count": 3}, "stamps": [{"x": 105.33333333333333, "y": 789.3333333333333, "width": 424.66666666666663, "height": 89.33333333333333, "page": 1, "value": "DEMO, NOT FOR OFFICIAL USE", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 50, "font_color": "ff0000"}, {"x": 355.3333333333333, "y": 64.0, "width": 114.66666666666666, "height": 25.333333333333332, "page": 1, "value": markdown_to_plaintext(unicode((signature.url_for() if signature != "" else "") if defined("signature") else "")), "datatype": "signature", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 23.333333333333332, "y": 696.0, "width": 46.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 71.33333333333333, "y": 696.0, "width": 73.33333333333333, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 144.66666666666666, "y": 696.0, "width": 369.3333333333333, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 69.33333333333333, "y": 674.0, "width": 43.33333333333333, "height": 12.666666666666666, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 49.33333333333333, "y": 650.0, "width": 373.3333333333333, "height": 14.0, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 424.66666666666663, "y": 648.6666666666666, "width": 115.33333333333333, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 541.3333333333333, "y": 648.0, "width": 46.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 49.33333333333333, "y": 625.3333333333333, "width": 465.3333333333333, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 515.3333333333333, "y": 625.3333333333333, "width": 72.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 49.33333333333333, "y": 600.6666666666666, "width": 254.66666666666666, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 306.0, "y": 600.0, "width": 30.666666666666664, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 339.3333333333333, "y": 600.0, "width": 56.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 420.0, "y": 600.0, "width": 24.666666666666664, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 447.3333333333333, "y": 600.0, "width": 48.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 515.3333333333333, "y": 600.0, "width": 24.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 542.6666666666666, "y": 600.0, "width": 44.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 49.33333333333333, "y": 576.0, "width": 160.66666666666666, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 212.0, "y": 576.0, "width": 256.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 470.0, "y": 576.0, "width": 44.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 515.3333333333333, "y": 552.6666666666666, "width": 70.66666666666666, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 49.33333333333333, "y": 529.3333333333333, "width": 212.66666666666666, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 261.3333333333333, "y": 529.3333333333333, "width": 207.33333333333331, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 470.66666666666663, "y": 529.3333333333333, "width": 40.666666666666664, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 517.3333333333333, "y": 529.3333333333333, "width": 70.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 49.33333333333333, "y": 506.0, "width": 349.3333333333333, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 399.3333333333333, "y": 506.0, "width": 188.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 49.33333333333333, "y": 482.0, "width": 92.66666666666666, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 167.33333333333331, "y": 482.0, "width": 79.33333333333333, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 272.0, "y": 482.0, "width": 78.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 353.3333333333333, "y": 481.3333333333333, "width": 234.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 48.666666666666664, "y": 434.0, "width": 372.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 425.3333333333333, "y": 434.0, "width": 112.66666666666666, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 542.6666666666666, "y": 434.0, "width": 44.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 48.666666666666664, "y": 409.3333333333333, "width": 464.66666666666663, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 516.0, "y": 409.3333333333333, "width": 70.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 48.666666666666664, "y": 385.3333333333333, "width": 257.3333333333333, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 307.3333333333333, "y": 385.3333333333333, "width": 32.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 341.3333333333333, "y": 385.3333333333333, "width": 57.33333333333333, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 419.3333333333333, "y": 385.3333333333333, "width": 26.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 448.0, "y": 386.0, "width": 48.0, "height": 14.0, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 514.0, "y": 385.3333333333333, "width": 24.666666666666664, "height": 14.0, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 542.6666666666666, "y": 385.3333333333333, "width": 44.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 48.666666666666664, "y": 361.3333333333333, "width": 160.66666666666666, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 212.66666666666666, "y": 361.3333333333333, "width": 256.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 470.0, "y": 361.3333333333333, "width": 45.33333333333333, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 48.666666666666664, "y": 337.3333333333333, "width": 463.3333333333333, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 516.0, "y": 337.3333333333333, "width": 71.33333333333333, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 48.666666666666664, "y": 313.3333333333333, "width": 207.33333333333331, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 260.0, "y": 313.3333333333333, "width": 209.33333333333331, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 470.66666666666663, "y": 313.3333333333333, "width": 42.666666666666664, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 515.3333333333333, "y": 313.3333333333333, "width": 70.66666666666666, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 48.666666666666664, "y": 289.3333333333333, "width": 348.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 401.3333333333333, "y": 289.3333333333333, "width": 186.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 48.666666666666664, "y": 266.66666666666663, "width": 92.66666666666666, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 166.0, "y": 266.66666666666663, "width": 83.33333333333333, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 273.3333333333333, "y": 266.66666666666663, "width": 77.33333333333333, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 354.0, "y": 266.66666666666663, "width": 234.0, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 48.666666666666664, "y": 246.66666666666666, "width": 348.66666666666663, "height": 42.666666666666664, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 48.666666666666664, "y": 200.0, "width": 348.66666666666663, "height": 40.0, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 48.666666666666664, "y": 152.66666666666666, "width": 418.66666666666663, "height": 14.666666666666666, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 48.666666666666664, "y": 131.33333333333331, "width": 538.0, "height": 39.33333333333333, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 23.333333333333332, "y": 51.33333333333333, "width": 92.66666666666666, "height": 13.333333333333332, "page": 1, "value": markdown_to_plaintext(unicode(Today if defined("Today") else "")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 118.66666666666666, "y": 51.33333333333333, "width": 220.66666666666666, "height": 13.333333333333332, "page": 1, "value": markdown_to_plaintext(unicode(name if defined("name") else "")), "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 483.3333333333333, "y": 20.0, "width": 46.666666666666664, "height": 17.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 532.0, "y": 20.0, "width": 46.666666666666664, "height": 17.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 48.0, "y": 554.0, "width": 465.3333333333333, "height": 13.333333333333332, "page": 1, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 518.6666666666666, "y": 698.6666666666666, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 555.3333333333333, "y": 698.6666666666666, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 119.33333333333333, "y": 681.3333333333333, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 119.33333333333333, "y": 670.6666666666666, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 148.0, "y": 675.3333333333333, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 199.33333333333331, "y": 675.3333333333333, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 253.33333333333331, "y": 675.3333333333333, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 304.0, "y": 675.3333333333333, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 364.0, "y": 675.3333333333333, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 415.3333333333333, "y": 675.3333333333333, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 518.6666666666666, "y": 676.0, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 555.3333333333333, "y": 675.3333333333333, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 518.6666666666666, "y": 578.6666666666666, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 556.0, "y": 578.6666666666666, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 50.666666666666664, "y": 460.0, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 111.33333333333333, "y": 460.0, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 208.0, "y": 460.0, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 267.3333333333333, "y": 460.0, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 339.3333333333333, "y": 460.0, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 398.66666666666663, "y": 460.0, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 519.3333333333333, "y": 459.3333333333333, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 555.3333333333333, "y": 459.3333333333333, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 518.6666666666666, "y": 362.66666666666663, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 555.3333333333333, "y": 363.3333333333333, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 409.3333333333333, "y": 240.66666666666666, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 409.3333333333333, "y": 226.0, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 480.0, "y": 240.0, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 480.0, "y": 226.66666666666666, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 530.0, "y": 240.0, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 530.0, "y": 226.0, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 409.3333333333333, "y": 195.33333333333331, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 409.3333333333333, "y": 181.33333333333331, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 480.0, "y": 195.33333333333331, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 480.0, "y": 181.33333333333331, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 530.0, "y": 195.33333333333331, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 530.0, "y": 181.33333333333331, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 474.0, "y": 152.66666666666666, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 510.66666666666663, "y": 152.66666666666666, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(""), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 206.66666666666666, "y": 32.666666666666664, "width": 11.333333333333332, "height": 11.333333333333332, "page": 1, "value": string_as_bool(markdown_to_plaintext(unicode(__continue if defined("__continue") else ""))), "datatype": "checkbox", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 198.0, "y": 726.0, "width": 260.0, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 48.666666666666664, "y": 704.6666666666666, "width": 184.66666666666666, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 369.3333333333333, "y": 704.6666666666666, "width": 74.66666666666666, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 262.0, "y": 704.6666666666666, "width": 74.66666666666666, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 48.666666666666664, "y": 678.6666666666666, "width": 92.0, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 144.66666666666666, "y": 678.6666666666666, "width": 314.0, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 460.0, "y": 678.6666666666666, "width": 127.33333333333333, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 48.666666666666664, "y": 655.3333333333333, "width": 182.66666666666666, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 236.0, "y": 655.3333333333333, "width": 223.33333333333331, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 460.0, "y": 655.3333333333333, "width": 91.33333333333333, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 552.0, "y": 655.3333333333333, "width": 35.33333333333333, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 48.666666666666664, "y": 631.3333333333333, "width": 256.0, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 305.3333333333333, "y": 631.3333333333333, "width": 136.66666666666666, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 442.66666666666663, "y": 631.3333333333333, "width": 86.66666666666666, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 529.3333333333333, "y": 631.3333333333333, "width": 24.666666666666664, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 554.0, "y": 631.3333333333333, "width": 33.33333333333333, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 48.666666666666664, "y": 606.6666666666666, "width": 256.0, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 305.3333333333333, "y": 606.6666666666666, "width": 136.66666666666666, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 442.66666666666663, "y": 606.6666666666666, "width": 86.66666666666666, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 529.3333333333333, "y": 606.6666666666666, "width": 24.666666666666664, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 554.0, "y": 606.6666666666666, "width": 33.33333333333333, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 48.666666666666664, "y": 584.0, "width": 256.0, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 305.3333333333333, "y": 584.0, "width": 136.66666666666666, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 442.66666666666663, "y": 584.0, "width": 86.66666666666666, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 529.3333333333333, "y": 584.0, "width": 24.666666666666664, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}, {"x": 554.0, "y": 584.0, "width": 33.33333333333333, "height": 14.0, "page": 2, "value": "", "datatype": "text", "context_height": 792.0, "context_width": 612.0, "font_size": 12, "font_color": "000000"}], "should_watermark": False}


	def ___define_until_idempotent():
		original_dict = all_variables()
		___define_all()
		if all_variables() != original_dict:
			re_run_logic()
	def ___define_all():
		vars = all_variables()

		if ((not ("___shortcut_6_false" in vars)) and (("__continue" in vars))):
			define("___shortcut_6_false", ((primitive_value(((augment(__continue) if ("__continue" in vars) else Undefined()).boolean_eq(augment(False)))))))


	def rich_text_variable_dictionary():
		vars = all_variables()
		return {

		}
---
initial: True
code: |
	___define_until_idempotent()
---
mandatory: True
code: |
	def passive_possible_variables():
		return { 'Today': markdown_to_plaintext(Today) if defined("Today") else '', '___shortcut_6_false': markdown_to_plaintext(___shortcut_6_false) if defined("___shortcut_6_false") else '', '__continue': markdown_to_plaintext(__continue) if defined("__continue") else '', 'email': markdown_to_plaintext(email) if defined("email") else '', 'name': markdown_to_plaintext(name) if defined("name") else '', 'signature': markdown_to_plaintext(signature) if defined("signature") else '' }
---
mandatory: True
code: |
  import requests
  import json
  define("___authorized", json.loads(requests.get("https://community.lawyer/docassemble_builder/docassemble_interviews/authorize?id=1604&key=" + unicode(url_args.get('key'))).content)['authorized'])
---
mandatory: |
  not ___authorized
question: Sorry, you are not authorized to access this page.
subquestion: Try signing into your account or contacting the App author.
---
features:
	debug: False
	inverse navbar: False
	javascript:
		- https://community.lawyer/static/system_d-9.js
	css:
		- https://community.lawyer/static/styles/jcc-3.css
---
metadata:
	title: |
		Legal Automation Workshop Demo
---
mandatory: True
code: |
  from docassemble.base.util import device
  ___user_device = device().browser.family
---
mandatory: True
code: |
  if ___user_device == "IE":
    log("This app may not run as expected on Internet Explorer - please consider using a more modern browser, such as those found <a href='http://outdatedbrowser.com/en'>here</a>.", "warning")
---
id: 39025
mandatory: |
	True
question: |
	<span id="session-id" data-session-id="${user_info().session}">
	<span id="sends-answers" data-sends-answers="false">
	<span id="cl-endpoint" data-cl-endpoint="https://community.lawyer">
	<span id="interview-id" data-interview-id="1604">

subquestion: |
	# [THIS IS CODE, NOT LEGAL ADVICE](https://github.com/AriChivukula/docassemble.law/blob/master/docassemble/law/data/questions/demo.yml)
field: __continue

under: |
	<hr>	<div style='display:flex;justify-content:space-between;'><div>Powered by [Community.lawyer](https://community.lawyer/)</div></div>
css: |
	<style>
		:root {
			--body-color: #fff;
			--navbar-color: #2D3C4E;
			--text-color: #212529;
			--primary-btn-background-color: #f4ac3b;
			--primary-btn-background-color-hover: #ef970d;
			--primary-btn-text-color: #212529;
			--secondary-btn-background-color: #ffc107;
			--secondary-btn-background-color-hover: #d39e00;
			--secondary-btn-text-color: #212529;
			--text-link-color: #007bff;
			--hide-navbar-background-color: #fff;
		}

	</style>
---
id: 39024
mandatory: |
	True
question: |
	<span id="session-id" data-session-id="${user_info().session}">
	<span id="sends-answers" data-sends-answers="false">
	<span id="cl-endpoint" data-cl-endpoint="https://community.lawyer">
	<span id="interview-id" data-interview-id="1604">

subquestion: |

fields:
	- "<span class=\"producer \" data-variable-name=\"name\" data-field-id=\"88320\" >What is your name?</span>": name
		datatype: text
		required: true

	- "<span class=\"producer \" data-variable-name=\"email\" data-field-id=\"88322\" >What is your email?</span>": email
		datatype: email
		required: true

under: |
	<hr>	<div style='display:flex;justify-content:space-between;'><div>Powered by [Community.lawyer](https://community.lawyer/)</div></div>
css: |
	<style>
		:root {
			--body-color: #fff;
			--navbar-color: #2D3C4E;
			--text-color: #212529;
			--primary-btn-background-color: #f4ac3b;
			--primary-btn-background-color-hover: #ef970d;
			--primary-btn-text-color: #212529;
			--secondary-btn-background-color: #ffc107;
			--secondary-btn-background-color-hover: #d39e00;
			--secondary-btn-text-color: #212529;
			--text-link-color: #007bff;
			--hide-navbar-background-color: #fff;
		}

	</style>
---
id: 39023
mandatory: |
	True
question: |
	<span id="session-id" data-session-id="${user_info().session}">
	<span id="sends-answers" data-sends-answers="false">
	<span id="cl-endpoint" data-cl-endpoint="https://community.lawyer">
	<span id="interview-id" data-interview-id="1604">

subquestion: |
	Sign here please!
signature: signature

under: |
	<hr>	<div style='display:flex;justify-content:space-between;'><div>Powered by [Community.lawyer](https://community.lawyer/)</div></div>
css: |
	<style>
		:root {
			--body-color: #fff;
			--navbar-color: #2D3C4E;
			--text-color: #212529;
			--primary-btn-background-color: #f4ac3b;
			--primary-btn-background-color-hover: #ef970d;
			--primary-btn-text-color: #212529;
			--secondary-btn-background-color: #ffc107;
			--secondary-btn-background-color-hover: #d39e00;
			--secondary-btn-text-color: #212529;
			--text-link-color: #007bff;
			--hide-navbar-background-color: #fff;
		}

	</style>
---
id: 39027
mandatory: |
	True
question: |
	<span id="session-id" data-session-id="${user_info().session}">
	<span id="sends-answers" data-sends-answers="false">
	<span id="cl-endpoint" data-cl-endpoint="https://community.lawyer">
	<span id="interview-id" data-interview-id="1604">

subquestion: |
	Thanks for trying!

attachment code: |
	filter(bool, [t____sr1_pdf_1519_attachment_1740])
allow emailing: False
under: |
	<hr>	<div style='display:flex;justify-content:space-between;'><div>Powered by [Community.lawyer](https://community.lawyer/)</div><span class="is-final-block" /></div>	${ ('' if defined("___already_sent_t_email_email_4e4652a186c7") else (___send_t_email_email_4e4652a186c7())) }

css: |
	<style>
		button.btn-primary[type='submit'] {
			display: none;
		}
		:root {
			--body-color: #fff;
			--navbar-color: #2D3C4E;
			--text-color: #212529;
			--primary-btn-background-color: #f4ac3b;
			--primary-btn-background-color-hover: #ef970d;
			--primary-btn-text-color: #212529;
			--secondary-btn-background-color: #ffc107;
			--secondary-btn-background-color-hover: #d39e00;
			--secondary-btn-text-color: #212529;
			--text-link-color: #007bff;
			--hide-navbar-background-color: #fff;
		}

	</style>
---
code: |
  if True:
    import requests
    import json
    import time
    playa_base = "http://playa.community.lawyer"
    playa_fill_endpoint = "http://playa.community.lawyer/task"
    playa_status_endpoint = "http://playa.community.lawyer/tasks"
    post_data = ___pdf_template_1519_to_json()
    fill_response = requests.post(playa_fill_endpoint, json=post_data).json()
    task_id = fill_response.get('id')
    access_key = fill_response.get('key')
    filled_attachment_url = ""
    done = False
    attempts_count = 0
    while not done and attempts_count < 250:
      status_url = playa_status_endpoint + '/' + str(task_id) + '?key=' + str(access_key)
      task_response = requests.get(status_url).json()
      done = task_response.get('status') == 'done'
      filled_attachment_url = playa_base + '/' + task_response.get('document_url')
      attempts_count += 1
      time.sleep(.1)
    t____sr1_pdf_1519_attachment_1740 = DAFileCollection()
    t____sr1_pdf_1519_attachment_1740.pdf = DAFile()
    t____sr1_pdf_1519_attachment_1740.pdf.initialize(extension="pdf")
    if done:
      t____sr1_pdf_1519_attachment_1740.pdf.from_url(filled_attachment_url)
      t____sr1_pdf_1519_attachment_1740.info = {'name': 'sr1', 'filename': 'sr1', 'description': ''}
    else:
      t____sr1_pdf_1519_attachment_1740.pdf.from_url('https://community.lawyer/static/blank.pdf')
      t____sr1_pdf_1519_attachment_1740.info = {'name': 'We encountered a problem', 'filename': 'sr1', 'description': 'There was a problem filling your PDF - please try again'}
  else:
    t____sr1_pdf_1519_attachment_1740 = ''
---
template: t_email_template_d5f20bd99683
subject: |
  Legal Automation Workshop Demo
content: |
  Spread the word ${name if defined("name") else empty_string()}  <3

	[https://www.legalautomation.rocks/](https://www.legalautomation.rocks/)
---
mandatory: True
code: |
	def ___send_t_email_email_4e4652a186c7():
		define("___already_sent_t_email_email_4e4652a186c7", True)
		background_action("___send_t_email_email_4e4652a186c7_background")
		return ''
---
event: ___send_t_email_email_4e4652a186c7_background
code: |
	if True:
		import requests
		permission_response = requests.get(url = 'https://community.lawyer/delivery_permitted', params = { 'id': 44, 'key': 'Raup_jZ0Eb13lMncLMtf6Q', 'desired_deliveries': 2 })
		data = permission_response.json()
		if data['permitted']:
			send_email(template=t_email_template_d5f20bd99683, to="%s" % ((augment(email) if defined("email") else empty_string())), cc="law@law.berkeley.edu")
			requests.post(url = 'https://community.lawyer/increment_delivery', params = { 'id': 44, 'key': 'Raup_jZ0Eb13lMncLMtf6Q', 'increment': 2 })
	background_response()
---
mandatory: |
	True
question: |
	<span id="session-id" data-session-id="${user_info().session}">
	<span id="sends-answers" data-sends-answers="false">
	<span id="cl-endpoint" data-cl-endpoint="https://community.lawyer">
	<span id="interview-id" data-interview-id="1604">

subquestion: |
	Thank you for using this app. Your session is complete.
---
