from .Generalcampaign import Campaign

class Website(Campaign):
    """Email campaign class for calculating measures
    about the campaign success.
    
     Attributes
        name (string) representing the campaign name
        start_date (string YYYY-MM-DD) representing the first day of the campaign
        end_date (string YYYY-MM-DD) representing the last day of the campaign
        eligible_customers (float) representing the number of customers eligible
        control_proportion (flot) representing the proportion of customers in the control group
        number_clicked (float) the number of customers who have clicked on the creative
        number_bought_treatment (float) the number of customers from the treatment group who have purchased the unit advertised
        number_bought_control (float) the number of customers from the control group who have purchased the unit advertised
     """
    
    def __init__(self, name, start, end, eligible_customers, control_proportion
                 , number_clicked, number_bought_treatment, number_bought_control):
        
        Campaign.__init__(self, name, start, end, eligible_customers, control_proportion)
        self.clicked = number_clicked
        self.bought_treatment = number_bought_treatment
        self.bought_control = number_bought_control
        
    def calculate_adjusted_population(self, share_of_presence):
        
        """Function to calculate the adjusted eligible population, depending
        on the share of presence available on the website.
        
        Args:
            share_of_presence (float) represents the usual share of presence on the website
            
        Returns:
            adjusted_population (float) represents the number of eligible customers who did not opt out from emails
            adjusted_treatment (float) represents the number of customers in the treatment group who did not opt out from emails
            adjusted_control (float) represents the number of customers in the control group who did not opt out from emails
        """
    
        adjusted_population = self.eligible_customers * (1 - share_of_presence)
        adjusted_treatment = self.calculate_treatment_size() * (1 - share_of_presence)
        adjusted_control = self.calculate_control_size() * (1 - share_of_presence)
        
        return adjusted_population, adjusted_treatment, adjusted_control
    
    def calculate_click_rate(self, share_of_presence, click_rate_benchmark):
        
        """Function that calculates the open rate among the treatment group
        and compares it with the open rate benchmark for that type of email.
        
        Args:
            share_of_presence (float) represents the usual share of presence on the website
            click_rate_benchmark (float) represents the benchmark click rate for those types of website creatives
            
        Returns:
            treat_click_rate (float) represents the open rate of the customers who were in the treatment group
            diff_with_benchmark (float) represents the difference between the actual open rate and the benchmark
        """
        
        adj_population, adj_treat, adj_control = self.calculate_adjusted_population(share_of_presence)
        
        treat_click_rate = self.clicked / adj_treat
        diff_with_benchmark = treat_click_rate - click_rate_benchmark
        
        return treat_click_rate, diff_with_benchmark
    
    def calculate_purchase_performance(self, share_of_presence):
        """Function that calculates the purchase performance of the treatment and control groups,
        and calculates the lift.
        
        Args:
            share_of_presence (float) represents the usual share of presence on the website
            
        Returns:
            purchase_rate_treatment (float) represents the proportion of treatment who purchased
            purchase_rate_control (float) represents the proportion of control who purchased
            performed_group (string) represents the group with the highest purchase rate
            lift (float) represents the lift in sales generated by the treatment group
        """
        
        adj_population, adj_treat, adj_control = self.calculate_adjusted_population(share_of_presence)
        
        # Calculate purchase rate
        purchase_rate_treatment = self.bought_treatment / adj_treat
        purchase_rate_control = self.bought_control / adj_control
        
        # Calculate most performing group
        if purchase_rate_treatment >= purchase_rate_control:
            performed_group = 'treatment'
        else:
            performed_group = 'control'
        
        # Calculate lift
        lift = purchase_rate_treatment - purchase_rate_control
        
        return purchase_rate_treatment, purchase_rate_control, performed_group, lift