Metadata-Version: 2.1
Name: websockify
Version: 0.9.0
Summary: Websockify.
Home-page: https://github.com/novnc/websockify
Author: Joel Martin
Author-email: github@martintribe.org
License: LGPLv3
Description: ## websockify: WebSockets support for any application/server
        
        websockify was formerly named wsproxy and was part of the
        [noVNC](https://github.com/novnc/noVNC) project.
        
        At the most basic level, websockify just translates WebSockets traffic
        to normal socket traffic. Websockify accepts the WebSockets handshake,
        parses it, and then begins forwarding traffic between the client and
        the target in both directions.
        
        ### News/help/contact
        
        Notable commits, announcements and news are posted to
        <a href="http://www.twitter.com/noVNC">@noVNC</a>
        
        If you are a websockify developer/integrator/user (or want to be)
        please join the <a
        href="https://groups.google.com/forum/?fromgroups#!forum/novnc">noVNC/websockify
        discussion group</a>
        
        Bugs and feature requests can be submitted via [github
        issues](https://github.com/novnc/websockify/issues).
        
        If you want to show appreciation for websockify you could donate to a great
        non-profits such as: [Compassion
        International](http://www.compassion.com/), [SIL](http://www.sil.org),
        [Habitat for Humanity](http://www.habitat.org), [Electronic Frontier
        Foundation](https://www.eff.org/), [Against Malaria
        Foundation](http://www.againstmalaria.com/), [Nothing But
        Nets](http://www.nothingbutnets.net/), etc. Please tweet <a
        href="http://www.twitter.com/noVNC">@noVNC</a> if you do.
        
        ### WebSockets binary data
        
        Starting with websockify 0.5.0, only the HyBi / IETF
        6455 WebSocket protocol is supported. There is no support for the older
        Base64 encoded data format.
        
        
        ### Encrypted WebSocket connections (wss://)
        
        To encrypt the traffic using the WebSocket 'wss://' URI scheme you need to
        generate a certificate and key for Websockify to load. By default, Websockify
        loads a certificate file name `self.pem` but the `--cert=CERT` and `--key=KEY`
        options can override the file name. You can generate a self-signed certificate
        using openssl. When asked for the common name, use the hostname of the server
        where the proxy will be running:
        
        ```
        openssl req -new -x509 -days 365 -nodes -out self.pem -keyout self.pem
        ```
        
        For a self-signed certificate to work, you need to make your client/browser
        understand it. You can do this by installing it as accepted certificate, or by
        using that same certificate for a HTTPS connection to which you navigate first
        and approve. Browsers generally don't give you the "trust certificate?" prompt
        by opening a WSS socket with invalid certificate, hence you need to have it
        acccept it by either of those two methods.
        
        If you have a commercial/valid SSL certificate with one ore more intermediate
        certificates, concat them into one file, server certificate first, then the
        intermediate(s) from the CA, etc. Point to this file with the `--cert` option
        and then also to the key with `--key`. Finally, use `--ssl-only` as needed.
        
        
        ### Additional websockify features
        
        These are not necessary for the basic operation.
        
        * Daemonizing: When the `-D` option is specified, websockify runs
          in the background as a daemon process.
        
        * SSL (the wss:// WebSockets URI): This is detected automatically by
          websockify by sniffing the first byte sent from the client and then
          wrapping the socket if the data starts with '\x16' or '\x80'
          (indicating SSL).
        
        * Session recording: This feature that allows recording of the traffic
          sent and received from the client to a file using the `--record`
          option.
        
        * Mini-webserver: websockify can detect and respond to normal web
          requests on the same port as the WebSockets proxy. This functionality
          is activated with the `--web DIR` option where DIR is the root of the
          web directory to serve.
        
        * Wrap a program: see the "Wrap a Program" section below.
        
        * Log files: websockify can save all logging information in a file.
          This functionality is activated with the `--log-file FILE` option
          where FILE is the file where the logs should be saved.
        
        * Authentication plugins: websockify can demand authentication for
          websocket connections and, if you use `--web-auth`, also for normal
          web requests. This functionality is activated with the
          `--auth-plugin CLASS` and `--auth-source ARG` options, where CLASS is
          usually one from auth_plugins.py and ARG is the plugin's configuration.
        
        * Token plugins: a single instance of websockify can connect clients to
          multiple different pre-configured targets, depending on the token sent
          by the client using the `token` URL parameter, or the hostname used to
          reach websockify, if you use `--host-token`. This functionality is
          activated with the `--token-plugin CLASS` and `--token-source ARG`
          options, where CLASS is usually one from token_plugins.py and ARG is
          the plugin's configuration.
        
        ### Other implementations of websockify
        
        The primary implementation of websockify is in python. There are
        several alternate implementations in other languages available in
        our sister repositories [websockify-js](https://github.com/novnc/websockify-js)
        (JavaScript/Node.js) and [websockify-other](https://github.com/novnc/websockify-other)
         (C, Clojure, Ruby).
        
        In addition there are several other external projects that implement
        the websockify "protocol". See the alternate implementation [Feature
        Matrix](https://github.com/novnc/websockify/wiki/Feature_Matrix) for
        more information.
        
        
        ### Wrap a Program
        
        In addition to proxying from a source address to a target address
        (which may be on a different system), websockify has the ability to
        launch a program on the local system and proxy WebSockets traffic to
        a normal TCP port owned/bound by the program.
        
        The is accomplished with a small LD_PRELOAD library (`rebind.so`)
        which intercepts bind() system calls by the program. The specified
        port is moved to a new localhost/loopback free high port. websockify
        then proxies WebSockets traffic directed to the original port to the
        new (moved) port of the program.
        
        The program wrap mode is invoked by replacing the target with `--`
        followed by the program command line to wrap.
        
            `./run 2023 -- PROGRAM ARGS`
        
        The `--wrap-mode` option can be used to indicate what action to take
        when the wrapped program exits or daemonizes.
        
        Here is an example of using websockify to wrap the vncserver command
        (which backgrounds itself) for use with
        [noVNC](https://github.com/novnc/noVNC):
        
            `./run 5901 --wrap-mode=ignore -- vncserver -geometry 1024x768 :1`
        
        Here is an example of wrapping telnetd (from krb5-telnetd). telnetd
        exits after the connection closes so the wrap mode is set to respawn
        the command:
        
            `sudo ./run 2023 --wrap-mode=respawn -- telnetd -debug 2023`
        
        The `wstelnet.html` page in the [websockify-js](https://github.com/novnc/websockify-js)
        project demonstrates a simple WebSockets based telnet client (use
        'localhost' and '2023' for the host and port respectively).
        
        
        ### Installing websockify
        
        Download one of the releases or the latest development version, extract
        it and run `python setup.py install` as root in the directory where you
        extracted the files. Normally, this will also install numpy for better
        performance, if you don't have it installed already. However, numpy is
        optional. If you don't want to install numpy or if you can't compile it,
        you can edit setup.py and remove the `install_requires=['numpy'],` line
        before running `python setup.py install`.
        
        Afterwards, websockify should be available in your path. Run
        `websockify --help` to confirm it's installed correctly.
        
        Changes
        =======
        
        0.9.0
        -----
        
        * Base64 support removed and binary mode is now required
        * Low level WebSocket protocol handling now has its own class
        * Authentication now optionally required for web server
        * Server hostname can be used as the token
        * JWT/JWS/JWE can be used for the token
        * redis can be used for the token
        * Can now log to syslog
        * Improved latency by disabling Nagle for proxied connection
        * Added client certificate authentication
        * Support for password protected certificate key file
        * TLS ciphers and options are now configurable
        * Can be invoked via inetd
        * Lots of minor fixes...
        
        0.8.0
        -----
        
        * Make websockify properly terminate children on SIGTERM (#226)
        * Remove logging in signal handlers (this can cause Python to hang under certain conditions) (#219)
        * Make it easier to log to a file (#205)
        * Add support for IPv6 addresses in tokens in the TokenFile token plugins (#197)
        * Improve auth plugin framework to enable better support for HTTP auth (#194, #201)
        * Fix bug in JSONTokenAPI token plugin (#192)
        * Fix a missing variable in the exception handler (#178)
        
        0.7.0
        -----
        
        * Python 3 support fixes (#140, #155, #159)
        * Generic token-parsing plugins support (#162)
        * Generic authentication plugins support (#172)
        * Fixed frame corruption on big-endian systems (#161)
        * Support heartbeats (via PING) and automatic responses to PONG (#169)
        * Automatically reject unmasked client frames by default (strict mode) (#174)
        * Automatically restart interrupted select calls (#175)
        * Make 'run' respect environment settings (including virtualenv) (#176)
        
        0.6.1 - May 11, 2015
        --------------------
        
        * **PATCH RELEASE**: Fixes a bug causing file_only to not be passed properly
        
        0.6.0 - Feb 18, 2014
        --------------------
        
        * **NOTE** : 0.6.0 will break existing code that sub-classes WebsocketProxy
        * Refactor to use standard SocketServer RequestHandler design
        * Fix zombie process bug on certain systems when using multiprocessing
        * Add better unit tests
        * Log information via python `logging` module
        
        0.5.1 - Jun 27, 2013
        --------------------
        
         * use upstream einaros/ws (>=0.4.27) with websockify.js
         * file_only and no_parent security options for WSRequestHandler
         * Update build of web-socket-js (c0855c6cae)
         * add include/web-socket-js-project submodule to gimite/web-socket-js
           for DSFG compliance.
         * drop Hixie protocol support
        
        0.4.1 - Mar 12, 2013
        --------------------
        
         * ***NOTE*** : 0.5.0 will drop Hixie protocol support
         * add include/ directory and remove some dev files from source
           distribution.
        
        0.4.0 - Mar 12, 2013
        --------------------
        
         * ***NOTE*** : 0.5.0 will drop Hixie protocol support
         * use Buffer base64 support in Node.js implementation
        
        0.3.0 - Jan 15, 2013
        --------------------
        
         * refactor into modules: websocket, websocketproxy
         * switch to web-socket-js that uses IETF 6455
         * change to MPL 2.0 license for include/*.js
         * fix session recording
        
        0.2.1 - Oct 15, 2012
        --------------------
        
         * re-released with updated version number
        
        0.2.0 - Sep 17, 2012
        --------------------
        
         * Binary data support in websock.js
         * Target config file/dir and multiple targets with token selector
         * IPv6 fixes
         * SSL target support
         * Proxy to/from unix socket
        
        
        0.1.0 - May 11, 2012
        --------------------
        
         * Initial versioned release.
        
        
        
Keywords: noVNC websockify
Platform: UNKNOWN
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.3
Classifier: Programming Language :: Python :: 3.4
Description-Content-Type: text/markdown
