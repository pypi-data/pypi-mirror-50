# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_p_convolve')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_p_convolve')
    _p_convolve = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_p_convolve', [dirname(__file__)])
        except ImportError:
            import _p_convolve
            return _p_convolve
        try:
            _mod = imp.load_module('_p_convolve', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _p_convolve = swig_import_helper()
    del swig_import_helper
else:
    import _p_convolve
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _p_convolve.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _p_convolve.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _p_convolve.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _p_convolve.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _p_convolve.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _p_convolve.SwigPyIterator_equal(self, x)

    def copy(self):
        return _p_convolve.SwigPyIterator_copy(self)

    def next(self):
        return _p_convolve.SwigPyIterator_next(self)

    def __next__(self):
        return _p_convolve.SwigPyIterator___next__(self)

    def previous(self):
        return _p_convolve.SwigPyIterator_previous(self)

    def advance(self, n):
        return _p_convolve.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _p_convolve.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _p_convolve.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _p_convolve.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _p_convolve.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _p_convolve.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _p_convolve.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _p_convolve.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def p_convolve_py_helper_double(shape1, size1, shape2, size2, pGoal, resultSize):
    return _p_convolve.p_convolve_py_helper_double(shape1, size1, shape2, size2, pGoal, resultSize)
p_convolve_py_helper_double = _p_convolve.p_convolve_py_helper_double

import numpy as np
def numeric_p_convolve_py(NPA1, NPA2, PG):
  NPA1_Dim = np.array(NPA1.shape)
  NPA2_Dim = np.array(NPA2.shape)
  RsltDim = NPA1_Dim + NPA2_Dim - 1
  Rslt = np.zeros(np.prod(RsltDim))
  p_convolve_py_helper_double(NPA1_Dim, NPA1.flatten(), NPA2_Dim, NPA2.flatten(), PG, Rslt)
  Rslt = Rslt.reshape(RsltDim)
  return Rslt

# This file is compatible with both classic and new-style classes.


